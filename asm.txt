
test:	file format ELF32-arm-little

Disassembly of section .text:
0000000008000188 cortex_m::register::primask::read::h1d7f58bcee845606:
 8000188:	push	{r7, lr}
 800018a:	sub	sp, #16
 800018c:	bl	#7784
 8000190:	str	r0, [sp, #12]
 8000192:	b	#-2 <cortex_m::register::primask::read::h1d7f58bcee845606+0xc>
 8000194:	ldr	r0, [sp, #12]
 8000196:	str	r0, [sp, #4]
 8000198:	b	#-2 <cortex_m::register::primask::read::h1d7f58bcee845606+0x12>
 800019a:	ldr	r0, [sp, #4]
 800019c:	and	r1, r0, #1
 80001a0:	str	r1, [sp]
 80001a2:	b	#-2 <cortex_m::register::primask::read::h1d7f58bcee845606+0x1c>
 80001a4:	ldr	r0, [sp]
 80001a6:	cmp	r0, #1
 80001a8:	beq	#8 <cortex_m::register::primask::read::h1d7f58bcee845606+0x2c>
 80001aa:	b	#-2 <cortex_m::register::primask::read::h1d7f58bcee845606+0x24>
 80001ac:	movs	r0, #0
 80001ae:	strb.w	r0, [sp, #11]
 80001b2:	b	#6 <cortex_m::register::primask::read::h1d7f58bcee845606+0x34>
 80001b4:	movs	r0, #1
 80001b6:	strb.w	r0, [sp, #11]
 80001ba:	b	#-2 <cortex_m::register::primask::read::h1d7f58bcee845606+0x34>
 80001bc:	ldrb.w	r0, [sp, #11]
 80001c0:	add	sp, #16
 80001c2:	pop	{r7, pc}

00000000080001c4 embedded_hal::digital::v2_compat::<impl embedded_hal::digital::v2::OutputPin for T>::set_low::h2368d7e1a083090c:
 80001c4:	push	{r7, lr}
 80001c6:	sub	sp, #16
 80001c8:	mov	r1, r0
 80001ca:	str	r0, [sp, #8]
 80001cc:	ldr	r0, [sp, #8]
 80001ce:	str	r1, [sp, #4]
 80001d0:	bl	#144
 80001d4:	b	#-2 <embedded_hal::digital::v2_compat::<impl embedded_hal::digital::v2::OutputPin for T>::set_low::h2368d7e1a083090c+0x12>
 80001d6:	movs	r0, #0
 80001d8:	strb.w	r0, [sp, #15]
 80001dc:	ldrb.w	r0, [sp, #15]
 80001e0:	add	sp, #16
 80001e2:	pop	{r7, pc}

00000000080001e4 embedded_hal::digital::v2_compat::<impl embedded_hal::digital::v2::OutputPin for T>::set_low::hae548af803e0e792:
 80001e4:	push	{r7, lr}
 80001e6:	sub	sp, #16
 80001e8:	mov	r1, r0
 80001ea:	str	r0, [sp, #8]
 80001ec:	ldr	r0, [sp, #8]
 80001ee:	str	r1, [sp, #4]
 80001f0:	bl	#370
 80001f4:	b	#-2 <embedded_hal::digital::v2_compat::<impl embedded_hal::digital::v2::OutputPin for T>::set_low::hae548af803e0e792+0x12>
 80001f6:	movs	r0, #0
 80001f8:	strb.w	r0, [sp, #15]
 80001fc:	ldrb.w	r0, [sp, #15]
 8000200:	add	sp, #16
 8000202:	pop	{r7, pc}

0000000008000204 embedded_hal::digital::v2_compat::<impl embedded_hal::digital::v2::OutputPin for T>::set_high::h16689eed16d74bc4:
 8000204:	push	{r7, lr}
 8000206:	sub	sp, #16
 8000208:	mov	r1, r0
 800020a:	str	r0, [sp, #8]
 800020c:	ldr	r0, [sp, #8]
 800020e:	str	r1, [sp, #4]
 8000210:	bl	#272
 8000214:	b	#-2 <embedded_hal::digital::v2_compat::<impl embedded_hal::digital::v2::OutputPin for T>::set_high::h16689eed16d74bc4+0x12>
 8000216:	movs	r0, #0
 8000218:	strb.w	r0, [sp, #15]
 800021c:	ldrb.w	r0, [sp, #15]
 8000220:	add	sp, #16
 8000222:	pop	{r7, pc}

0000000008000224 embedded_hal::digital::v2_compat::<impl embedded_hal::digital::v2::OutputPin for T>::set_high::h43399ae180ba29d7:
 8000224:	push	{r7, lr}
 8000226:	sub	sp, #16
 8000228:	mov	r1, r0
 800022a:	str	r0, [sp, #8]
 800022c:	ldr	r0, [sp, #8]
 800022e:	str	r1, [sp, #4]
 8000230:	bl	#432
 8000234:	b	#-2 <embedded_hal::digital::v2_compat::<impl embedded_hal::digital::v2::OutputPin for T>::set_high::h43399ae180ba29d7+0x12>
 8000236:	movs	r0, #0
 8000238:	strb.w	r0, [sp, #15]
 800023c:	ldrb.w	r0, [sp, #15]
 8000240:	add	sp, #16
 8000242:	pop	{r7, pc}

0000000008000244 embedded_hal::digital::v2_compat::<impl embedded_hal::digital::v2::OutputPin for T>::set_high::hfe206687c347ad08:
 8000244:	push	{r7, lr}
 8000246:	sub	sp, #16
 8000248:	mov	r1, r0
 800024a:	str	r0, [sp, #8]
 800024c:	ldr	r0, [sp, #8]
 800024e:	str	r1, [sp, #4]
 8000250:	bl	#142
 8000254:	b	#-2 <embedded_hal::digital::v2_compat::<impl embedded_hal::digital::v2::OutputPin for T>::set_high::hfe206687c347ad08+0x12>
 8000256:	movs	r0, #0
 8000258:	strb.w	r0, [sp, #15]
 800025c:	ldrb.w	r0, [sp, #15]
 8000260:	add	sp, #16
 8000262:	pop	{r7, pc}

0000000008000264 _ZN135_$LT$stm32f30x_hal..gpio..gpiob..PB0$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$7set_low17h8d09e1cd70a7fe70E:
 8000264:	push	{r7, lr}
 8000266:	sub	sp, #16
 8000268:	mov	r1, r0
 800026a:	str	r0, [sp, #4]
 800026c:	str	r1, [sp]
 800026e:	bl	#7192
 8000272:	str	r0, [sp, #8]
 8000274:	b	#-2 <_ZN135_$LT$stm32f30x_hal..gpio..gpiob..PB0$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$7set_low17h8d09e1cd70a7fe70E+0x12>
 8000276:	ldr	r0, [sp, #8]
 8000278:	adds	r0, #24
 800027a:	bl	#3398
 800027e:	b	#-2 <_ZN135_$LT$stm32f30x_hal..gpio..gpiob..PB0$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$7set_low17h8d09e1cd70a7fe70E+0x1c>
 8000280:	add	sp, #16
 8000282:	pop	{r7, pc}

0000000008000284 _ZN135_$LT$stm32f30x_hal..gpio..gpiob..PB0$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h4f1ce37a619b525fE:
 8000284:	push	{r7, lr}
 8000286:	sub	sp, #32
 8000288:	mov	r1, r0
 800028a:	str	r0, [sp, #28]
 800028c:	ldr	r0, [sp, #28]
 800028e:	movs	r2, #16
 8000290:	mov	r3, r2
 8000292:	cmp	r2, #16
 8000294:	str	r1, [sp, #20]
 8000296:	str	r0, [sp, #16]
 8000298:	str	r3, [sp, #12]
 800029a:	bvs	#40 <_ZN135_$LT$stm32f30x_hal..gpio..gpiob..PB0$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h4f1ce37a619b525fE+0x42>
 800029c:	b	#-2 <_ZN135_$LT$stm32f30x_hal..gpio..gpiob..PB0$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h4f1ce37a619b525fE+0x1a>
 800029e:	ldr	r0, [sp, #12]
 80002a0:	and	r1, r0, #31
 80002a4:	movs	r2, #1
 80002a6:	lsl.w	r1, r2, r1
 80002aa:	lsrs	r2, r0, #5
 80002ac:	cmp	r2, #0
 80002ae:	str	r1, [sp, #8]
 80002b0:	bne	#32 <_ZN135_$LT$stm32f30x_hal..gpio..gpiob..PB0$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h4f1ce37a619b525fE+0x50>
 80002b2:	b	#-2 <_ZN135_$LT$stm32f30x_hal..gpio..gpiob..PB0$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h4f1ce37a619b525fE+0x30>
 80002b4:	ldr	r0, [sp, #16]
 80002b6:	ldr	r1, [sp, #8]
 80002b8:	bl	#1432
 80002bc:	str	r0, [sp, #4]
 80002be:	b	#-2 <_ZN135_$LT$stm32f30x_hal..gpio..gpiob..PB0$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h4f1ce37a619b525fE+0x3c>
 80002c0:	ldr	r0, [sp, #4]
 80002c2:	add	sp, #32
 80002c4:	pop	{r7, pc}
 80002c6:	movw	r0, #16796
 80002ca:	movt	r0, #2048
 80002ce:	bl	#8778
 80002d2:	trap
 80002d4:	movw	r0, #16868
 80002d8:	movt	r0, #2048
 80002dc:	bl	#8764
 80002e0:	trap

00000000080002e2 _ZN135_$LT$stm32f30x_hal..gpio..gpiob..PB0$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$8set_high17ha0d71bab1913e076E:
 80002e2:	push	{r7, lr}
 80002e4:	sub	sp, #16
 80002e6:	mov	r1, r0
 80002e8:	str	r0, [sp, #4]
 80002ea:	str	r1, [sp]
 80002ec:	bl	#7066
 80002f0:	str	r0, [sp, #8]
 80002f2:	b	#-2 <_ZN135_$LT$stm32f30x_hal..gpio..gpiob..PB0$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$8set_high17ha0d71bab1913e076E+0x12>
 80002f4:	ldr	r0, [sp, #8]
 80002f6:	adds	r0, #24
 80002f8:	bl	#3388
 80002fc:	b	#-2 <_ZN135_$LT$stm32f30x_hal..gpio..gpiob..PB0$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$8set_high17ha0d71bab1913e076E+0x1c>
 80002fe:	add	sp, #16
 8000300:	pop	{r7, pc}

0000000008000302 _ZN135_$LT$stm32f30x_hal..gpio..gpiob..PB0$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$8set_high28_$u7b$$u7b$closure$u7d$$u7d$17h6a0b4c1fa1f83c5aE:
 8000302:	push	{r7, lr}
 8000304:	sub	sp, #24
 8000306:	mov	r1, r0
 8000308:	str	r0, [sp, #20]
 800030a:	ldr	r0, [sp, #20]
 800030c:	str	r1, [sp, #12]
 800030e:	str	r0, [sp, #8]
 8000310:	b	#-2 <_ZN135_$LT$stm32f30x_hal..gpio..gpiob..PB0$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$8set_high28_$u7b$$u7b$closure$u7d$$u7d$17h6a0b4c1fa1f83c5aE+0x10>
 8000312:	movs	r1, #1
 8000314:	ldr	r0, [sp, #8]
 8000316:	bl	#1338
 800031a:	str	r0, [sp, #4]
 800031c:	b	#-2 <_ZN135_$LT$stm32f30x_hal..gpio..gpiob..PB0$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$8set_high28_$u7b$$u7b$closure$u7d$$u7d$17h6a0b4c1fa1f83c5aE+0x1c>
 800031e:	ldr	r0, [sp, #4]
 8000320:	add	sp, #24
 8000322:	pop	{r7, pc}

0000000008000324 _ZN135_$LT$stm32f30x_hal..gpio..gpiob..PB7$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$8set_high17h8f413ee1b9981decE:
 8000324:	push	{r7, lr}
 8000326:	sub	sp, #16
 8000328:	mov	r1, r0
 800032a:	str	r0, [sp, #4]
 800032c:	str	r1, [sp]
 800032e:	bl	#7000
 8000332:	str	r0, [sp, #8]
 8000334:	b	#-2 <_ZN135_$LT$stm32f30x_hal..gpio..gpiob..PB7$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$8set_high17h8f413ee1b9981decE+0x12>
 8000336:	ldr	r0, [sp, #8]
 8000338:	adds	r0, #24
 800033a:	bl	#3380
 800033e:	b	#-2 <_ZN135_$LT$stm32f30x_hal..gpio..gpiob..PB7$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$8set_high17h8f413ee1b9981decE+0x1c>
 8000340:	add	sp, #16
 8000342:	pop	{r7, pc}

0000000008000344 _ZN135_$LT$stm32f30x_hal..gpio..gpiob..PB7$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$8set_high28_$u7b$$u7b$closure$u7d$$u7d$17he4a35dd39d3f3b52E:
 8000344:	push	{r7, lr}
 8000346:	sub	sp, #24
 8000348:	mov	r1, r0
 800034a:	str	r0, [sp, #20]
 800034c:	ldr	r0, [sp, #20]
 800034e:	str	r1, [sp, #12]
 8000350:	str	r0, [sp, #8]
 8000352:	b	#-2 <_ZN135_$LT$stm32f30x_hal..gpio..gpiob..PB7$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$8set_high28_$u7b$$u7b$closure$u7d$$u7d$17he4a35dd39d3f3b52E+0x10>
 8000354:	movs	r1, #128
 8000356:	ldr	r0, [sp, #8]
 8000358:	bl	#1272
 800035c:	str	r0, [sp, #4]
 800035e:	b	#-2 <_ZN135_$LT$stm32f30x_hal..gpio..gpiob..PB7$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$8set_high28_$u7b$$u7b$closure$u7d$$u7d$17he4a35dd39d3f3b52E+0x1c>
 8000360:	ldr	r0, [sp, #4]
 8000362:	add	sp, #24
 8000364:	pop	{r7, pc}

0000000008000366 _ZN136_$LT$stm32f30x_hal..gpio..gpiob..PB14$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$7set_low17h3141e037dd4e1aeeE:
 8000366:	push	{r7, lr}
 8000368:	sub	sp, #16
 800036a:	mov	r1, r0
 800036c:	str	r0, [sp, #4]
 800036e:	str	r1, [sp]
 8000370:	bl	#6934
 8000374:	str	r0, [sp, #8]
 8000376:	b	#-2 <_ZN136_$LT$stm32f30x_hal..gpio..gpiob..PB14$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$7set_low17h3141e037dd4e1aeeE+0x12>
 8000378:	ldr	r0, [sp, #8]
 800037a:	adds	r0, #24
 800037c:	bl	#3372
 8000380:	b	#-2 <_ZN136_$LT$stm32f30x_hal..gpio..gpiob..PB14$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$7set_low17h3141e037dd4e1aeeE+0x1c>
 8000382:	add	sp, #16
 8000384:	pop	{r7, pc}

0000000008000386 _ZN136_$LT$stm32f30x_hal..gpio..gpiob..PB14$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17headf63f2e0e6b7a6E:
 8000386:	push	{r7, lr}
 8000388:	sub	sp, #32
 800038a:	mov	r1, r0
 800038c:	str	r0, [sp, #28]
 800038e:	ldr	r0, [sp, #28]
 8000390:	movs	r2, #30
 8000392:	mov	r3, r2
 8000394:	cmp	r2, #16
 8000396:	str	r1, [sp, #20]
 8000398:	str	r0, [sp, #16]
 800039a:	str	r3, [sp, #12]
 800039c:	bvs	#40 <_ZN136_$LT$stm32f30x_hal..gpio..gpiob..PB14$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17headf63f2e0e6b7a6E+0x42>
 800039e:	b	#-2 <_ZN136_$LT$stm32f30x_hal..gpio..gpiob..PB14$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17headf63f2e0e6b7a6E+0x1a>
 80003a0:	ldr	r0, [sp, #12]
 80003a2:	and	r1, r0, #31
 80003a6:	movs	r2, #1
 80003a8:	lsl.w	r1, r2, r1
 80003ac:	lsrs	r2, r0, #5
 80003ae:	cmp	r2, #0
 80003b0:	str	r1, [sp, #8]
 80003b2:	bne	#32 <_ZN136_$LT$stm32f30x_hal..gpio..gpiob..PB14$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17headf63f2e0e6b7a6E+0x50>
 80003b4:	b	#-2 <_ZN136_$LT$stm32f30x_hal..gpio..gpiob..PB14$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17headf63f2e0e6b7a6E+0x30>
 80003b6:	ldr	r0, [sp, #16]
 80003b8:	ldr	r1, [sp, #8]
 80003ba:	bl	#1174
 80003be:	str	r0, [sp, #4]
 80003c0:	b	#-2 <_ZN136_$LT$stm32f30x_hal..gpio..gpiob..PB14$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17headf63f2e0e6b7a6E+0x3c>
 80003c2:	ldr	r0, [sp, #4]
 80003c4:	add	sp, #32
 80003c6:	pop	{r7, pc}
 80003c8:	movw	r0, #16796
 80003cc:	movt	r0, #2048
 80003d0:	bl	#8520
 80003d4:	trap
 80003d6:	movw	r0, #16868
 80003da:	movt	r0, #2048
 80003de:	bl	#8506
 80003e2:	trap

00000000080003e4 _ZN136_$LT$stm32f30x_hal..gpio..gpiob..PB14$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$8set_high17h7ed67964e87fe2b2E:
 80003e4:	push	{r7, lr}
 80003e6:	sub	sp, #16
 80003e8:	mov	r1, r0
 80003ea:	str	r0, [sp, #4]
 80003ec:	str	r1, [sp]
 80003ee:	bl	#6808
 80003f2:	str	r0, [sp, #8]
 80003f4:	b	#-2 <_ZN136_$LT$stm32f30x_hal..gpio..gpiob..PB14$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$8set_high17h7ed67964e87fe2b2E+0x12>
 80003f6:	ldr	r0, [sp, #8]
 80003f8:	adds	r0, #24
 80003fa:	bl	#3072
 80003fe:	b	#-2 <_ZN136_$LT$stm32f30x_hal..gpio..gpiob..PB14$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$8set_high17h7ed67964e87fe2b2E+0x1c>
 8000400:	add	sp, #16
 8000402:	pop	{r7, pc}

0000000008000404 _ZN136_$LT$stm32f30x_hal..gpio..gpiob..PB14$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$8set_high28_$u7b$$u7b$closure$u7d$$u7d$17hf9ab14a04eb5722cE:
 8000404:	push	{r7, lr}
 8000406:	sub	sp, #24
 8000408:	mov	r1, r0
 800040a:	str	r0, [sp, #20]
 800040c:	ldr	r0, [sp, #20]
 800040e:	str	r1, [sp, #12]
 8000410:	str	r0, [sp, #8]
 8000412:	b	#-2 <_ZN136_$LT$stm32f30x_hal..gpio..gpiob..PB14$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$8set_high28_$u7b$$u7b$closure$u7d$$u7d$17hf9ab14a04eb5722cE+0x10>
 8000414:	mov.w	r1, #16384
 8000418:	ldr	r0, [sp, #8]
 800041a:	bl	#1078
 800041e:	str	r0, [sp, #4]
 8000420:	b	#-2 <_ZN136_$LT$stm32f30x_hal..gpio..gpiob..PB14$LT$stm32f30x_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..OutputPin$GT$8set_high28_$u7b$$u7b$closure$u7d$$u7d$17hf9ab14a04eb5722cE+0x1e>
 8000422:	ldr	r0, [sp, #4]
 8000424:	add	sp, #24
 8000426:	pop	{r7, pc}

0000000008000428 _ZN13stm32f30x_hal4gpio5gpiob15PB0$LT$MODE$GT$21into_push_pull_output17h3aea4b90606035d2E:
 8000428:	push	{r7, lr}
 800042a:	sub	sp, #64
 800042c:	mov	r2, r1
 800042e:	mov	r3, r0
 8000430:	str	r0, [sp, #28]
 8000432:	str	r1, [sp, #32]
 8000434:	movs	r0, #0
 8000436:	movs	r1, #2
 8000438:	smull	r1, r12, r1, r0
 800043c:	cmp.w	r12, r1, asr #31
 8000440:	str	r2, [sp, #20]
 8000442:	str	r3, [sp, #16]
 8000444:	str	r0, [sp, #12]
 8000446:	bne	#60 <_ZN13stm32f30x_hal4gpio5gpiob15PB0$LT$MODE$GT$21into_push_pull_output17h3aea4b90606035d2E+0x5e>
 8000448:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB0$LT$MODE$GT$21into_push_pull_output17h3aea4b90606035d2E+0x22>
 800044a:	ldr	r0, [sp, #12]
 800044c:	str	r0, [sp, #40]
 800044e:	movs	r1, #1
 8000450:	str	r1, [sp, #44]
 8000452:	ldr	r0, [sp, #28]
 8000454:	bl	#5396
 8000458:	str	r0, [sp, #8]
 800045a:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB0$LT$MODE$GT$21into_push_pull_output17h3aea4b90606035d2E+0x34>
 800045c:	add	r0, sp, #40
 800045e:	str	r0, [sp, #48]
 8000460:	add	r0, sp, #44
 8000462:	str	r0, [sp, #52]
 8000464:	ldr	r1, [sp, #48]
 8000466:	ldr	r2, [sp, #52]
 8000468:	ldr	r0, [sp, #8]
 800046a:	bl	#3294
 800046e:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB0$LT$MODE$GT$21into_push_pull_output17h3aea4b90606035d2E+0x48>
 8000470:	ldr	r0, [sp, #32]
 8000472:	bl	#5390
 8000476:	str	r0, [sp, #4]
 8000478:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB0$LT$MODE$GT$21into_push_pull_output17h3aea4b90606035d2E+0x52>
 800047a:	ldr	r0, [sp, #4]
 800047c:	bl	#3644
 8000480:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB0$LT$MODE$GT$21into_push_pull_output17h3aea4b90606035d2E+0x5a>
 8000482:	add	sp, #64
 8000484:	pop	{r7, pc}
 8000486:	movw	r0, #16932
 800048a:	movt	r0, #2048
 800048e:	bl	#8330
 8000492:	trap

0000000008000494 _ZN13stm32f30x_hal4gpio5gpiob15PB0$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h1c45364c0e814628E:
 8000494:	push	{r7, lr}
 8000496:	sub	sp, #32
 8000498:	mov	r2, r1
 800049a:	mov	r3, r0
 800049c:	str	r0, [sp, #24]
 800049e:	str	r1, [sp, #28]
 80004a0:	ldr	r0, [sp, #28]
 80004a2:	ldr	r1, [sp, #24]
 80004a4:	str	r0, [sp, #16]
 80004a6:	mov	r0, r1
 80004a8:	str	r2, [sp, #12]
 80004aa:	str	r3, [sp, #8]
 80004ac:	bl	#3936
 80004b0:	str	r0, [sp, #4]
 80004b2:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB0$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h1c45364c0e814628E+0x20>
 80004b4:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB0$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h1c45364c0e814628E+0x22>
 80004b6:	ldr	r0, [sp, #4]
 80004b8:	bic	r1, r0, #1
 80004bc:	ldr	r0, [sp, #16]
 80004be:	bl	#3934
 80004c2:	str	r0, [sp]
 80004c4:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB0$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h1c45364c0e814628E+0x32>
 80004c6:	ldr	r0, [sp]
 80004c8:	add	sp, #32
 80004ca:	pop	{r7, pc}

00000000080004cc _ZN13stm32f30x_hal4gpio5gpiob15PB0$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hdecd2aa9f6a41a50E:
 80004cc:	push	{r4, r5, r7, lr}
 80004ce:	sub	sp, #56
 80004d0:	mov	r12, r3
 80004d2:	mov	lr, r2
 80004d4:	mov	r4, r1
 80004d6:	mov	r5, r0
 80004d8:	str	r0, [sp, #40]
 80004da:	str	r1, [sp, #44]
 80004dc:	str	r2, [sp, #48]
 80004de:	str	r3, [sp, #52]
 80004e0:	ldr	r0, [sp, #52]
 80004e2:	ldr	r1, [sp, #48]
 80004e4:	str	r0, [sp, #36]
 80004e6:	mov	r0, r1
 80004e8:	str.w	r12, [sp, #32]
 80004ec:	str.w	lr, [sp, #28]
 80004f0:	str	r4, [sp, #24]
 80004f2:	str	r5, [sp, #20]
 80004f4:	bl	#4130
 80004f8:	str	r0, [sp, #16]
 80004fa:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB0$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hdecd2aa9f6a41a50E+0x30>
 80004fc:	ldr	r0, [sp, #40]
 80004fe:	ldr	r0, [r0]
 8000500:	and	r1, r0, #31
 8000504:	movs	r2, #3
 8000506:	lsl.w	r1, r2, r1
 800050a:	lsrs	r0, r0, #5
 800050c:	cmp	r0, #0
 800050e:	str	r1, [sp, #12]
 8000510:	bne	#64 <_ZN13stm32f30x_hal4gpio5gpiob15PB0$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hdecd2aa9f6a41a50E+0x88>
 8000512:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB0$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hdecd2aa9f6a41a50E+0x48>
 8000514:	ldr	r0, [sp, #16]
 8000516:	ldr	r1, [sp, #12]
 8000518:	bic.w	r2, r0, r1
 800051c:	ldr	r3, [sp, #40]
 800051e:	ldr.w	r12, [sp, #44]
 8000522:	ldr.w	r12, [r12]
 8000526:	ldr	r3, [r3]
 8000528:	and	lr, r3, #31
 800052c:	lsl.w	r12, r12, lr
 8000530:	lsrs	r3, r3, #5
 8000532:	cmp	r3, #0
 8000534:	str	r2, [sp, #8]
 8000536:	str.w	r12, [sp, #4]
 800053a:	bne	#36 <_ZN13stm32f30x_hal4gpio5gpiob15PB0$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hdecd2aa9f6a41a50E+0x96>
 800053c:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB0$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hdecd2aa9f6a41a50E+0x72>
 800053e:	ldr	r0, [sp, #8]
 8000540:	ldr	r1, [sp, #4]
 8000542:	orrs	r1, r0
 8000544:	ldr	r0, [sp, #36]
 8000546:	bl	#4064
 800054a:	str	r0, [sp]
 800054c:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB0$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hdecd2aa9f6a41a50E+0x82>
 800054e:	ldr	r0, [sp]
 8000550:	add	sp, #56
 8000552:	pop	{r4, r5, r7, pc}
 8000554:	movw	r0, #16956
 8000558:	movt	r0, #2048
 800055c:	bl	#8124
 8000560:	trap
 8000562:	movw	r0, #16980
 8000566:	movt	r0, #2048
 800056a:	bl	#8110
 800056e:	trap

0000000008000570 _ZN13stm32f30x_hal4gpio5gpiob15PB7$LT$MODE$GT$21into_push_pull_output17h98217cf796116879E:
 8000570:	push	{r7, lr}
 8000572:	sub	sp, #64
 8000574:	mov	r2, r1
 8000576:	mov	r3, r0
 8000578:	str	r0, [sp, #28]
 800057a:	str	r1, [sp, #32]
 800057c:	movs	r0, #7
 800057e:	movs	r1, #2
 8000580:	smull	r0, r1, r1, r0
 8000584:	mov.w	r12, #14
 8000588:	cmp.w	r1, r0, asr #31
 800058c:	str	r2, [sp, #20]
 800058e:	str	r3, [sp, #16]
 8000590:	str.w	r12, [sp, #12]
 8000594:	bne	#60 <_ZN13stm32f30x_hal4gpio5gpiob15PB7$LT$MODE$GT$21into_push_pull_output17h98217cf796116879E+0x64>
 8000596:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB7$LT$MODE$GT$21into_push_pull_output17h98217cf796116879E+0x28>
 8000598:	ldr	r0, [sp, #12]
 800059a:	str	r0, [sp, #40]
 800059c:	movs	r1, #1
 800059e:	str	r1, [sp, #44]
 80005a0:	ldr	r0, [sp, #28]
 80005a2:	bl	#5062
 80005a6:	str	r0, [sp, #8]
 80005a8:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB7$LT$MODE$GT$21into_push_pull_output17h98217cf796116879E+0x3a>
 80005aa:	add	r0, sp, #40
 80005ac:	str	r0, [sp, #48]
 80005ae:	add	r0, sp, #44
 80005b0:	str	r0, [sp, #52]
 80005b2:	ldr	r1, [sp, #48]
 80005b4:	ldr	r2, [sp, #52]
 80005b6:	ldr	r0, [sp, #8]
 80005b8:	bl	#2858
 80005bc:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB7$LT$MODE$GT$21into_push_pull_output17h98217cf796116879E+0x4e>
 80005be:	ldr	r0, [sp, #32]
 80005c0:	bl	#5056
 80005c4:	str	r0, [sp, #4]
 80005c6:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB7$LT$MODE$GT$21into_push_pull_output17h98217cf796116879E+0x58>
 80005c8:	ldr	r0, [sp, #4]
 80005ca:	bl	#3146
 80005ce:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB7$LT$MODE$GT$21into_push_pull_output17h98217cf796116879E+0x60>
 80005d0:	add	sp, #64
 80005d2:	pop	{r7, pc}
 80005d4:	movw	r0, #16932
 80005d8:	movt	r0, #2048
 80005dc:	bl	#7996
 80005e0:	trap

00000000080005e2 _ZN13stm32f30x_hal4gpio5gpiob15PB7$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h786919a0936531dcE:
 80005e2:	push	{r7, lr}
 80005e4:	sub	sp, #32
 80005e6:	mov	r2, r1
 80005e8:	mov	r3, r0
 80005ea:	str	r0, [sp, #24]
 80005ec:	str	r1, [sp, #28]
 80005ee:	ldr	r0, [sp, #28]
 80005f0:	ldr	r1, [sp, #24]
 80005f2:	str	r0, [sp, #16]
 80005f4:	mov	r0, r1
 80005f6:	str	r2, [sp, #12]
 80005f8:	str	r3, [sp, #8]
 80005fa:	bl	#3602
 80005fe:	str	r0, [sp, #4]
 8000600:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB7$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h786919a0936531dcE+0x20>
 8000602:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB7$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h786919a0936531dcE+0x22>
 8000604:	ldr	r0, [sp, #4]
 8000606:	bic	r1, r0, #128
 800060a:	ldr	r0, [sp, #16]
 800060c:	bl	#3600
 8000610:	str	r0, [sp]
 8000612:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB7$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h786919a0936531dcE+0x32>
 8000614:	ldr	r0, [sp]
 8000616:	add	sp, #32
 8000618:	pop	{r7, pc}

000000000800061a _ZN13stm32f30x_hal4gpio5gpiob15PB7$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd727d8e6579f4a24E:
 800061a:	push	{r4, r5, r7, lr}
 800061c:	sub	sp, #56
 800061e:	mov	r12, r3
 8000620:	mov	lr, r2
 8000622:	mov	r4, r1
 8000624:	mov	r5, r0
 8000626:	str	r0, [sp, #40]
 8000628:	str	r1, [sp, #44]
 800062a:	str	r2, [sp, #48]
 800062c:	str	r3, [sp, #52]
 800062e:	ldr	r0, [sp, #52]
 8000630:	ldr	r1, [sp, #48]
 8000632:	str	r0, [sp, #36]
 8000634:	mov	r0, r1
 8000636:	str.w	r12, [sp, #32]
 800063a:	str.w	lr, [sp, #28]
 800063e:	str	r4, [sp, #24]
 8000640:	str	r5, [sp, #20]
 8000642:	bl	#3796
 8000646:	str	r0, [sp, #16]
 8000648:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB7$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd727d8e6579f4a24E+0x30>
 800064a:	ldr	r0, [sp, #40]
 800064c:	ldr	r0, [r0]
 800064e:	and	r1, r0, #31
 8000652:	movs	r2, #3
 8000654:	lsl.w	r1, r2, r1
 8000658:	lsrs	r0, r0, #5
 800065a:	cmp	r0, #0
 800065c:	str	r1, [sp, #12]
 800065e:	bne	#64 <_ZN13stm32f30x_hal4gpio5gpiob15PB7$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd727d8e6579f4a24E+0x88>
 8000660:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB7$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd727d8e6579f4a24E+0x48>
 8000662:	ldr	r0, [sp, #16]
 8000664:	ldr	r1, [sp, #12]
 8000666:	bic.w	r2, r0, r1
 800066a:	ldr	r3, [sp, #40]
 800066c:	ldr.w	r12, [sp, #44]
 8000670:	ldr.w	r12, [r12]
 8000674:	ldr	r3, [r3]
 8000676:	and	lr, r3, #31
 800067a:	lsl.w	r12, r12, lr
 800067e:	lsrs	r3, r3, #5
 8000680:	cmp	r3, #0
 8000682:	str	r2, [sp, #8]
 8000684:	str.w	r12, [sp, #4]
 8000688:	bne	#36 <_ZN13stm32f30x_hal4gpio5gpiob15PB7$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd727d8e6579f4a24E+0x96>
 800068a:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB7$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd727d8e6579f4a24E+0x72>
 800068c:	ldr	r0, [sp, #8]
 800068e:	ldr	r1, [sp, #4]
 8000690:	orrs	r1, r0
 8000692:	ldr	r0, [sp, #36]
 8000694:	bl	#3730
 8000698:	str	r0, [sp]
 800069a:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob15PB7$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hd727d8e6579f4a24E+0x82>
 800069c:	ldr	r0, [sp]
 800069e:	add	sp, #56
 80006a0:	pop	{r4, r5, r7, pc}
 80006a2:	movw	r0, #16956
 80006a6:	movt	r0, #2048
 80006aa:	bl	#7790
 80006ae:	trap
 80006b0:	movw	r0, #16980
 80006b4:	movt	r0, #2048
 80006b8:	bl	#7776
 80006bc:	trap

00000000080006be _ZN13stm32f30x_hal4gpio5gpiob16PB14$LT$MODE$GT$21into_push_pull_output17h10b0b2f661560adbE:
 80006be:	push	{r7, lr}
 80006c0:	sub	sp, #64
 80006c2:	mov	r2, r1
 80006c4:	mov	r3, r0
 80006c6:	str	r0, [sp, #28]
 80006c8:	str	r1, [sp, #32]
 80006ca:	movs	r0, #14
 80006cc:	movs	r1, #2
 80006ce:	smull	r0, r1, r1, r0
 80006d2:	mov.w	r12, #28
 80006d6:	cmp.w	r1, r0, asr #31
 80006da:	str	r2, [sp, #20]
 80006dc:	str	r3, [sp, #16]
 80006de:	str.w	r12, [sp, #12]
 80006e2:	bne	#60 <_ZN13stm32f30x_hal4gpio5gpiob16PB14$LT$MODE$GT$21into_push_pull_output17h10b0b2f661560adbE+0x64>
 80006e4:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob16PB14$LT$MODE$GT$21into_push_pull_output17h10b0b2f661560adbE+0x28>
 80006e6:	ldr	r0, [sp, #12]
 80006e8:	str	r0, [sp, #40]
 80006ea:	movs	r1, #1
 80006ec:	str	r1, [sp, #44]
 80006ee:	ldr	r0, [sp, #28]
 80006f0:	bl	#4728
 80006f4:	str	r0, [sp, #8]
 80006f6:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob16PB14$LT$MODE$GT$21into_push_pull_output17h10b0b2f661560adbE+0x3a>
 80006f8:	add	r0, sp, #40
 80006fa:	str	r0, [sp, #48]
 80006fc:	add	r0, sp, #44
 80006fe:	str	r0, [sp, #52]
 8000700:	ldr	r1, [sp, #48]
 8000702:	ldr	r2, [sp, #52]
 8000704:	ldr	r0, [sp, #8]
 8000706:	bl	#2728
 800070a:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob16PB14$LT$MODE$GT$21into_push_pull_output17h10b0b2f661560adbE+0x4e>
 800070c:	ldr	r0, [sp, #32]
 800070e:	bl	#4722
 8000712:	str	r0, [sp, #4]
 8000714:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob16PB14$LT$MODE$GT$21into_push_pull_output17h10b0b2f661560adbE+0x58>
 8000716:	ldr	r0, [sp, #4]
 8000718:	bl	#2894
 800071c:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob16PB14$LT$MODE$GT$21into_push_pull_output17h10b0b2f661560adbE+0x60>
 800071e:	add	sp, #64
 8000720:	pop	{r7, pc}
 8000722:	movw	r0, #16932
 8000726:	movt	r0, #2048
 800072a:	bl	#7662
 800072e:	trap

0000000008000730 _ZN13stm32f30x_hal4gpio5gpiob16PB14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h93446e000ab57a0cE:
 8000730:	push	{r7, lr}
 8000732:	sub	sp, #32
 8000734:	mov	r2, r1
 8000736:	mov	r3, r0
 8000738:	str	r0, [sp, #24]
 800073a:	str	r1, [sp, #28]
 800073c:	ldr	r0, [sp, #28]
 800073e:	ldr	r1, [sp, #24]
 8000740:	str	r0, [sp, #16]
 8000742:	mov	r0, r1
 8000744:	str	r2, [sp, #12]
 8000746:	str	r3, [sp, #8]
 8000748:	bl	#3268
 800074c:	str	r0, [sp, #4]
 800074e:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob16PB14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h93446e000ab57a0cE+0x20>
 8000750:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob16PB14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h93446e000ab57a0cE+0x22>
 8000752:	ldr	r0, [sp, #4]
 8000754:	bic	r1, r0, #16384
 8000758:	ldr	r0, [sp, #16]
 800075a:	bl	#3266
 800075e:	str	r0, [sp]
 8000760:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob16PB14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h93446e000ab57a0cE+0x32>
 8000762:	ldr	r0, [sp]
 8000764:	add	sp, #32
 8000766:	pop	{r7, pc}

0000000008000768 _ZN13stm32f30x_hal4gpio5gpiob16PB14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf2d83f435c948289E:
 8000768:	push	{r4, r5, r7, lr}
 800076a:	sub	sp, #56
 800076c:	mov	r12, r3
 800076e:	mov	lr, r2
 8000770:	mov	r4, r1
 8000772:	mov	r5, r0
 8000774:	str	r0, [sp, #40]
 8000776:	str	r1, [sp, #44]
 8000778:	str	r2, [sp, #48]
 800077a:	str	r3, [sp, #52]
 800077c:	ldr	r0, [sp, #52]
 800077e:	ldr	r1, [sp, #48]
 8000780:	str	r0, [sp, #36]
 8000782:	mov	r0, r1
 8000784:	str.w	r12, [sp, #32]
 8000788:	str.w	lr, [sp, #28]
 800078c:	str	r4, [sp, #24]
 800078e:	str	r5, [sp, #20]
 8000790:	bl	#3462
 8000794:	str	r0, [sp, #16]
 8000796:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob16PB14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf2d83f435c948289E+0x30>
 8000798:	ldr	r0, [sp, #40]
 800079a:	ldr	r0, [r0]
 800079c:	and	r1, r0, #31
 80007a0:	movs	r2, #3
 80007a2:	lsl.w	r1, r2, r1
 80007a6:	lsrs	r0, r0, #5
 80007a8:	cmp	r0, #0
 80007aa:	str	r1, [sp, #12]
 80007ac:	bne	#64 <_ZN13stm32f30x_hal4gpio5gpiob16PB14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf2d83f435c948289E+0x88>
 80007ae:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob16PB14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf2d83f435c948289E+0x48>
 80007b0:	ldr	r0, [sp, #16]
 80007b2:	ldr	r1, [sp, #12]
 80007b4:	bic.w	r2, r0, r1
 80007b8:	ldr	r3, [sp, #40]
 80007ba:	ldr.w	r12, [sp, #44]
 80007be:	ldr.w	r12, [r12]
 80007c2:	ldr	r3, [r3]
 80007c4:	and	lr, r3, #31
 80007c8:	lsl.w	r12, r12, lr
 80007cc:	lsrs	r3, r3, #5
 80007ce:	cmp	r3, #0
 80007d0:	str	r2, [sp, #8]
 80007d2:	str.w	r12, [sp, #4]
 80007d6:	bne	#36 <_ZN13stm32f30x_hal4gpio5gpiob16PB14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf2d83f435c948289E+0x96>
 80007d8:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob16PB14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf2d83f435c948289E+0x72>
 80007da:	ldr	r0, [sp, #8]
 80007dc:	ldr	r1, [sp, #4]
 80007de:	orrs	r1, r0
 80007e0:	ldr	r0, [sp, #36]
 80007e2:	bl	#3396
 80007e6:	str	r0, [sp]
 80007e8:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpiob16PB14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf2d83f435c948289E+0x82>
 80007ea:	ldr	r0, [sp]
 80007ec:	add	sp, #56
 80007ee:	pop	{r4, r5, r7, pc}
 80007f0:	movw	r0, #16956
 80007f4:	movt	r0, #2048
 80007f8:	bl	#7456
 80007fc:	trap
 80007fe:	movw	r0, #16980
 8000802:	movt	r0, #2048
 8000806:	bl	#7442
 800080a:	trap

000000000800080c <T as core::convert::From<T>>::from::h5615ff1b31f352c2:
 800080c:	sub	sp, #4
 800080e:	add	sp, #4
 8000810:	bx	lr

0000000008000812 <T as core::convert::From<T>>::from::h77a9d7e230519bb0:
 8000812:	sub	sp, #4
 8000814:	add	sp, #4
 8000816:	bx	lr

0000000008000818 <T as core::convert::From<T>>::from::h8356508a451ce7a2:
 8000818:	sub	sp, #4
 800081a:	add	sp, #4
 800081c:	bx	lr

000000000800081e <T as core::convert::Into<U>>::into::h17ef1d1443e120a7:
 800081e:	push	{r7, lr}
 8000820:	sub	sp, #8
 8000822:	bl	#-26
 8000826:	b	#-2 <<T as core::convert::Into<U>>::into::h17ef1d1443e120a7+0xa>
 8000828:	add	sp, #8
 800082a:	pop	{r7, pc}

000000000800082c <T as core::convert::Into<U>>::into::h795bfa4cd3f89698:
 800082c:	push	{r7, lr}
 800082e:	sub	sp, #8
 8000830:	bl	#-28
 8000834:	b	#-2 <<T as core::convert::Into<U>>::into::h795bfa4cd3f89698+0xa>
 8000836:	add	sp, #8
 8000838:	pop	{r7, pc}

000000000800083a <T as core::convert::Into<U>>::into::h8417a7816ad0809f:
 800083a:	push	{r7, lr}
 800083c:	sub	sp, #8
 800083e:	bl	#-48
 8000842:	b	#-2 <<T as core::convert::Into<U>>::into::h8417a7816ad0809f+0xa>
 8000844:	add	sp, #8
 8000846:	pop	{r7, pc}

0000000008000848 stm32f30x::gpiob::bsrr::W::reset_value::h91880307f4854912:
 8000848:	sub	sp, #4
 800084a:	movs	r0, #0
 800084c:	str	r0, [sp]
 800084e:	ldr	r0, [sp]
 8000850:	add	sp, #4
 8000852:	bx	lr

0000000008000854 stm32f30x::gpiob::bsrr::W::bits::hadb72b5ed92d9bb8:
 8000854:	sub	sp, #16
 8000856:	mov	r2, r1
 8000858:	mov	r3, r0
 800085a:	str	r0, [sp, #8]
 800085c:	str	r1, [sp, #12]
 800085e:	ldr	r0, [sp, #12]
 8000860:	ldr	r1, [sp, #8]
 8000862:	str	r0, [r1]
 8000864:	ldr	r0, [sp, #8]
 8000866:	str	r2, [sp, #4]
 8000868:	str	r3, [sp]
 800086a:	add	sp, #16
 800086c:	bx	lr

000000000800086e stm32f30x::gpioc::moder::R::bits::h62aba81f279e5398:
 800086e:	sub	sp, #8
 8000870:	mov	r1, r0
 8000872:	str	r0, [sp, #4]
 8000874:	ldr	r0, [sp, #4]
 8000876:	ldr	r0, [r0]
 8000878:	str	r1, [sp]
 800087a:	add	sp, #8
 800087c:	bx	lr

000000000800087e stm32f30x::gpioc::moder::W::bits::h0ddff96d20d03128:
 800087e:	sub	sp, #16
 8000880:	mov	r2, r1
 8000882:	mov	r3, r0
 8000884:	str	r0, [sp, #8]
 8000886:	str	r1, [sp, #12]
 8000888:	ldr	r0, [sp, #12]
 800088a:	ldr	r1, [sp, #8]
 800088c:	str	r0, [r1]
 800088e:	ldr	r0, [sp, #8]
 8000890:	str	r2, [sp, #4]
 8000892:	str	r3, [sp]
 8000894:	add	sp, #16
 8000896:	bx	lr

0000000008000898 stm32f30x::flash::cr::<impl stm32f30x::flash::CR>::write::h286ef37f4abe7990:
 8000898:	push	{r7, lr}
 800089a:	sub	sp, #40
 800089c:	mov	r2, r1
 800089e:	mov	r3, r0
 80008a0:	str	r0, [sp, #16]
 80008a2:	str	r1, [sp, #20]
 80008a4:	str	r2, [sp, #12]
 80008a6:	str	r3, [sp, #8]
 80008a8:	bl	#1496
 80008ac:	str	r0, [sp, #24]
 80008ae:	b	#-2 <stm32f30x::flash::cr::<impl stm32f30x::flash::CR>::write::h286ef37f4abe7990+0x18>
 80008b0:	ldr	r0, [sp, #20]
 80008b2:	add	r1, sp, #24
 80008b4:	str	r1, [sp, #28]
 80008b6:	ldr	r1, [sp, #28]
 80008b8:	bl	#434
 80008bc:	str	r0, [sp, #4]
 80008be:	b	#-2 <stm32f30x::flash::cr::<impl stm32f30x::flash::CR>::write::h286ef37f4abe7990+0x28>
 80008c0:	ldr	r0, [sp, #16]
 80008c2:	ldr	r1, [sp, #24]
 80008c4:	str	r0, [sp, #32]
 80008c6:	str	r1, [sp, #36]
 80008c8:	ldr	r0, [sp, #32]
 80008ca:	bl	#6088
 80008ce:	ldr	r1, [sp, #36]
 80008d0:	bl	#6418
 80008d4:	b	#-2 <stm32f30x::flash::cr::<impl stm32f30x::flash::CR>::write::h286ef37f4abe7990+0x3e>
 80008d6:	add	sp, #40
 80008d8:	pop	{r7, pc}

00000000080008da stm32f30x::flash::cr::<impl stm32f30x::flash::CR>::write::hd6697fc41a8b652d:
 80008da:	push	{r7, lr}
 80008dc:	sub	sp, #32
 80008de:	mov	r1, r0
 80008e0:	str	r0, [sp, #8]
 80008e2:	str	r1, [sp, #4]
 80008e4:	bl	#1436
 80008e8:	str	r0, [sp, #16]
 80008ea:	b	#-2 <stm32f30x::flash::cr::<impl stm32f30x::flash::CR>::write::hd6697fc41a8b652d+0x12>
 80008ec:	add	r0, sp, #16
 80008ee:	str	r0, [sp, #20]
 80008f0:	ldr	r0, [sp, #20]
 80008f2:	bl	#452
 80008f6:	str	r0, [sp]
 80008f8:	b	#-2 <stm32f30x::flash::cr::<impl stm32f30x::flash::CR>::write::hd6697fc41a8b652d+0x20>
 80008fa:	ldr	r0, [sp, #8]
 80008fc:	ldr	r1, [sp, #16]
 80008fe:	str	r0, [sp, #24]
 8000900:	str	r1, [sp, #28]
 8000902:	ldr	r0, [sp, #24]
 8000904:	bl	#6030
 8000908:	ldr	r1, [sp, #28]
 800090a:	bl	#6360
 800090e:	b	#-2 <stm32f30x::flash::cr::<impl stm32f30x::flash::CR>::write::hd6697fc41a8b652d+0x36>
 8000910:	add	sp, #32
 8000912:	pop	{r7, pc}

0000000008000914 stm32f30x::flash::sr::<impl stm32f30x::flash::SR>::write::h9b4cba8093d7a667:
 8000914:	push	{r7, lr}
 8000916:	sub	sp, #32
 8000918:	mov	r1, r0
 800091a:	str	r0, [sp, #8]
 800091c:	str	r1, [sp, #4]
 800091e:	bl	#666
 8000922:	str	r0, [sp, #16]
 8000924:	b	#-2 <stm32f30x::flash::sr::<impl stm32f30x::flash::SR>::write::h9b4cba8093d7a667+0x12>
 8000926:	add	r0, sp, #16
 8000928:	str	r0, [sp, #20]
 800092a:	ldr	r0, [sp, #20]
 800092c:	bl	#358
 8000930:	str	r0, [sp]
 8000932:	b	#-2 <stm32f30x::flash::sr::<impl stm32f30x::flash::SR>::write::h9b4cba8093d7a667+0x20>
 8000934:	ldr	r0, [sp, #8]
 8000936:	ldr	r1, [sp, #16]
 8000938:	str	r0, [sp, #24]
 800093a:	str	r1, [sp, #28]
 800093c:	ldr	r0, [sp, #24]
 800093e:	bl	#5972
 8000942:	ldr	r1, [sp, #28]
 8000944:	bl	#6302
 8000948:	b	#-2 <stm32f30x::flash::sr::<impl stm32f30x::flash::SR>::write::h9b4cba8093d7a667+0x36>
 800094a:	add	sp, #32
 800094c:	pop	{r7, pc}

000000000800094e stm32f30x::flash::keyr::<impl stm32f30x::flash::KEYR>::write::hc5278f9ae0a0db23:
 800094e:	push	{r7, lr}
 8000950:	sub	sp, #32
 8000952:	mov	r1, r0
 8000954:	str	r0, [sp, #8]
 8000956:	str	r1, [sp, #4]
 8000958:	bl	#1514
 800095c:	str	r0, [sp, #16]
 800095e:	b	#-2 <stm32f30x::flash::keyr::<impl stm32f30x::flash::KEYR>::write::hc5278f9ae0a0db23+0x12>
 8000960:	add	r0, sp, #16
 8000962:	str	r0, [sp, #20]
 8000964:	ldr	r0, [sp, #20]
 8000966:	bl	#188
 800096a:	str	r0, [sp]
 800096c:	b	#-2 <stm32f30x::flash::keyr::<impl stm32f30x::flash::KEYR>::write::hc5278f9ae0a0db23+0x20>
 800096e:	ldr	r0, [sp, #8]
 8000970:	ldr	r1, [sp, #16]
 8000972:	str	r0, [sp, #24]
 8000974:	str	r1, [sp, #28]
 8000976:	ldr	r0, [sp, #24]
 8000978:	bl	#5914
 800097c:	ldr	r1, [sp, #28]
 800097e:	bl	#6244
 8000982:	b	#-2 <stm32f30x::flash::keyr::<impl stm32f30x::flash::KEYR>::write::hc5278f9ae0a0db23+0x36>
 8000984:	add	sp, #32
 8000986:	pop	{r7, pc}

0000000008000988 stm32f30x::flash::keyr::<impl stm32f30x::flash::KEYR>::write::hf2cd25ac8678701f:
 8000988:	push	{r7, lr}
 800098a:	sub	sp, #32
 800098c:	mov	r1, r0
 800098e:	str	r0, [sp, #8]
 8000990:	str	r1, [sp, #4]
 8000992:	bl	#1456
 8000996:	str	r0, [sp, #16]
 8000998:	b	#-2 <stm32f30x::flash::keyr::<impl stm32f30x::flash::KEYR>::write::hf2cd25ac8678701f+0x12>
 800099a:	add	r0, sp, #16
 800099c:	str	r0, [sp, #20]
 800099e:	ldr	r0, [sp, #20]
 80009a0:	bl	#166
 80009a4:	str	r0, [sp]
 80009a6:	b	#-2 <stm32f30x::flash::keyr::<impl stm32f30x::flash::KEYR>::write::hf2cd25ac8678701f+0x20>
 80009a8:	ldr	r0, [sp, #8]
 80009aa:	ldr	r1, [sp, #16]
 80009ac:	str	r0, [sp, #24]
 80009ae:	str	r1, [sp, #28]
 80009b0:	ldr	r0, [sp, #24]
 80009b2:	bl	#5856
 80009b6:	ldr	r1, [sp, #28]
 80009b8:	bl	#6186
 80009bc:	b	#-2 <stm32f30x::flash::keyr::<impl stm32f30x::flash::KEYR>::write::hf2cd25ac8678701f+0x36>
 80009be:	add	sp, #32
 80009c0:	pop	{r7, pc}

00000000080009c2 stm32f30x::Peripherals::take::{{closure}}::h84fc5d996768a892:
 80009c2:	push	{r7, lr}
 80009c4:	sub	sp, #16
 80009c6:	mov	r1, r0
 80009c8:	str	r0, [sp, #8]
 80009ca:	movw	r0, #0
 80009ce:	movt	r0, #8192
 80009d2:	ldrb	r0, [r0]
 80009d4:	lsls	r0, r0, #31
 80009d6:	cmp	r0, #0
 80009d8:	str	r1, [sp]
 80009da:	bne	#6 <stm32f30x::Peripherals::take::{{closure}}::h84fc5d996768a892+0x22>
 80009dc:	b	#-2 <stm32f30x::Peripherals::take::{{closure}}::h84fc5d996768a892+0x1c>
 80009de:	bl	#5352
 80009e2:	b	#6 <stm32f30x::Peripherals::take::{{closure}}::h84fc5d996768a892+0x2a>
 80009e4:	movs	r0, #0
 80009e6:	strb.w	r0, [sp, #15]
 80009ea:	b	#6 <stm32f30x::Peripherals::take::{{closure}}::h84fc5d996768a892+0x32>
 80009ec:	movs	r0, #1
 80009ee:	strb.w	r0, [sp, #15]
 80009f2:	b	#-2 <stm32f30x::Peripherals::take::{{closure}}::h84fc5d996768a892+0x32>
 80009f4:	ldrb.w	r0, [sp, #15]
 80009f8:	add	sp, #16
 80009fa:	pop	{r7, pc}

00000000080009fc stm32f30x::gpioc::pupdr::R::bits::h4d850a7ae05ad93c:
 80009fc:	sub	sp, #8
 80009fe:	mov	r1, r0
 8000a00:	str	r0, [sp, #4]
 8000a02:	ldr	r0, [sp, #4]
 8000a04:	ldr	r0, [r0]
 8000a06:	str	r1, [sp]
 8000a08:	add	sp, #8
 8000a0a:	bx	lr

0000000008000a0c stm32f30x::gpioc::pupdr::W::bits::hd4a3f69465254229:
 8000a0c:	sub	sp, #16
 8000a0e:	mov	r2, r1
 8000a10:	mov	r3, r0
 8000a12:	str	r0, [sp, #8]
 8000a14:	str	r1, [sp, #12]
 8000a16:	ldr	r0, [sp, #12]
 8000a18:	ldr	r1, [sp, #8]
 8000a1a:	str	r0, [r1]
 8000a1c:	ldr	r0, [sp, #8]
 8000a1e:	str	r2, [sp, #4]
 8000a20:	str	r3, [sp]
 8000a22:	add	sp, #16
 8000a24:	bx	lr

0000000008000a26 test::write_flash::{{closure}}::hc70867139c8f47ec:
 8000a26:	push	{r7, lr}
 8000a28:	sub	sp, #16
 8000a2a:	mov	r1, r0
 8000a2c:	str	r0, [sp, #12]
 8000a2e:	ldr	r0, [sp, #12]
 8000a30:	movw	r2, #291
 8000a34:	movt	r2, #17767
 8000a38:	str	r1, [sp, #4]
 8000a3a:	mov	r1, r2
 8000a3c:	bl	#1298
 8000a40:	str	r0, [sp]
 8000a42:	b	#-2 <test::write_flash::{{closure}}::hc70867139c8f47ec+0x1e>
 8000a44:	ldr	r0, [sp]
 8000a46:	add	sp, #16
 8000a48:	pop	{r7, pc}

0000000008000a4a test::write_flash::{{closure}}::ha238c14ba9a623d8:
 8000a4a:	push	{r7, lr}
 8000a4c:	sub	sp, #16
 8000a4e:	mov	r1, r0
 8000a50:	str	r0, [sp, #12]
 8000a52:	ldr	r0, [sp, #12]
 8000a54:	movw	r2, #35243
 8000a58:	movt	r2, #52719
 8000a5c:	str	r1, [sp, #4]
 8000a5e:	mov	r1, r2
 8000a60:	bl	#1262
 8000a64:	str	r0, [sp]
 8000a66:	b	#-2 <test::write_flash::{{closure}}::ha238c14ba9a623d8+0x1e>
 8000a68:	ldr	r0, [sp]
 8000a6a:	add	sp, #16
 8000a6c:	pop	{r7, pc}

0000000008000a6e test::write_flash::{{closure}}::h022a6740074f8239:
 8000a6e:	push	{r7, lr}
 8000a70:	sub	sp, #24
 8000a72:	mov	r2, r1
 8000a74:	mov	r3, r0
 8000a76:	str	r0, [sp, #16]
 8000a78:	str	r1, [sp, #20]
 8000a7a:	ldr	r0, [sp, #20]
 8000a7c:	ldr	r1, [sp, #16]
 8000a7e:	ldr	r1, [r1]
 8000a80:	orr	r1, r1, #1
 8000a84:	str	r2, [sp, #12]
 8000a86:	str	r3, [sp, #8]
 8000a88:	bl	#1028
 8000a8c:	str	r0, [sp, #4]
 8000a8e:	b	#-2 <test::write_flash::{{closure}}::h022a6740074f8239+0x22>
 8000a90:	ldr	r0, [sp, #4]
 8000a92:	add	sp, #24
 8000a94:	pop	{r7, pc}

0000000008000a96 test::write_flash::{{closure}}::h0909a81c083d69c3:
 8000a96:	push	{r7, lr}
 8000a98:	sub	sp, #24
 8000a9a:	mov	r1, r0
 8000a9c:	str	r0, [sp, #20]
 8000a9e:	ldr	r0, [sp, #20]
 8000aa0:	str	r1, [sp, #12]
 8000aa2:	bl	#290
 8000aa6:	str	r0, [sp, #8]
 8000aa8:	b	#-2 <test::write_flash::{{closure}}::h0909a81c083d69c3+0x14>
 8000aaa:	ldr	r0, [sp, #8]
 8000aac:	bl	#4914
 8000ab0:	str	r0, [sp, #4]
 8000ab2:	b	#-2 <test::write_flash::{{closure}}::h0909a81c083d69c3+0x1e>
 8000ab4:	ldr	r0, [sp, #4]
 8000ab6:	add	sp, #24
 8000ab8:	pop	{r7, pc}

0000000008000aba test::write_flash::{{closure}}::h938d7762f2fa49e4:
 8000aba:	push	{r7, lr}
 8000abc:	sub	sp, #24
 8000abe:	mov	r1, r0
 8000ac0:	str	r0, [sp, #20]
 8000ac2:	ldr	r0, [sp, #20]
 8000ac4:	str	r1, [sp, #12]
 8000ac6:	bl	#992
 8000aca:	str	r0, [sp, #8]
 8000acc:	b	#-2 <test::write_flash::{{closure}}::h938d7762f2fa49e4+0x14>
 8000ace:	ldr	r0, [sp, #8]
 8000ad0:	bl	#4962
 8000ad4:	str	r0, [sp, #4]
 8000ad6:	b	#-2 <test::write_flash::{{closure}}::h938d7762f2fa49e4+0x1e>
 8000ad8:	ldr	r0, [sp, #4]
 8000ada:	add	sp, #24
 8000adc:	pop	{r7, pc}

0000000008000ade cortex_m::asm::nop::h377347b7b50fa1f2:
 8000ade:	push	{r7, lr}
 8000ae0:	bl	#5394
 8000ae4:	b	#-2 <cortex_m::asm::nop::h377347b7b50fa1f2+0x8>
 8000ae6:	pop	{r7, pc}

0000000008000ae8 <() as core::fmt::Debug>::fmt::h02e6ca4f742e128e:
 8000ae8:	push	{r7, lr}
 8000aea:	sub	sp, #24
 8000aec:	mov	r2, r1
 8000aee:	mov	r3, r0
 8000af0:	str	r0, [sp, #16]
 8000af2:	str	r1, [sp, #20]
 8000af4:	ldr	r0, [sp, #20]
 8000af6:	movw	r1, #17004
 8000afa:	movt	r1, #2048
 8000afe:	mov.w	r12, #2
 8000b02:	str	r2, [sp, #12]
 8000b04:	mov	r2, r12
 8000b06:	str	r3, [sp, #8]
 8000b08:	bl	#8076
 8000b0c:	str	r0, [sp, #4]
 8000b0e:	b	#-2 <<() as core::fmt::Debug>::fmt::h02e6ca4f742e128e+0x28>
 8000b10:	ldr	r0, [sp, #4]
 8000b12:	and	r0, r0, #1
 8000b16:	add	sp, #24
 8000b18:	pop	{r7, pc}

0000000008000b1a core::fmt::Arguments::new_v1::hfa2dd4160cebedc9:
 8000b1a:	push	{r4, r5, r6, lr}
 8000b1c:	sub	sp, #40
 8000b1e:	ldr.w	r12, [sp, #56]
 8000b22:	mov	lr, r3
 8000b24:	mov	r4, r2
 8000b26:	mov	r5, r1
 8000b28:	mov	r6, r0
 8000b2a:	str	r1, [sp, #16]
 8000b2c:	str	r2, [sp, #20]
 8000b2e:	str	r3, [sp, #24]
 8000b30:	str.w	r12, [sp, #28]
 8000b34:	ldr	r1, [sp, #16]
 8000b36:	ldr	r2, [sp, #20]
 8000b38:	movs	r3, #0
 8000b3a:	str	r3, [sp, #36]
 8000b3c:	str	r3, [sp, #32]
 8000b3e:	str	r3, [sp, #32]
 8000b40:	ldr	r3, [sp, #24]
 8000b42:	ldr.w	r12, [sp, #28]
 8000b46:	str	r1, [r0]
 8000b48:	str	r2, [r0, #4]
 8000b4a:	ldr	r1, [sp, #32]
 8000b4c:	ldr	r2, [sp, #36]
 8000b4e:	str	r1, [r0, #8]
 8000b50:	str	r2, [r0, #12]
 8000b52:	str	r3, [r0, #16]
 8000b54:	str.w	r12, [r0, #20]
 8000b58:	str.w	lr, [sp, #12]
 8000b5c:	str	r4, [sp, #8]
 8000b5e:	str	r5, [sp, #4]
 8000b60:	str	r6, [sp]
 8000b62:	add	sp, #40
 8000b64:	pop	{r4, r5, r6, pc}

0000000008000b66 stm32f30x::flash::sr::R::bsy::h5246523763b712a1:
 8000b66:	sub	sp, #16
 8000b68:	mov	r1, r0
 8000b6a:	str	r0, [sp, #8]
 8000b6c:	ldr	r0, [sp, #8]
 8000b6e:	ldr	r0, [r0]
 8000b70:	str	r1, [sp, #4]
 8000b72:	str	r0, [sp]
 8000b74:	b	#-2 <stm32f30x::flash::sr::R::bsy::h5246523763b712a1+0x10>
 8000b76:	ldr	r0, [sp]
 8000b78:	and	r1, r0, #1
 8000b7c:	strb.w	r1, [sp, #15]
 8000b80:	ldrb.w	r1, [sp, #15]
 8000b84:	strb.w	r1, [sp, #14]
 8000b88:	ldrb.w	r0, [sp, #14]
 8000b8c:	add	sp, #16
 8000b8e:	bx	lr

0000000008000b90 stm32f30x::flash::sr::R::eop::h6000f56e88ce024e:
 8000b90:	sub	sp, #16
 8000b92:	mov	r1, r0
 8000b94:	str	r0, [sp, #8]
 8000b96:	ldr	r0, [sp, #8]
 8000b98:	ldr	r0, [r0]
 8000b9a:	lsrs	r0, r0, #5
 8000b9c:	str	r1, [sp, #4]
 8000b9e:	str	r0, [sp]
 8000ba0:	b	#-2 <stm32f30x::flash::sr::R::eop::h6000f56e88ce024e+0x12>
 8000ba2:	ldr	r0, [sp]
 8000ba4:	and	r1, r0, #1
 8000ba8:	strb.w	r1, [sp, #15]
 8000bac:	ldrb.w	r1, [sp, #15]
 8000bb0:	strb.w	r1, [sp, #14]
 8000bb4:	ldrb.w	r0, [sp, #14]
 8000bb8:	add	sp, #16
 8000bba:	bx	lr

0000000008000bbc stm32f30x::flash::sr::W::reset_value::h9399d2733f89720b:
 8000bbc:	sub	sp, #4
 8000bbe:	movs	r0, #0
 8000bc0:	str	r0, [sp]
 8000bc2:	ldr	r0, [sp]
 8000bc4:	add	sp, #4
 8000bc6:	bx	lr

0000000008000bc8 stm32f30x::flash::sr::W::eop::h94b8760db571020d:
 8000bc8:	sub	sp, #12
 8000bca:	mov	r1, r0
 8000bcc:	str	r0, [sp, #4]
 8000bce:	ldr	r0, [sp, #4]
 8000bd0:	str	r0, [sp, #8]
 8000bd2:	ldr	r0, [sp, #8]
 8000bd4:	str	r1, [sp]
 8000bd6:	add	sp, #12
 8000bd8:	bx	lr

0000000008000bda stm32f30x::flash::sr::BSYR::bit_is_set::hbc06dcead1be3f23:
 8000bda:	push	{r7, lr}
 8000bdc:	sub	sp, #16
 8000bde:	mov	r1, r0
 8000be0:	str	r0, [sp, #12]
 8000be2:	ldr	r0, [sp, #12]
 8000be4:	str	r1, [sp, #8]
 8000be6:	bl	#14
 8000bea:	str	r0, [sp, #4]
 8000bec:	b	#-2 <stm32f30x::flash::sr::BSYR::bit_is_set::hbc06dcead1be3f23+0x14>
 8000bee:	ldr	r0, [sp, #4]
 8000bf0:	and	r0, r0, #1
 8000bf4:	add	sp, #16
 8000bf6:	pop	{r7, pc}

0000000008000bf8 stm32f30x::flash::sr::BSYR::bit::h5ece0baa7fd16812:
 8000bf8:	sub	sp, #8
 8000bfa:	mov	r1, r0
 8000bfc:	str	r0, [sp, #4]
 8000bfe:	ldr	r0, [sp, #4]
 8000c00:	ldrb	r0, [r0]
 8000c02:	str	r1, [sp]
 8000c04:	add	sp, #8
 8000c06:	bx	lr

0000000008000c08 stm32f30x::flash::sr::EOPR::bit_is_set::h6fe06d22023864b6:
 8000c08:	push	{r7, lr}
 8000c0a:	sub	sp, #16
 8000c0c:	mov	r1, r0
 8000c0e:	str	r0, [sp, #12]
 8000c10:	ldr	r0, [sp, #12]
 8000c12:	str	r1, [sp, #8]
 8000c14:	bl	#14
 8000c18:	str	r0, [sp, #4]
 8000c1a:	b	#-2 <stm32f30x::flash::sr::EOPR::bit_is_set::h6fe06d22023864b6+0x14>
 8000c1c:	ldr	r0, [sp, #4]
 8000c1e:	and	r0, r0, #1
 8000c22:	add	sp, #16
 8000c24:	pop	{r7, pc}

0000000008000c26 stm32f30x::flash::sr::EOPR::bit::ha8ad29efd0efa7d4:
 8000c26:	sub	sp, #8
 8000c28:	mov	r1, r0
 8000c2a:	str	r0, [sp, #4]
 8000c2c:	ldr	r0, [sp, #4]
 8000c2e:	ldrb	r0, [r0]
 8000c30:	str	r1, [sp]
 8000c32:	add	sp, #8
 8000c34:	bx	lr

0000000008000c36 core::option::Option<T>::unwrap::h3ea2c67b97d1f032:
 8000c36:	sub	sp, #16
 8000c38:	mov	r1, r0
 8000c3a:	strb.w	r0, [sp, #11]
 8000c3e:	ldrb.w	r0, [sp, #11]
 8000c42:	lsls	r2, r0, #31
 8000c44:	cmp	r2, #0
 8000c46:	str	r1, [sp, #4]
 8000c48:	str	r0, [sp]
 8000c4a:	beq	#8 <core::option::Option<T>::unwrap::h3ea2c67b97d1f032+0x20>
 8000c4c:	b	#-2 <core::option::Option<T>::unwrap::h3ea2c67b97d1f032+0x18>
 8000c4e:	ldr	r0, [sp]
 8000c50:	cmp	r0, #1
 8000c52:	beq	#16 <core::option::Option<T>::unwrap::h3ea2c67b97d1f032+0x30>
 8000c54:	b	#12 <core::option::Option<T>::unwrap::h3ea2c67b97d1f032+0x2e>
 8000c56:	movw	r0, #17072
 8000c5a:	movt	r0, #2048
 8000c5e:	bl	#6330
 8000c62:	trap
 8000c64:	trap
 8000c66:	ldrb.w	r0, [sp, #11]
 8000c6a:	lsls	r0, r0, #31
 8000c6c:	cmp	r0, #0
 8000c6e:	beq	#4 <core::option::Option<T>::unwrap::h3ea2c67b97d1f032+0x40>
 8000c70:	b	#-2 <core::option::Option<T>::unwrap::h3ea2c67b97d1f032+0x3c>
 8000c72:	add	sp, #16
 8000c74:	bx	lr
 8000c76:	b	#-8 <core::option::Option<T>::unwrap::h3ea2c67b97d1f032+0x3c>

0000000008000c78 embedded_hal::digital::v2_compat::<impl embedded_hal::digital::v2::InputPin for T>::is_high::h0d4232774575ea6f:
 8000c78:	push	{r7, lr}
 8000c7a:	sub	sp, #16
 8000c7c:	mov	r1, r0
 8000c7e:	str	r0, [sp, #8]
 8000c80:	ldr	r0, [sp, #8]
 8000c82:	str	r1, [sp, #4]
 8000c84:	bl	#80
 8000c88:	str	r0, [sp]
 8000c8a:	b	#-2 <embedded_hal::digital::v2_compat::<impl embedded_hal::digital::v2::InputPin for T>::is_high::h0d4232774575ea6f+0x14>
 8000c8c:	ldr	r0, [sp]
 8000c8e:	and	r1, r0, #1
 8000c92:	strb.w	r1, [sp, #15]
 8000c96:	ldrb.w	r0, [sp, #15]
 8000c9a:	add	sp, #16
 8000c9c:	pop	{r7, pc}

0000000008000c9e _ZN134_$LT$stm32f30x_hal..gpio..gpioc..PC13$LT$stm32f30x_hal..gpio..Input$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..InputPin$GT$6is_low17h094a35788cf2855fE:
 8000c9e:	push	{r7, lr}
 8000ca0:	sub	sp, #24
 8000ca2:	mov	r1, r0
 8000ca4:	str	r0, [sp, #12]
 8000ca6:	str	r1, [sp, #8]
 8000ca8:	bl	#4584
 8000cac:	str	r0, [sp, #20]
 8000cae:	b	#-2 <_ZN134_$LT$stm32f30x_hal..gpio..gpioc..PC13$LT$stm32f30x_hal..gpio..Input$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..InputPin$GT$6is_low17h094a35788cf2855fE+0x12>
 8000cb0:	ldr	r0, [sp, #20]
 8000cb2:	adds	r0, #16
 8000cb4:	bl	#692
 8000cb8:	str	r0, [sp, #16]
 8000cba:	b	#-2 <_ZN134_$LT$stm32f30x_hal..gpio..gpioc..PC13$LT$stm32f30x_hal..gpio..Input$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..InputPin$GT$6is_low17h094a35788cf2855fE+0x1e>
 8000cbc:	add	r0, sp, #16
 8000cbe:	bl	#552
 8000cc2:	str	r0, [sp, #4]
 8000cc4:	b	#-2 <_ZN134_$LT$stm32f30x_hal..gpio..gpioc..PC13$LT$stm32f30x_hal..gpio..Input$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..InputPin$GT$6is_low17h094a35788cf2855fE+0x28>
 8000cc6:	b	#-2 <_ZN134_$LT$stm32f30x_hal..gpio..gpioc..PC13$LT$stm32f30x_hal..gpio..Input$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..InputPin$GT$6is_low17h094a35788cf2855fE+0x2a>
 8000cc8:	ldr	r0, [sp, #4]
 8000cca:	and	r1, r0, #8192
 8000cce:	movs	r2, #1
 8000cd0:	eor.w	r0, r2, r1, lsr #13
 8000cd4:	add	sp, #24
 8000cd6:	pop	{r7, pc}

0000000008000cd8 _ZN134_$LT$stm32f30x_hal..gpio..gpioc..PC13$LT$stm32f30x_hal..gpio..Input$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..InputPin$GT$7is_high17h60537cdc73e7d432E:
 8000cd8:	push	{r7, lr}
 8000cda:	sub	sp, #16
 8000cdc:	mov	r1, r0
 8000cde:	str	r0, [sp, #12]
 8000ce0:	ldr	r0, [sp, #12]
 8000ce2:	str	r1, [sp, #8]
 8000ce4:	bl	#-74
 8000ce8:	str	r0, [sp, #4]
 8000cea:	b	#-2 <_ZN134_$LT$stm32f30x_hal..gpio..gpioc..PC13$LT$stm32f30x_hal..gpio..Input$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v1..InputPin$GT$7is_high17h60537cdc73e7d432E+0x14>
 8000cec:	movs	r0, #1
 8000cee:	ldr	r1, [sp, #4]
 8000cf0:	bics	r0, r1
 8000cf2:	add	sp, #16
 8000cf4:	pop	{r7, pc}

0000000008000cf6 _ZN13stm32f30x_hal4gpio5gpioc16PC13$LT$MODE$GT$19into_floating_input17h0f16ed8e752ae49eE:
 8000cf6:	push	{r7, lr}
 8000cf8:	sub	sp, #56
 8000cfa:	mov	r2, r1
 8000cfc:	mov	r3, r0
 8000cfe:	str	r0, [sp, #28]
 8000d00:	str	r1, [sp, #32]
 8000d02:	movs	r0, #13
 8000d04:	movs	r1, #2
 8000d06:	smull	r0, r1, r1, r0
 8000d0a:	mov.w	r12, #26
 8000d0e:	cmp.w	r1, r0, asr #31
 8000d12:	str	r2, [sp, #20]
 8000d14:	str	r3, [sp, #16]
 8000d16:	str.w	r12, [sp, #12]
 8000d1a:	bne	#56 <_ZN13stm32f30x_hal4gpio5gpioc16PC13$LT$MODE$GT$19into_floating_input17h0f16ed8e752ae49eE+0x60>
 8000d1c:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpioc16PC13$LT$MODE$GT$19into_floating_input17h0f16ed8e752ae49eE+0x28>
 8000d1e:	ldr	r0, [sp, #12]
 8000d20:	str	r0, [sp, #40]
 8000d22:	ldr	r0, [sp, #28]
 8000d24:	bl	#2876
 8000d28:	str	r0, [sp, #8]
 8000d2a:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpioc16PC13$LT$MODE$GT$19into_floating_input17h0f16ed8e752ae49eE+0x36>
 8000d2c:	add	r0, sp, #40
 8000d2e:	str	r0, [sp, #44]
 8000d30:	ldr	r1, [sp, #44]
 8000d32:	ldr	r0, [sp, #8]
 8000d34:	bl	#1494
 8000d38:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpioc16PC13$LT$MODE$GT$19into_floating_input17h0f16ed8e752ae49eE+0x44>
 8000d3a:	ldr	r0, [sp, #32]
 8000d3c:	bl	#2876
 8000d40:	str	r0, [sp, #4]
 8000d42:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpioc16PC13$LT$MODE$GT$19into_floating_input17h0f16ed8e752ae49eE+0x4e>
 8000d44:	add	r0, sp, #40
 8000d46:	str	r0, [sp, #48]
 8000d48:	ldr	r1, [sp, #48]
 8000d4a:	ldr	r0, [sp, #4]
 8000d4c:	bl	#1560
 8000d50:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpioc16PC13$LT$MODE$GT$19into_floating_input17h0f16ed8e752ae49eE+0x5c>
 8000d52:	add	sp, #56
 8000d54:	pop	{r7, pc}
 8000d56:	movw	r0, #17236
 8000d5a:	movt	r0, #2048
 8000d5e:	bl	#6074
 8000d62:	trap

0000000008000d64 _ZN13stm32f30x_hal4gpio5gpioc16PC13$LT$MODE$GT$19into_floating_input28_$u7b$$u7b$closure$u7d$$u7d$17hced7f9ba381930fdE:
 8000d64:	push	{r7, lr}
 8000d66:	sub	sp, #40
 8000d68:	mov	r3, r2
 8000d6a:	mov	r12, r1
 8000d6c:	mov	lr, r0
 8000d6e:	str	r0, [sp, #28]
 8000d70:	str	r1, [sp, #32]
 8000d72:	str	r2, [sp, #36]
 8000d74:	ldr	r0, [sp, #36]
 8000d76:	ldr	r1, [sp, #32]
 8000d78:	str	r0, [sp, #24]
 8000d7a:	mov	r0, r1
 8000d7c:	str	r3, [sp, #20]
 8000d7e:	str.w	r12, [sp, #16]
 8000d82:	str.w	lr, [sp, #12]
 8000d86:	bl	#-910
 8000d8a:	str	r0, [sp, #8]
 8000d8c:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpioc16PC13$LT$MODE$GT$19into_floating_input28_$u7b$$u7b$closure$u7d$$u7d$17hced7f9ba381930fdE+0x2a>
 8000d8e:	ldr	r0, [sp, #28]
 8000d90:	ldr	r0, [r0]
 8000d92:	and	r1, r0, #31
 8000d96:	movs	r2, #3
 8000d98:	lsl.w	r1, r2, r1
 8000d9c:	lsrs	r0, r0, #5
 8000d9e:	cmp	r0, #0
 8000da0:	str	r1, [sp, #4]
 8000da2:	bne	#24 <_ZN13stm32f30x_hal4gpio5gpioc16PC13$LT$MODE$GT$19into_floating_input28_$u7b$$u7b$closure$u7d$$u7d$17hced7f9ba381930fdE+0x5a>
 8000da4:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpioc16PC13$LT$MODE$GT$19into_floating_input28_$u7b$$u7b$closure$u7d$$u7d$17hced7f9ba381930fdE+0x42>
 8000da6:	ldr	r0, [sp, #8]
 8000da8:	ldr	r1, [sp, #4]
 8000daa:	bic.w	r1, r0, r1
 8000dae:	ldr	r0, [sp, #24]
 8000db0:	bl	#-936
 8000db4:	str	r0, [sp]
 8000db6:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpioc16PC13$LT$MODE$GT$19into_floating_input28_$u7b$$u7b$closure$u7d$$u7d$17hced7f9ba381930fdE+0x54>
 8000db8:	ldr	r0, [sp]
 8000dba:	add	sp, #40
 8000dbc:	pop	{r7, pc}
 8000dbe:	movw	r0, #17300
 8000dc2:	movt	r0, #2048
 8000dc6:	bl	#5970
 8000dca:	trap

0000000008000dcc _ZN13stm32f30x_hal4gpio5gpioc16PC13$LT$MODE$GT$19into_floating_input28_$u7b$$u7b$closure$u7d$$u7d$17hd1b0d7a75178a771E:
 8000dcc:	push	{r7, lr}
 8000dce:	sub	sp, #40
 8000dd0:	mov	r3, r2
 8000dd2:	mov	r12, r1
 8000dd4:	mov	lr, r0
 8000dd6:	str	r0, [sp, #28]
 8000dd8:	str	r1, [sp, #32]
 8000dda:	str	r2, [sp, #36]
 8000ddc:	ldr	r0, [sp, #36]
 8000dde:	ldr	r1, [sp, #32]
 8000de0:	str	r0, [sp, #24]
 8000de2:	mov	r0, r1
 8000de4:	str	r3, [sp, #20]
 8000de6:	str.w	r12, [sp, #16]
 8000dea:	str.w	lr, [sp, #12]
 8000dee:	bl	#-1412
 8000df2:	str	r0, [sp, #8]
 8000df4:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpioc16PC13$LT$MODE$GT$19into_floating_input28_$u7b$$u7b$closure$u7d$$u7d$17hd1b0d7a75178a771E+0x2a>
 8000df6:	ldr	r0, [sp, #28]
 8000df8:	ldr	r0, [r0]
 8000dfa:	and	r1, r0, #31
 8000dfe:	movs	r2, #3
 8000e00:	lsl.w	r1, r2, r1
 8000e04:	lsrs	r0, r0, #5
 8000e06:	cmp	r0, #0
 8000e08:	str	r1, [sp, #4]
 8000e0a:	bne	#24 <_ZN13stm32f30x_hal4gpio5gpioc16PC13$LT$MODE$GT$19into_floating_input28_$u7b$$u7b$closure$u7d$$u7d$17hd1b0d7a75178a771E+0x5a>
 8000e0c:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpioc16PC13$LT$MODE$GT$19into_floating_input28_$u7b$$u7b$closure$u7d$$u7d$17hd1b0d7a75178a771E+0x42>
 8000e0e:	ldr	r0, [sp, #8]
 8000e10:	ldr	r1, [sp, #4]
 8000e12:	bic.w	r1, r0, r1
 8000e16:	ldr	r0, [sp, #24]
 8000e18:	bl	#-1438
 8000e1c:	str	r0, [sp]
 8000e1e:	b	#-2 <_ZN13stm32f30x_hal4gpio5gpioc16PC13$LT$MODE$GT$19into_floating_input28_$u7b$$u7b$closure$u7d$$u7d$17hd1b0d7a75178a771E+0x54>
 8000e20:	ldr	r0, [sp]
 8000e22:	add	sp, #40
 8000e24:	pop	{r7, pc}
 8000e26:	movw	r0, #17324
 8000e2a:	movt	r0, #2048
 8000e2e:	bl	#5866
 8000e32:	trap

0000000008000e34 <T as core::convert::From<T>>::from::hf0659c3c71c76171:
 8000e34:	sub	sp, #4
 8000e36:	add	sp, #4
 8000e38:	bx	lr

0000000008000e3a <T as core::convert::Into<U>>::into::h588cda1e00901449:
 8000e3a:	push	{r7, lr}
 8000e3c:	sub	sp, #8
 8000e3e:	bl	#-14
 8000e42:	b	#-2 <<T as core::convert::Into<U>>::into::h588cda1e00901449+0xa>
 8000e44:	add	sp, #8
 8000e46:	pop	{r7, pc}

0000000008000e48 stm32f30x::flash::cr::R::bits::h5c69e1165d0d86b8:
 8000e48:	sub	sp, #8
 8000e4a:	mov	r1, r0
 8000e4c:	str	r0, [sp, #4]
 8000e4e:	ldr	r0, [sp, #4]
 8000e50:	ldr	r0, [r0]
 8000e52:	str	r1, [sp]
 8000e54:	add	sp, #8
 8000e56:	bx	lr

0000000008000e58 stm32f30x::flash::cr::R::lock::h0a2944332f1df9fc:
 8000e58:	sub	sp, #16
 8000e5a:	mov	r1, r0
 8000e5c:	str	r0, [sp, #8]
 8000e5e:	ldr	r0, [sp, #8]
 8000e60:	ldr	r0, [r0]
 8000e62:	lsrs	r0, r0, #7
 8000e64:	str	r1, [sp, #4]
 8000e66:	str	r0, [sp]
 8000e68:	b	#-2 <stm32f30x::flash::cr::R::lock::h0a2944332f1df9fc+0x12>
 8000e6a:	ldr	r0, [sp]
 8000e6c:	and	r1, r0, #1
 8000e70:	strb.w	r1, [sp, #15]
 8000e74:	ldrb.w	r1, [sp, #15]
 8000e78:	strb.w	r1, [sp, #14]
 8000e7c:	ldrb.w	r0, [sp, #14]
 8000e80:	add	sp, #16
 8000e82:	bx	lr

0000000008000e84 stm32f30x::flash::cr::W::reset_value::h7cdaeea3f116b750:
 8000e84:	sub	sp, #4
 8000e86:	movs	r0, #128
 8000e88:	str	r0, [sp]
 8000e8a:	ldr	r0, [sp]
 8000e8c:	add	sp, #4
 8000e8e:	bx	lr

0000000008000e90 stm32f30x::flash::cr::W::bits::h763cb629ad429b2b:
 8000e90:	sub	sp, #16
 8000e92:	mov	r2, r1
 8000e94:	mov	r3, r0
 8000e96:	str	r0, [sp, #8]
 8000e98:	str	r1, [sp, #12]
 8000e9a:	ldr	r0, [sp, #12]
 8000e9c:	ldr	r1, [sp, #8]
 8000e9e:	str	r0, [r1]
 8000ea0:	ldr	r0, [sp, #8]
 8000ea2:	str	r2, [sp, #4]
 8000ea4:	str	r3, [sp]
 8000ea6:	add	sp, #16
 8000ea8:	bx	lr

0000000008000eaa stm32f30x::flash::cr::W::lock::hfe0489b96d966023:
 8000eaa:	sub	sp, #12
 8000eac:	mov	r1, r0
 8000eae:	str	r0, [sp, #4]
 8000eb0:	ldr	r0, [sp, #4]
 8000eb2:	str	r0, [sp, #8]
 8000eb4:	ldr	r0, [sp, #8]
 8000eb6:	str	r1, [sp]
 8000eb8:	add	sp, #12
 8000eba:	bx	lr

0000000008000ebc stm32f30x::flash::cr::LOCKR::bit_is_set::he14b6a8ce134ec71:
 8000ebc:	push	{r7, lr}
 8000ebe:	sub	sp, #16
 8000ec0:	mov	r1, r0
 8000ec2:	str	r0, [sp, #12]
 8000ec4:	ldr	r0, [sp, #12]
 8000ec6:	str	r1, [sp, #8]
 8000ec8:	bl	#14
 8000ecc:	str	r0, [sp, #4]
 8000ece:	b	#-2 <stm32f30x::flash::cr::LOCKR::bit_is_set::he14b6a8ce134ec71+0x14>
 8000ed0:	ldr	r0, [sp, #4]
 8000ed2:	and	r0, r0, #1
 8000ed6:	add	sp, #16
 8000ed8:	pop	{r7, pc}

0000000008000eda stm32f30x::flash::cr::LOCKR::bit::ha3616137d91c0b76:
 8000eda:	sub	sp, #8
 8000edc:	mov	r1, r0
 8000ede:	str	r0, [sp, #4]
 8000ee0:	ldr	r0, [sp, #4]
 8000ee2:	ldrb	r0, [r0]
 8000ee4:	str	r1, [sp]
 8000ee6:	add	sp, #8
 8000ee8:	bx	lr

0000000008000eea stm32f30x::gpioc::idr::R::bits::hb52afea1ba6bfc19:
 8000eea:	sub	sp, #8
 8000eec:	mov	r1, r0
 8000eee:	str	r0, [sp, #4]
 8000ef0:	ldr	r0, [sp, #4]
 8000ef2:	ldr	r0, [r0]
 8000ef4:	str	r1, [sp]
 8000ef6:	add	sp, #8
 8000ef8:	bx	lr

0000000008000efa stm32f30x::flash::cr::<impl stm32f30x::flash::CR>::read::heaf7eeb7adf550ec:
 8000efa:	push	{r7, lr}
 8000efc:	sub	sp, #24
 8000efe:	mov	r1, r0
 8000f00:	str	r0, [sp, #12]
 8000f02:	ldr	r0, [sp, #12]
 8000f04:	str	r0, [sp, #20]
 8000f06:	ldr	r0, [sp, #20]
 8000f08:	str	r1, [sp, #8]
 8000f0a:	bl	#4488
 8000f0e:	bl	#4794
 8000f12:	str	r0, [sp, #4]
 8000f14:	b	#-2 <stm32f30x::flash::cr::<impl stm32f30x::flash::CR>::read::heaf7eeb7adf550ec+0x1c>
 8000f16:	ldr	r0, [sp, #4]
 8000f18:	str	r0, [sp, #16]
 8000f1a:	ldr	r0, [sp, #16]
 8000f1c:	add	sp, #24
 8000f1e:	pop	{r7, pc}

0000000008000f20 stm32f30x::flash::sr::<impl stm32f30x::flash::SR>::read::h6ff391f3631f7bfc:
 8000f20:	push	{r7, lr}
 8000f22:	sub	sp, #24
 8000f24:	mov	r1, r0
 8000f26:	str	r0, [sp, #12]
 8000f28:	ldr	r0, [sp, #12]
 8000f2a:	str	r0, [sp, #20]
 8000f2c:	ldr	r0, [sp, #20]
 8000f2e:	str	r1, [sp, #8]
 8000f30:	bl	#4450
 8000f34:	bl	#4756
 8000f38:	str	r0, [sp, #4]
 8000f3a:	b	#-2 <stm32f30x::flash::sr::<impl stm32f30x::flash::SR>::read::h6ff391f3631f7bfc+0x1c>
 8000f3c:	ldr	r0, [sp, #4]
 8000f3e:	str	r0, [sp, #16]
 8000f40:	ldr	r0, [sp, #16]
 8000f42:	add	sp, #24
 8000f44:	pop	{r7, pc}

0000000008000f46 stm32f30x::flash::keyr::W::reset_value::h5a310c2e36d0da46:
 8000f46:	sub	sp, #4
 8000f48:	movs	r0, #0
 8000f4a:	str	r0, [sp]
 8000f4c:	ldr	r0, [sp]
 8000f4e:	add	sp, #4
 8000f50:	bx	lr

0000000008000f52 stm32f30x::flash::keyr::W::bits::h7745334586896fe7:
 8000f52:	sub	sp, #16
 8000f54:	mov	r2, r1
 8000f56:	mov	r3, r0
 8000f58:	str	r0, [sp, #8]
 8000f5a:	str	r1, [sp, #12]
 8000f5c:	ldr	r0, [sp, #12]
 8000f5e:	ldr	r1, [sp, #8]
 8000f60:	str	r0, [r1]
 8000f62:	ldr	r0, [sp, #8]
 8000f64:	str	r2, [sp, #4]
 8000f66:	str	r3, [sp]
 8000f68:	add	sp, #16
 8000f6a:	bx	lr

0000000008000f6c stm32f30x::gpioc::idr::<impl stm32f30x::gpioc::IDR>::read::h0206857b1c606047:
 8000f6c:	push	{r7, lr}
 8000f6e:	sub	sp, #24
 8000f70:	mov	r1, r0
 8000f72:	str	r0, [sp, #12]
 8000f74:	ldr	r0, [sp, #12]
 8000f76:	str	r0, [sp, #20]
 8000f78:	ldr	r0, [sp, #20]
 8000f7a:	str	r1, [sp, #8]
 8000f7c:	bl	#4374
 8000f80:	bl	#4680
 8000f84:	str	r0, [sp, #4]
 8000f86:	b	#-2 <stm32f30x::gpioc::idr::<impl stm32f30x::gpioc::IDR>::read::h0206857b1c606047+0x1c>
 8000f88:	ldr	r0, [sp, #4]
 8000f8a:	str	r0, [sp, #16]
 8000f8c:	ldr	r0, [sp, #16]
 8000f8e:	add	sp, #24
 8000f90:	pop	{r7, pc}

0000000008000f92 core::fmt::ArgumentV1::new::h20d71fbf4855f48f:
 8000f92:	sub	sp, #40
 8000f94:	mov	r2, r1
 8000f96:	mov	r3, r0
 8000f98:	str	r0, [sp, #16]
 8000f9a:	str	r1, [sp, #20]
 8000f9c:	ldr	r0, [sp, #20]
 8000f9e:	str	r0, [sp, #32]
 8000fa0:	ldr	r0, [sp, #32]
 8000fa2:	str	r2, [sp, #12]
 8000fa4:	str	r3, [sp, #8]
 8000fa6:	str	r0, [sp, #4]
 8000fa8:	b	#-2 <core::fmt::ArgumentV1::new::h20d71fbf4855f48f+0x18>
 8000faa:	ldr	r0, [sp, #16]
 8000fac:	str	r0, [sp, #36]
 8000fae:	ldr	r0, [sp, #36]
 8000fb0:	str	r0, [sp]
 8000fb2:	b	#-2 <core::fmt::ArgumentV1::new::h20d71fbf4855f48f+0x22>
 8000fb4:	ldr	r0, [sp]
 8000fb6:	str	r0, [sp, #24]
 8000fb8:	ldr	r1, [sp, #4]
 8000fba:	str	r1, [sp, #28]
 8000fbc:	ldr	r0, [sp, #24]
 8000fbe:	ldr	r1, [sp, #28]
 8000fc0:	add	sp, #40
 8000fc2:	bx	lr

0000000008000fc4 stm32f30x::gpiob::bsrr::<impl stm32f30x::gpiob::BSRR>::write::h27d3213b310b2c44:
 8000fc4:	push	{r7, lr}
 8000fc6:	sub	sp, #32
 8000fc8:	mov	r1, r0
 8000fca:	str	r0, [sp, #8]
 8000fcc:	str	r1, [sp, #4]
 8000fce:	bl	#-1930
 8000fd2:	str	r0, [sp, #16]
 8000fd4:	b	#-2 <stm32f30x::gpiob::bsrr::<impl stm32f30x::gpiob::BSRR>::write::h27d3213b310b2c44+0x12>
 8000fd6:	add	r0, sp, #16
 8000fd8:	str	r0, [sp, #20]
 8000fda:	ldr	r0, [sp, #20]
 8000fdc:	bl	#-3420
 8000fe0:	str	r0, [sp]
 8000fe2:	b	#-2 <stm32f30x::gpiob::bsrr::<impl stm32f30x::gpiob::BSRR>::write::h27d3213b310b2c44+0x20>
 8000fe4:	ldr	r0, [sp, #8]
 8000fe6:	ldr	r1, [sp, #16]
 8000fe8:	str	r0, [sp, #24]
 8000fea:	str	r1, [sp, #28]
 8000fec:	ldr	r0, [sp, #24]
 8000fee:	bl	#4260
 8000ff2:	ldr	r1, [sp, #28]
 8000ff4:	bl	#4590
 8000ff8:	b	#-2 <stm32f30x::gpiob::bsrr::<impl stm32f30x::gpiob::BSRR>::write::h27d3213b310b2c44+0x36>
 8000ffa:	add	sp, #32
 8000ffc:	pop	{r7, pc}

0000000008000ffe stm32f30x::gpiob::bsrr::<impl stm32f30x::gpiob::BSRR>::write::h698f4761cac729fd:
 8000ffe:	push	{r7, lr}
 8001000:	sub	sp, #32
 8001002:	mov	r1, r0
 8001004:	str	r0, [sp, #8]
 8001006:	str	r1, [sp, #4]
 8001008:	bl	#-1988
 800100c:	str	r0, [sp, #16]
 800100e:	b	#-2 <stm32f30x::gpiob::bsrr::<impl stm32f30x::gpiob::BSRR>::write::h698f4761cac729fd+0x12>
 8001010:	add	r0, sp, #16
 8001012:	str	r0, [sp, #20]
 8001014:	ldr	r0, [sp, #20]
 8001016:	bl	#-3094
 800101a:	str	r0, [sp]
 800101c:	b	#-2 <stm32f30x::gpiob::bsrr::<impl stm32f30x::gpiob::BSRR>::write::h698f4761cac729fd+0x20>
 800101e:	ldr	r0, [sp, #8]
 8001020:	ldr	r1, [sp, #16]
 8001022:	str	r0, [sp, #24]
 8001024:	str	r1, [sp, #28]
 8001026:	ldr	r0, [sp, #24]
 8001028:	bl	#4202
 800102c:	ldr	r1, [sp, #28]
 800102e:	bl	#4532
 8001032:	b	#-2 <stm32f30x::gpiob::bsrr::<impl stm32f30x::gpiob::BSRR>::write::h698f4761cac729fd+0x36>
 8001034:	add	sp, #32
 8001036:	pop	{r7, pc}

0000000008001038 stm32f30x::gpiob::bsrr::<impl stm32f30x::gpiob::BSRR>::write::haacfd718077baffb:
 8001038:	push	{r7, lr}
 800103a:	sub	sp, #32
 800103c:	mov	r1, r0
 800103e:	str	r0, [sp, #8]
 8001040:	str	r1, [sp, #4]
 8001042:	bl	#-2046
 8001046:	str	r0, [sp, #16]
 8001048:	b	#-2 <stm32f30x::gpiob::bsrr::<impl stm32f30x::gpiob::BSRR>::write::haacfd718077baffb+0x12>
 800104a:	add	r0, sp, #16
 800104c:	str	r0, [sp, #20]
 800104e:	ldr	r0, [sp, #20]
 8001050:	bl	#-3410
 8001054:	str	r0, [sp]
 8001056:	b	#-2 <stm32f30x::gpiob::bsrr::<impl stm32f30x::gpiob::BSRR>::write::haacfd718077baffb+0x20>
 8001058:	ldr	r0, [sp, #8]
 800105a:	ldr	r1, [sp, #16]
 800105c:	str	r0, [sp, #24]
 800105e:	str	r1, [sp, #28]
 8001060:	ldr	r0, [sp, #24]
 8001062:	bl	#4144
 8001066:	ldr	r1, [sp, #28]
 8001068:	bl	#4474
 800106c:	b	#-2 <stm32f30x::gpiob::bsrr::<impl stm32f30x::gpiob::BSRR>::write::haacfd718077baffb+0x36>
 800106e:	add	sp, #32
 8001070:	pop	{r7, pc}

0000000008001072 stm32f30x::gpiob::bsrr::<impl stm32f30x::gpiob::BSRR>::write::hc94408f6942c01f0:
 8001072:	push	{r7, lr}
 8001074:	sub	sp, #32
 8001076:	mov	r1, r0
 8001078:	str	r0, [sp, #8]
 800107a:	str	r1, [sp, #4]
 800107c:	bl	#-2104
 8001080:	str	r0, [sp, #16]
 8001082:	b	#-2 <stm32f30x::gpiob::bsrr::<impl stm32f30x::gpiob::BSRR>::write::hc94408f6942c01f0+0x12>
 8001084:	add	r0, sp, #16
 8001086:	str	r0, [sp, #20]
 8001088:	ldr	r0, [sp, #20]
 800108a:	bl	#-3402
 800108e:	str	r0, [sp]
 8001090:	b	#-2 <stm32f30x::gpiob::bsrr::<impl stm32f30x::gpiob::BSRR>::write::hc94408f6942c01f0+0x20>
 8001092:	ldr	r0, [sp, #8]
 8001094:	ldr	r1, [sp, #16]
 8001096:	str	r0, [sp, #24]
 8001098:	str	r1, [sp, #28]
 800109a:	ldr	r0, [sp, #24]
 800109c:	bl	#4086
 80010a0:	ldr	r1, [sp, #28]
 80010a2:	bl	#4416
 80010a6:	b	#-2 <stm32f30x::gpiob::bsrr::<impl stm32f30x::gpiob::BSRR>::write::hc94408f6942c01f0+0x36>
 80010a8:	add	sp, #32
 80010aa:	pop	{r7, pc}

00000000080010ac stm32f30x::gpiob::bsrr::<impl stm32f30x::gpiob::BSRR>::write::hd8d9f4d2d0eaf43e:
 80010ac:	push	{r7, lr}
 80010ae:	sub	sp, #32
 80010b0:	mov	r1, r0
 80010b2:	str	r0, [sp, #8]
 80010b4:	str	r1, [sp, #4]
 80010b6:	bl	#-2162
 80010ba:	str	r0, [sp, #16]
 80010bc:	b	#-2 <stm32f30x::gpiob::bsrr::<impl stm32f30x::gpiob::BSRR>::write::hd8d9f4d2d0eaf43e+0x12>
 80010be:	add	r0, sp, #16
 80010c0:	str	r0, [sp, #20]
 80010c2:	ldr	r0, [sp, #20]
 80010c4:	bl	#-3394
 80010c8:	str	r0, [sp]
 80010ca:	b	#-2 <stm32f30x::gpiob::bsrr::<impl stm32f30x::gpiob::BSRR>::write::hd8d9f4d2d0eaf43e+0x20>
 80010cc:	ldr	r0, [sp, #8]
 80010ce:	ldr	r1, [sp, #16]
 80010d0:	str	r0, [sp, #24]
 80010d2:	str	r1, [sp, #28]
 80010d4:	ldr	r0, [sp, #24]
 80010d6:	bl	#4028
 80010da:	ldr	r1, [sp, #28]
 80010dc:	bl	#4358
 80010e0:	b	#-2 <stm32f30x::gpiob::bsrr::<impl stm32f30x::gpiob::BSRR>::write::hd8d9f4d2d0eaf43e+0x36>
 80010e2:	add	sp, #32
 80010e4:	pop	{r7, pc}

00000000080010e6 stm32f30x::gpiob::moder::<impl stm32f30x::gpiob::MODER>::modify::h18e58389c250b92f:
 80010e6:	push	{r7, lr}
 80010e8:	sub	sp, #64
 80010ea:	mov	r3, r2
 80010ec:	mov	r12, r1
 80010ee:	mov	lr, r0
 80010f0:	str	r0, [sp, #20]
 80010f2:	str	r1, [sp, #24]
 80010f4:	str	r2, [sp, #28]
 80010f6:	ldr	r0, [sp, #20]
 80010f8:	str	r0, [sp, #52]
 80010fa:	ldr	r0, [sp, #52]
 80010fc:	str	r3, [sp, #16]
 80010fe:	str.w	r12, [sp, #12]
 8001102:	str.w	lr, [sp, #8]
 8001106:	bl	#3980
 800110a:	bl	#4286
 800110e:	str	r0, [sp, #32]
 8001110:	b	#-2 <stm32f30x::gpiob::moder::<impl stm32f30x::gpiob::MODER>::modify::h18e58389c250b92f+0x2c>
 8001112:	ldr	r0, [sp, #32]
 8001114:	str	r0, [sp, #36]
 8001116:	ldr	r0, [sp, #32]
 8001118:	str	r0, [sp, #40]
 800111a:	ldr	r0, [sp, #24]
 800111c:	ldr	r1, [sp, #28]
 800111e:	add	r2, sp, #36
 8001120:	str	r2, [sp, #44]
 8001122:	add	r2, sp, #40
 8001124:	str	r2, [sp, #48]
 8001126:	ldr	r2, [sp, #44]
 8001128:	ldr	r3, [sp, #48]
 800112a:	bl	#-2836
 800112e:	str	r0, [sp, #4]
 8001130:	b	#-2 <stm32f30x::gpiob::moder::<impl stm32f30x::gpiob::MODER>::modify::h18e58389c250b92f+0x4c>
 8001132:	ldr	r0, [sp, #20]
 8001134:	ldr	r1, [sp, #40]
 8001136:	str	r0, [sp, #56]
 8001138:	str	r1, [sp, #60]
 800113a:	ldr	r0, [sp, #56]
 800113c:	bl	#3926
 8001140:	ldr	r1, [sp, #60]
 8001142:	bl	#4256
 8001146:	b	#-2 <stm32f30x::gpiob::moder::<impl stm32f30x::gpiob::MODER>::modify::h18e58389c250b92f+0x62>
 8001148:	add	sp, #64
 800114a:	pop	{r7, pc}

000000000800114c stm32f30x::gpiob::moder::<impl stm32f30x::gpiob::MODER>::modify::hcc30ba5285004fd9:
 800114c:	push	{r7, lr}
 800114e:	sub	sp, #64
 8001150:	mov	r3, r2
 8001152:	mov	r12, r1
 8001154:	mov	lr, r0
 8001156:	str	r0, [sp, #20]
 8001158:	str	r1, [sp, #24]
 800115a:	str	r2, [sp, #28]
 800115c:	ldr	r0, [sp, #20]
 800115e:	str	r0, [sp, #52]
 8001160:	ldr	r0, [sp, #52]
 8001162:	str	r3, [sp, #16]
 8001164:	str.w	r12, [sp, #12]
 8001168:	str.w	lr, [sp, #8]
 800116c:	bl	#3878
 8001170:	bl	#4184
 8001174:	str	r0, [sp, #32]
 8001176:	b	#-2 <stm32f30x::gpiob::moder::<impl stm32f30x::gpiob::MODER>::modify::hcc30ba5285004fd9+0x2c>
 8001178:	ldr	r0, [sp, #32]
 800117a:	str	r0, [sp, #36]
 800117c:	ldr	r0, [sp, #32]
 800117e:	str	r0, [sp, #40]
 8001180:	ldr	r0, [sp, #24]
 8001182:	ldr	r1, [sp, #28]
 8001184:	add	r2, sp, #36
 8001186:	str	r2, [sp, #44]
 8001188:	add	r2, sp, #40
 800118a:	str	r2, [sp, #48]
 800118c:	ldr	r2, [sp, #44]
 800118e:	ldr	r3, [sp, #48]
 8001190:	bl	#-3272
 8001194:	str	r0, [sp, #4]
 8001196:	b	#-2 <stm32f30x::gpiob::moder::<impl stm32f30x::gpiob::MODER>::modify::hcc30ba5285004fd9+0x4c>
 8001198:	ldr	r0, [sp, #20]
 800119a:	ldr	r1, [sp, #40]
 800119c:	str	r0, [sp, #56]
 800119e:	str	r1, [sp, #60]
 80011a0:	ldr	r0, [sp, #56]
 80011a2:	bl	#3824
 80011a6:	ldr	r1, [sp, #60]
 80011a8:	bl	#4154
 80011ac:	b	#-2 <stm32f30x::gpiob::moder::<impl stm32f30x::gpiob::MODER>::modify::hcc30ba5285004fd9+0x62>
 80011ae:	add	sp, #64
 80011b0:	pop	{r7, pc}

00000000080011b2 stm32f30x::gpiob::moder::<impl stm32f30x::gpiob::MODER>::modify::hfcac4cc897cba36a:
 80011b2:	push	{r7, lr}
 80011b4:	sub	sp, #64
 80011b6:	mov	r3, r2
 80011b8:	mov	r12, r1
 80011ba:	mov	lr, r0
 80011bc:	str	r0, [sp, #20]
 80011be:	str	r1, [sp, #24]
 80011c0:	str	r2, [sp, #28]
 80011c2:	ldr	r0, [sp, #20]
 80011c4:	str	r0, [sp, #52]
 80011c6:	ldr	r0, [sp, #52]
 80011c8:	str	r3, [sp, #16]
 80011ca:	str.w	r12, [sp, #12]
 80011ce:	str.w	lr, [sp, #8]
 80011d2:	bl	#3776
 80011d6:	bl	#4082
 80011da:	str	r0, [sp, #32]
 80011dc:	b	#-2 <stm32f30x::gpiob::moder::<impl stm32f30x::gpiob::MODER>::modify::hfcac4cc897cba36a+0x2c>
 80011de:	ldr	r0, [sp, #32]
 80011e0:	str	r0, [sp, #36]
 80011e2:	ldr	r0, [sp, #32]
 80011e4:	str	r0, [sp, #40]
 80011e6:	ldr	r0, [sp, #24]
 80011e8:	ldr	r1, [sp, #28]
 80011ea:	add	r2, sp, #36
 80011ec:	str	r2, [sp, #44]
 80011ee:	add	r2, sp, #40
 80011f0:	str	r2, [sp, #48]
 80011f2:	ldr	r2, [sp, #44]
 80011f4:	ldr	r3, [sp, #48]
 80011f6:	bl	#-2706
 80011fa:	str	r0, [sp, #4]
 80011fc:	b	#-2 <stm32f30x::gpiob::moder::<impl stm32f30x::gpiob::MODER>::modify::hfcac4cc897cba36a+0x4c>
 80011fe:	ldr	r0, [sp, #20]
 8001200:	ldr	r1, [sp, #40]
 8001202:	str	r0, [sp, #56]
 8001204:	str	r1, [sp, #60]
 8001206:	ldr	r0, [sp, #56]
 8001208:	bl	#3722
 800120c:	ldr	r1, [sp, #60]
 800120e:	bl	#4052
 8001212:	b	#-2 <stm32f30x::gpiob::moder::<impl stm32f30x::gpiob::MODER>::modify::hfcac4cc897cba36a+0x62>
 8001214:	add	sp, #64
 8001216:	pop	{r7, pc}

0000000008001218 stm32f30x::gpiob::otyper::<impl stm32f30x::gpiob::OTYPER>::modify::h06f5fa657cfafa3e:
 8001218:	push	{r7, lr}
 800121a:	sub	sp, #48
 800121c:	mov	r1, r0
 800121e:	str	r0, [sp, #8]
 8001220:	ldr	r0, [sp, #8]
 8001222:	str	r0, [sp, #36]
 8001224:	ldr	r0, [sp, #36]
 8001226:	str	r1, [sp, #4]
 8001228:	bl	#3690
 800122c:	bl	#3996
 8001230:	str	r0, [sp, #16]
 8001232:	b	#-2 <stm32f30x::gpiob::otyper::<impl stm32f30x::gpiob::OTYPER>::modify::h06f5fa657cfafa3e+0x1c>
 8001234:	ldr	r0, [sp, #16]
 8001236:	str	r0, [sp, #20]
 8001238:	ldr	r0, [sp, #16]
 800123a:	str	r0, [sp, #24]
 800123c:	add	r0, sp, #20
 800123e:	str	r0, [sp, #28]
 8001240:	add	r0, sp, #24
 8001242:	str	r0, [sp, #32]
 8001244:	ldr	r0, [sp, #28]
 8001246:	ldr	r1, [sp, #32]
 8001248:	bl	#-3178
 800124c:	str	r0, [sp]
 800124e:	b	#-2 <stm32f30x::gpiob::otyper::<impl stm32f30x::gpiob::OTYPER>::modify::h06f5fa657cfafa3e+0x38>
 8001250:	ldr	r0, [sp, #8]
 8001252:	ldr	r1, [sp, #24]
 8001254:	str	r0, [sp, #40]
 8001256:	str	r1, [sp, #44]
 8001258:	ldr	r0, [sp, #40]
 800125a:	bl	#3640
 800125e:	ldr	r1, [sp, #44]
 8001260:	bl	#3970
 8001264:	b	#-2 <stm32f30x::gpiob::otyper::<impl stm32f30x::gpiob::OTYPER>::modify::h06f5fa657cfafa3e+0x4e>
 8001266:	add	sp, #48
 8001268:	pop	{r7, pc}

000000000800126a stm32f30x::gpiob::otyper::<impl stm32f30x::gpiob::OTYPER>::modify::h662f6a30623f8662:
 800126a:	push	{r7, lr}
 800126c:	sub	sp, #48
 800126e:	mov	r1, r0
 8001270:	str	r0, [sp, #8]
 8001272:	ldr	r0, [sp, #8]
 8001274:	str	r0, [sp, #36]
 8001276:	ldr	r0, [sp, #36]
 8001278:	str	r1, [sp, #4]
 800127a:	bl	#3608
 800127e:	bl	#3914
 8001282:	str	r0, [sp, #16]
 8001284:	b	#-2 <stm32f30x::gpiob::otyper::<impl stm32f30x::gpiob::OTYPER>::modify::h662f6a30623f8662+0x1c>
 8001286:	ldr	r0, [sp, #16]
 8001288:	str	r0, [sp, #20]
 800128a:	ldr	r0, [sp, #16]
 800128c:	str	r0, [sp, #24]
 800128e:	add	r0, sp, #20
 8001290:	str	r0, [sp, #28]
 8001292:	add	r0, sp, #24
 8001294:	str	r0, [sp, #32]
 8001296:	ldr	r0, [sp, #28]
 8001298:	ldr	r1, [sp, #32]
 800129a:	bl	#-2926
 800129e:	str	r0, [sp]
 80012a0:	b	#-2 <stm32f30x::gpiob::otyper::<impl stm32f30x::gpiob::OTYPER>::modify::h662f6a30623f8662+0x38>
 80012a2:	ldr	r0, [sp, #8]
 80012a4:	ldr	r1, [sp, #24]
 80012a6:	str	r0, [sp, #40]
 80012a8:	str	r1, [sp, #44]
 80012aa:	ldr	r0, [sp, #40]
 80012ac:	bl	#3558
 80012b0:	ldr	r1, [sp, #44]
 80012b2:	bl	#3888
 80012b6:	b	#-2 <stm32f30x::gpiob::otyper::<impl stm32f30x::gpiob::OTYPER>::modify::h662f6a30623f8662+0x4e>
 80012b8:	add	sp, #48
 80012ba:	pop	{r7, pc}

00000000080012bc stm32f30x::gpiob::otyper::<impl stm32f30x::gpiob::OTYPER>::modify::he7a51f802e0f7842:
 80012bc:	push	{r7, lr}
 80012be:	sub	sp, #48
 80012c0:	mov	r1, r0
 80012c2:	str	r0, [sp, #8]
 80012c4:	ldr	r0, [sp, #8]
 80012c6:	str	r0, [sp, #36]
 80012c8:	ldr	r0, [sp, #36]
 80012ca:	str	r1, [sp, #4]
 80012cc:	bl	#3526
 80012d0:	bl	#3832
 80012d4:	str	r0, [sp, #16]
 80012d6:	b	#-2 <stm32f30x::gpiob::otyper::<impl stm32f30x::gpiob::OTYPER>::modify::he7a51f802e0f7842+0x1c>
 80012d8:	ldr	r0, [sp, #16]
 80012da:	str	r0, [sp, #20]
 80012dc:	ldr	r0, [sp, #16]
 80012de:	str	r0, [sp, #24]
 80012e0:	add	r0, sp, #20
 80012e2:	str	r0, [sp, #28]
 80012e4:	add	r0, sp, #24
 80012e6:	str	r0, [sp, #32]
 80012e8:	ldr	r0, [sp, #28]
 80012ea:	ldr	r1, [sp, #32]
 80012ec:	bl	#-3676
 80012f0:	str	r0, [sp]
 80012f2:	b	#-2 <stm32f30x::gpiob::otyper::<impl stm32f30x::gpiob::OTYPER>::modify::he7a51f802e0f7842+0x38>
 80012f4:	ldr	r0, [sp, #8]
 80012f6:	ldr	r1, [sp, #24]
 80012f8:	str	r0, [sp, #40]
 80012fa:	str	r1, [sp, #44]
 80012fc:	ldr	r0, [sp, #40]
 80012fe:	bl	#3476
 8001302:	ldr	r1, [sp, #44]
 8001304:	bl	#3806
 8001308:	b	#-2 <stm32f30x::gpiob::otyper::<impl stm32f30x::gpiob::OTYPER>::modify::he7a51f802e0f7842+0x4e>
 800130a:	add	sp, #48
 800130c:	pop	{r7, pc}

000000000800130e stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h68ab4e454337d254:
 800130e:	push	{r7, lr}
 8001310:	sub	sp, #56
 8001312:	mov	r2, r1
 8001314:	mov	r3, r0
 8001316:	str	r0, [sp, #16]
 8001318:	str	r1, [sp, #20]
 800131a:	ldr	r0, [sp, #16]
 800131c:	str	r0, [sp, #44]
 800131e:	ldr	r0, [sp, #44]
 8001320:	str	r2, [sp, #12]
 8001322:	str	r3, [sp, #8]
 8001324:	bl	#3438
 8001328:	bl	#3744
 800132c:	str	r0, [sp, #24]
 800132e:	b	#-2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h68ab4e454337d254+0x22>
 8001330:	ldr	r0, [sp, #24]
 8001332:	str	r0, [sp, #28]
 8001334:	ldr	r0, [sp, #24]
 8001336:	str	r0, [sp, #32]
 8001338:	ldr	r0, [sp, #20]
 800133a:	add	r1, sp, #28
 800133c:	str	r1, [sp, #36]
 800133e:	add	r1, sp, #32
 8001340:	str	r1, [sp, #40]
 8001342:	ldr	r1, [sp, #36]
 8001344:	ldr	r2, [sp, #40]
 8001346:	bl	#-1406
 800134a:	str	r0, [sp, #4]
 800134c:	b	#-2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h68ab4e454337d254+0x40>
 800134e:	ldr	r0, [sp, #16]
 8001350:	ldr	r1, [sp, #32]
 8001352:	str	r0, [sp, #48]
 8001354:	str	r1, [sp, #52]
 8001356:	ldr	r0, [sp, #48]
 8001358:	bl	#3386
 800135c:	ldr	r1, [sp, #52]
 800135e:	bl	#3716
 8001362:	b	#-2 <stm32f30x::gpioc::moder::<impl stm32f30x::gpioc::MODER>::modify::h68ab4e454337d254+0x56>
 8001364:	add	sp, #56
 8001366:	pop	{r7, pc}

0000000008001368 stm32f30x::gpioc::pupdr::<impl stm32f30x::gpioc::PUPDR>::modify::h1ed0f9e323e580bf:
 8001368:	push	{r7, lr}
 800136a:	sub	sp, #56
 800136c:	mov	r2, r1
 800136e:	mov	r3, r0
 8001370:	str	r0, [sp, #16]
 8001372:	str	r1, [sp, #20]
 8001374:	ldr	r0, [sp, #16]
 8001376:	str	r0, [sp, #44]
 8001378:	ldr	r0, [sp, #44]
 800137a:	str	r2, [sp, #12]
 800137c:	str	r3, [sp, #8]
 800137e:	bl	#3348
 8001382:	bl	#3654
 8001386:	str	r0, [sp, #24]
 8001388:	b	#-2 <stm32f30x::gpioc::pupdr::<impl stm32f30x::gpioc::PUPDR>::modify::h1ed0f9e323e580bf+0x22>
 800138a:	ldr	r0, [sp, #24]
 800138c:	str	r0, [sp, #28]
 800138e:	ldr	r0, [sp, #24]
 8001390:	str	r0, [sp, #32]
 8001392:	ldr	r0, [sp, #20]
 8001394:	add	r1, sp, #28
 8001396:	str	r1, [sp, #36]
 8001398:	add	r1, sp, #32
 800139a:	str	r1, [sp, #40]
 800139c:	ldr	r1, [sp, #36]
 800139e:	ldr	r2, [sp, #40]
 80013a0:	bl	#-1600
 80013a4:	str	r0, [sp, #4]
 80013a6:	b	#-2 <stm32f30x::gpioc::pupdr::<impl stm32f30x::gpioc::PUPDR>::modify::h1ed0f9e323e580bf+0x40>
 80013a8:	ldr	r0, [sp, #16]
 80013aa:	ldr	r1, [sp, #32]
 80013ac:	str	r0, [sp, #48]
 80013ae:	str	r1, [sp, #52]
 80013b0:	ldr	r0, [sp, #48]
 80013b2:	bl	#3296
 80013b6:	ldr	r1, [sp, #52]
 80013b8:	bl	#3626
 80013bc:	b	#-2 <stm32f30x::gpioc::pupdr::<impl stm32f30x::gpioc::PUPDR>::modify::h1ed0f9e323e580bf+0x56>
 80013be:	add	sp, #56
 80013c0:	pop	{r7, pc}

00000000080013c2 cortex_m::interrupt::free::h4a9e4a7c21dc1e14:
 80013c2:	push	{r7, lr}
 80013c4:	sub	sp, #16
 80013c6:	bl	#-4674
 80013ca:	strb.w	r0, [sp, #6]
 80013ce:	b	#-2 <cortex_m::interrupt::free::h4a9e4a7c21dc1e14+0xe>
 80013d0:	bl	#1010
 80013d4:	b	#-2 <cortex_m::interrupt::free::h4a9e4a7c21dc1e14+0x14>
 80013d6:	bl	#4170
 80013da:	b	#-2 <cortex_m::interrupt::free::h4a9e4a7c21dc1e14+0x1a>
 80013dc:	add	r0, sp, #12
 80013de:	str	r0, [sp, #8]
 80013e0:	ldr	r0, [sp, #8]
 80013e2:	bl	#-2596
 80013e6:	strb.w	r0, [sp, #7]
 80013ea:	b	#-2 <cortex_m::interrupt::free::h4a9e4a7c21dc1e14+0x2a>
 80013ec:	add.w	r0, sp, #6
 80013f0:	bl	#4000
 80013f4:	str	r0, [sp]
 80013f6:	b	#-2 <cortex_m::interrupt::free::h4a9e4a7c21dc1e14+0x36>
 80013f8:	ldr	r0, [sp]
 80013fa:	lsls	r1, r0, #31
 80013fc:	cmp	r1, #0
 80013fe:	beq	#6 <cortex_m::interrupt::free::h4a9e4a7c21dc1e14+0x46>
 8001400:	b	#-2 <cortex_m::interrupt::free::h4a9e4a7c21dc1e14+0x40>
 8001402:	bl	#950
 8001406:	b	#-2 <cortex_m::interrupt::free::h4a9e4a7c21dc1e14+0x46>
 8001408:	ldrb.w	r0, [sp, #7]
 800140c:	add	sp, #16
 800140e:	pop	{r7, pc}

0000000008001410 stm32f30x::gpiob::otyper::R::bits::hf7ecd0896723c1f6:
 8001410:	sub	sp, #8
 8001412:	mov	r1, r0
 8001414:	str	r0, [sp, #4]
 8001416:	ldr	r0, [sp, #4]
 8001418:	ldr	r0, [r0]
 800141a:	str	r1, [sp]
 800141c:	add	sp, #8
 800141e:	bx	lr

0000000008001420 stm32f30x::gpiob::otyper::W::bits::h3a94ed7ddb3fd8a9:
 8001420:	sub	sp, #16
 8001422:	mov	r2, r1
 8001424:	mov	r3, r0
 8001426:	str	r0, [sp, #8]
 8001428:	str	r1, [sp, #12]
 800142a:	ldr	r0, [sp, #12]
 800142c:	ldr	r1, [sp, #8]
 800142e:	str	r0, [r1]
 8001430:	ldr	r0, [sp, #8]
 8001432:	str	r2, [sp, #4]
 8001434:	str	r3, [sp]
 8001436:	add	sp, #16
 8001438:	bx	lr

000000000800143a core::result::unwrap_failed::hf7daae146d117ac9:
 800143a:	sub	sp, #96
 800143c:	mov	r2, r1
 800143e:	mov	r3, r0
 8001440:	str	r0, [sp, #28]
 8001442:	str	r1, [sp, #32]
 8001444:	add	r0, sp, #28
 8001446:	str	r0, [sp, #80]
 8001448:	add	r0, sp, #36
 800144a:	str	r0, [sp, #84]
 800144c:	ldr	r0, [sp, #80]
 800144e:	str	r0, [sp, #88]
 8001450:	ldr	r0, [sp, #84]
 8001452:	str	r0, [sp, #92]
 8001454:	ldr	r0, [sp, #88]
 8001456:	movw	r1, #8191
 800145a:	movt	r1, #2048
 800145e:	str	r2, [sp, #24]
 8001460:	str	r3, [sp, #20]
 8001462:	bl	#3020
 8001466:	str	r0, [sp, #16]
 8001468:	str	r1, [sp, #12]
 800146a:	b	#-2 <core::result::unwrap_failed::hf7daae146d117ac9+0x32>
 800146c:	ldr	r0, [sp, #92]
 800146e:	movw	r1, #2793
 8001472:	movt	r1, #2048
 8001476:	bl	#-1256
 800147a:	str	r0, [sp, #8]
 800147c:	str	r1, [sp, #4]
 800147e:	b	#-2 <core::result::unwrap_failed::hf7daae146d117ac9+0x46>
 8001480:	ldr	r0, [sp, #16]
 8001482:	str	r0, [sp, #64]
 8001484:	ldr	r1, [sp, #12]
 8001486:	str	r1, [sp, #68]
 8001488:	ldr	r2, [sp, #8]
 800148a:	str	r2, [sp, #72]
 800148c:	ldr	r3, [sp, #4]
 800148e:	str	r3, [sp, #76]
 8001490:	mov	r12, sp
 8001492:	mov.w	lr, #2
 8001496:	str.w	lr, [r12]
 800149a:	movw	r1, #17352
 800149e:	movt	r1, #2048
 80014a2:	add	r0, sp, #40
 80014a4:	add	r3, sp, #64
 80014a6:	mov	r2, lr
 80014a8:	bl	#-2450
 80014ac:	b	#-2 <core::result::unwrap_failed::hf7daae146d117ac9+0x74>
 80014ae:	movw	r1, #17392
 80014b2:	movt	r1, #2048
 80014b6:	add	r0, sp, #40
 80014b8:	bl	#4314
 80014bc:	trap

00000000080014be _ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h30cf80aaa8f433eaE:
 80014be:	sub	sp, #24
 80014c0:	mov	r1, r0
 80014c2:	strb.w	r0, [sp, #18]
 80014c6:	ldrb.w	r0, [sp, #18]
 80014ca:	subs	r2, r0, #2
 80014cc:	clz	r2, r2
 80014d0:	lsrs	r2, r2, #5
 80014d2:	cmp	r0, #2
 80014d4:	str	r1, [sp, #12]
 80014d6:	str	r2, [sp, #8]
 80014d8:	bne	#10 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h30cf80aaa8f433eaE+0x28>
 80014da:	b	#-2 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h30cf80aaa8f433eaE+0x1e>
 80014dc:	ldr	r0, [sp, #8]
 80014de:	cmp	r0, #1
 80014e0:	beq	#26 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h30cf80aaa8f433eaE+0x40>
 80014e2:	b	#-2 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h30cf80aaa8f433eaE+0x26>
 80014e4:	trap
 80014e6:	ldrb.w	r0, [sp, #18]
 80014ea:	strb.w	r0, [sp, #19]
 80014ee:	ldrb.w	r0, [sp, #19]
 80014f2:	ldrb.w	r1, [sp, #18]
 80014f6:	cmp	r1, #2
 80014f8:	str	r0, [sp, #4]
 80014fa:	bne	#16 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h30cf80aaa8f433eaE+0x50>
 80014fc:	b	#24 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h30cf80aaa8f433eaE+0x5a>
 80014fe:	movw	r0, #17408
 8001502:	movt	r0, #2048
 8001506:	movs	r1, #43
 8001508:	bl	#-210
 800150c:	trap
 800150e:	ldr	r0, [sp, #4]
 8001510:	and	r0, r0, #1
 8001514:	add	sp, #24
 8001516:	bx	lr
 8001518:	b	#-14 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h30cf80aaa8f433eaE+0x50>

000000000800151a stm32f30x::gpiob::moder::R::bits::h3d50715b6bdb0b64:
 800151a:	sub	sp, #8
 800151c:	mov	r1, r0
 800151e:	str	r0, [sp, #4]
 8001520:	ldr	r0, [sp, #4]
 8001522:	ldr	r0, [r0]
 8001524:	str	r1, [sp]
 8001526:	add	sp, #8
 8001528:	bx	lr

000000000800152a stm32f30x::gpiob::moder::W::bits::h7d5e8dc0e74fa8d0:
 800152a:	sub	sp, #16
 800152c:	mov	r2, r1
 800152e:	mov	r3, r0
 8001530:	str	r0, [sp, #8]
 8001532:	str	r1, [sp, #12]
 8001534:	ldr	r0, [sp, #12]
 8001536:	ldr	r1, [sp, #8]
 8001538:	str	r0, [r1]
 800153a:	ldr	r0, [sp, #8]
 800153c:	str	r2, [sp, #4]
 800153e:	str	r3, [sp]
 8001540:	add	sp, #16
 8001542:	bx	lr

0000000008001544 test::write_flash::hf6325bb468bb37f5:
 8001544:	push	{r7, lr}
 8001546:	sub	sp, #136
 8001548:	mov	r1, r0
 800154a:	str	r0, [sp, #28]
 800154c:	add	r0, sp, #24
 800154e:	str	r1, [sp, #20]
 8001550:	bl	#2388
 8001554:	str	r0, [sp, #40]
 8001556:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x14>
 8001558:	ldr	r0, [sp, #40]
 800155a:	adds	r0, #16
 800155c:	bl	#-1638
 8001560:	str	r0, [sp, #36]
 8001562:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x20>
 8001564:	add	r0, sp, #36
 8001566:	bl	#-1810
 800156a:	strb.w	r0, [sp, #35]
 800156e:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x2c>
 8001570:	add.w	r0, sp, #35
 8001574:	bl	#-1724
 8001578:	str	r0, [sp, #16]
 800157a:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x38>
 800157c:	ldr	r0, [sp, #16]
 800157e:	lsls	r1, r0, #31
 8001580:	cmp	r1, #0
 8001582:	beq	#42 <test::write_flash::hf6325bb468bb37f5+0x6c>
 8001584:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x42>
 8001586:	add	r0, sp, #24
 8001588:	bl	#2332
 800158c:	str	r0, [sp, #44]
 800158e:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x4c>
 8001590:	ldr	r0, [sp, #44]
 8001592:	adds	r0, #4
 8001594:	bl	#-3146
 8001598:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x56>
 800159a:	add	r0, sp, #24
 800159c:	bl	#2312
 80015a0:	str	r0, [sp, #52]
 80015a2:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x60>
 80015a4:	ldr	r0, [sp, #52]
 80015a6:	adds	r0, #4
 80015a8:	bl	#-3108
 80015ac:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x6a>
 80015ae:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x6c>
 80015b0:	add	r0, sp, #24
 80015b2:	bl	#2290
 80015b6:	str	r0, [sp, #68]
 80015b8:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x76>
 80015ba:	ldr	r0, [sp, #68]
 80015bc:	adds	r0, #16
 80015be:	bl	#-1736
 80015c2:	str	r0, [sp, #64]
 80015c4:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x82>
 80015c6:	add	r0, sp, #64
 80015c8:	bl	#-1924
 80015cc:	str	r0, [sp, #60]
 80015ce:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x8c>
 80015d0:	add	r0, sp, #24
 80015d2:	bl	#2258
 80015d6:	str	r0, [sp, #72]
 80015d8:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x96>
 80015da:	ldr	r0, [sp, #72]
 80015dc:	adds	r0, #16
 80015de:	add	r1, sp, #60
 80015e0:	str	r1, [sp, #76]
 80015e2:	ldr	r1, [sp, #76]
 80015e4:	bl	#-3408
 80015e8:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0xa6>
 80015ea:	add	r0, sp, #24
 80015ec:	bl	#2232
 80015f0:	str	r0, [sp, #88]
 80015f2:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0xb0>
 80015f4:	ldr	r0, [sp, #88]
 80015f6:	adds	r0, #16
 80015f8:	bl	#-1794
 80015fc:	str	r0, [sp, #84]
 80015fe:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0xbc>
 8001600:	add	r0, sp, #84
 8001602:	bl	#-1982
 8001606:	str	r0, [sp, #80]
 8001608:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0xc6>
 800160a:	movs	r0, #87
 800160c:	str	r0, [sp, #92]
 800160e:	movw	r0, #63488
 8001612:	movt	r0, #2048
 8001616:	ldrh	r0, [r0]
 8001618:	ldr	r1, [sp, #92]
 800161a:	bl	#3016
 800161e:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0xdc>
 8001620:	bl	#-2886
 8001624:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0xe2>
 8001626:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0xe4>
 8001628:	add	r0, sp, #24
 800162a:	bl	#2170
 800162e:	str	r0, [sp, #104]
 8001630:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0xee>
 8001632:	ldr	r0, [sp, #104]
 8001634:	adds	r0, #12
 8001636:	bl	#-1818
 800163a:	str	r0, [sp, #100]
 800163c:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0xfa>
 800163e:	add	r0, sp, #100
 8001640:	bl	#-2782
 8001644:	strb.w	r0, [sp, #99]
 8001648:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x106>
 800164a:	add.w	r0, sp, #99
 800164e:	bl	#-2680
 8001652:	str	r0, [sp, #12]
 8001654:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x112>
 8001656:	ldr	r0, [sp, #12]
 8001658:	lsls	r1, r0, #31
 800165a:	cmp	r1, #0
 800165c:	beq	#2 <test::write_flash::hf6325bb468bb37f5+0x11e>
 800165e:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x11c>
 8001660:	b	#-60 <test::write_flash::hf6325bb468bb37f5+0xe4>
 8001662:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x120>
 8001664:	add	r0, sp, #24
 8001666:	bl	#2110
 800166a:	str	r0, [sp, #116]
 800166c:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x12a>
 800166e:	ldr	r0, [sp, #116]
 8001670:	adds	r0, #12
 8001672:	bl	#-1878
 8001676:	str	r0, [sp, #112]
 8001678:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x136>
 800167a:	add	r0, sp, #112
 800167c:	bl	#-2800
 8001680:	strb.w	r0, [sp, #111]
 8001684:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x142>
 8001686:	add.w	r0, sp, #111
 800168a:	bl	#-2694
 800168e:	str	r0, [sp, #8]
 8001690:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x14e>
 8001692:	ldr	r0, [sp, #8]
 8001694:	lsls	r1, r0, #31
 8001696:	cmp	r1, #0
 8001698:	beq	#2 <test::write_flash::hf6325bb468bb37f5+0x15a>
 800169a:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x158>
 800169c:	b	#-60 <test::write_flash::hf6325bb468bb37f5+0x120>
 800169e:	movw	r0, #63488
 80016a2:	movt	r0, #2048
 80016a6:	ldrh	r0, [r0]
 80016a8:	cmp	r0, #0
 80016aa:	bne	#10 <test::write_flash::hf6325bb468bb37f5+0x174>
 80016ac:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x16a>
 80016ae:	add	r0, sp, #32
 80016b0:	bl	#-5360
 80016b4:	str	r0, [sp, #4]
 80016b6:	b	#10 <test::write_flash::hf6325bb468bb37f5+0x180>
 80016b8:	add	r0, sp, #32
 80016ba:	bl	#-5242
 80016be:	str	r0, [sp]
 80016c0:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x17e>
 80016c2:	b	#0 <test::write_flash::hf6325bb468bb37f5+0x182>
 80016c4:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x182>
 80016c6:	add	r0, sp, #24
 80016c8:	bl	#2012
 80016cc:	str	r0, [sp, #120]
 80016ce:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x18c>
 80016d0:	ldr	r0, [sp, #120]
 80016d2:	adds	r0, #12
 80016d4:	bl	#-3524
 80016d8:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x196>
 80016da:	add	r0, sp, #24
 80016dc:	bl	#1992
 80016e0:	str	r0, [sp, #128]
 80016e2:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x1a0>
 80016e4:	ldr	r0, [sp, #128]
 80016e6:	adds	r0, #16
 80016e8:	bl	#-3602
 80016ec:	b	#-2 <test::write_flash::hf6325bb468bb37f5+0x1aa>
 80016ee:	add	sp, #136
 80016f0:	pop	{r7, pc}

00000000080016f2 main:
 80016f2:	sub	sp, #104
 80016f4:	bl	#216
 80016f8:	str	r0, [sp, #36]
 80016fa:	b	#-2 <main+0xa>
 80016fc:	ldr	r0, [sp, #36]
 80016fe:	and	r0, r0, #1
 8001702:	bl	#-2768
 8001706:	b	#-2 <main+0x16>
 8001708:	add	r0, sp, #44
 800170a:	bl	#1148
 800170e:	b	#-2 <main+0x1e>
 8001710:	add	r0, sp, #44
 8001712:	bl	#1212
 8001716:	b	#-2 <main+0x26>
 8001718:	add	r0, sp, #44
 800171a:	bl	#1272
 800171e:	b	#-2 <main+0x2e>
 8001720:	add	r0, sp, #76
 8001722:	str	r0, [sp, #32]
 8001724:	ldr	r1, [sp, #32]
 8001726:	bl	#-4538
 800172a:	b	#-2 <main+0x3a>
 800172c:	bl	#-3858
 8001730:	b	#-2 <main+0x40>
 8001732:	add	r0, sp, #76
 8001734:	str	r0, [sp, #28]
 8001736:	ldr	r1, [sp, #28]
 8001738:	bl	#-4884
 800173c:	b	#-2 <main+0x4c>
 800173e:	bl	#-3848
 8001742:	b	#-2 <main+0x52>
 8001744:	movw	r0, #63488
 8001748:	movt	r0, #2048
 800174c:	bl	#-524
 8001750:	b	#-2 <main+0x60>
 8001752:	add	r0, sp, #88
 8001754:	bl	#-5460
 8001758:	str	r0, [sp, #24]
 800175a:	b	#-2 <main+0x6a>
 800175c:	add	r0, sp, #76
 800175e:	str	r0, [sp, #20]
 8001760:	ldr	r1, [sp, #20]
 8001762:	bl	#-4264
 8001766:	b	#-2 <main+0x76>
 8001768:	bl	#-3904
 800176c:	b	#-2 <main+0x7c>
 800176e:	add	r0, sp, #80
 8001770:	str	r0, [sp, #16]
 8001772:	ldr	r1, [sp, #16]
 8001774:	bl	#-2690
 8001778:	b	#-2 <main+0x88>
 800177a:	bl	#-2372
 800177e:	b	#-2 <main+0x8e>
 8001780:	b	#-2 <main+0x90>
 8001782:	add	r0, sp, #100
 8001784:	bl	#-2832
 8001788:	uxtb	r0, r0
 800178a:	str	r0, [sp, #12]
 800178c:	b	#-2 <main+0x9c>
 800178e:	ldr	r0, [sp, #12]
 8001790:	bl	#-726
 8001794:	str	r0, [sp, #8]
 8001796:	b	#-2 <main+0xa6>
 8001798:	ldr	r0, [sp, #8]
 800179a:	lsls	r1, r0, #31
 800179c:	cmp	r1, #0
 800179e:	bne	#10 <main+0xba>
 80017a0:	b	#-2 <main+0xb0>
 80017a2:	add	r0, sp, #96
 80017a4:	bl	#-5572
 80017a8:	str	r0, [sp, #4]
 80017aa:	b	#10 <main+0xc6>
 80017ac:	add	r0, sp, #96
 80017ae:	bl	#-5518
 80017b2:	str	r0, [sp]
 80017b4:	b	#-2 <main+0xc4>
 80017b6:	b	#0 <main+0xc8>
 80017b8:	b	#-2 <main+0xc8>
 80017ba:	b	#-60 <main+0x90>

00000000080017bc cortex_m::interrupt::enable::h6d1953a80c38b6d8:
 80017bc:	push	{r7, lr}
 80017be:	bl	#2096
 80017c2:	b	#-2 <cortex_m::interrupt::enable::h6d1953a80c38b6d8+0x8>
 80017c4:	pop	{r7, pc}

00000000080017c6 cortex_m::interrupt::disable::h9545fca90241c942:
 80017c6:	push	{r7, lr}
 80017c8:	bl	#2082
 80017cc:	b	#-2 <cortex_m::interrupt::disable::h9545fca90241c942+0x8>
 80017ce:	pop	{r7, pc}

00000000080017d0 stm32f30x::Peripherals::take::h456054e08fb7e4fd:
 80017d0:	push	{r7, lr}
 80017d2:	sub	sp, #8
 80017d4:	bl	#-1046
 80017d8:	str	r0, [sp]
 80017da:	b	#-2 <stm32f30x::Peripherals::take::h456054e08fb7e4fd+0xc>
 80017dc:	ldr	r0, [sp]
 80017de:	and	r0, r0, #1
 80017e2:	add	sp, #8
 80017e4:	pop	{r7, pc}

00000000080017e6 stm32f30x_hal::gpio::gpioc::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOC>::split::{{closure}}::h7fec0049bdb46359:
 80017e6:	push	{r7, lr}
 80017e8:	sub	sp, #32
 80017ea:	mov	r2, r1
 80017ec:	mov	r3, r0
 80017ee:	str	r0, [sp, #24]
 80017f0:	str	r1, [sp, #28]
 80017f2:	ldr	r0, [sp, #28]
 80017f4:	str	r2, [sp, #16]
 80017f6:	str	r3, [sp, #12]
 80017f8:	bl	#1136
 80017fc:	str	r0, [sp, #8]
 80017fe:	b	#-2 <stm32f30x_hal::gpio::gpioc::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOC>::split::{{closure}}::h7fec0049bdb46359+0x1a>
 8001800:	ldr	r0, [sp, #8]
 8001802:	bl	#1404
 8001806:	str	r0, [sp, #4]
 8001808:	b	#-2 <stm32f30x_hal::gpio::gpioc::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOC>::split::{{closure}}::h7fec0049bdb46359+0x24>
 800180a:	ldr	r0, [sp, #4]
 800180c:	add	sp, #32
 800180e:	pop	{r7, pc}

0000000008001810 stm32f30x_hal::gpio::gpioc::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOC>::split::{{closure}}::hb62e6d1c3d28c89e:
 8001810:	push	{r7, lr}
 8001812:	sub	sp, #32
 8001814:	mov	r2, r1
 8001816:	mov	r3, r0
 8001818:	str	r0, [sp, #24]
 800181a:	str	r1, [sp, #28]
 800181c:	ldr	r0, [sp, #28]
 800181e:	str	r2, [sp, #16]
 8001820:	str	r3, [sp, #12]
 8001822:	bl	#130
 8001826:	str	r0, [sp, #8]
 8001828:	b	#-2 <stm32f30x_hal::gpio::gpioc::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOC>::split::{{closure}}::hb62e6d1c3d28c89e+0x1a>
 800182a:	ldr	r0, [sp, #8]
 800182c:	bl	#1864
 8001830:	str	r0, [sp, #4]
 8001832:	b	#-2 <stm32f30x_hal::gpio::gpioc::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOC>::split::{{closure}}::hb62e6d1c3d28c89e+0x24>
 8001834:	ldr	r0, [sp, #4]
 8001836:	add	sp, #32
 8001838:	pop	{r7, pc}

000000000800183a stm32f30x_hal::gpio::gpioc::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOC>::split::{{closure}}::h04cba728d8f4b63e:
 800183a:	push	{r7, lr}
 800183c:	sub	sp, #32
 800183e:	mov	r2, r1
 8001840:	mov	r3, r0
 8001842:	str	r0, [sp, #24]
 8001844:	str	r1, [sp, #28]
 8001846:	ldr	r0, [sp, #28]
 8001848:	str	r2, [sp, #16]
 800184a:	str	r3, [sp, #12]
 800184c:	bl	#88
 8001850:	str	r0, [sp, #8]
 8001852:	b	#-2 <stm32f30x_hal::gpio::gpioc::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOC>::split::{{closure}}::h04cba728d8f4b63e+0x1a>
 8001854:	ldr	r0, [sp, #8]
 8001856:	bl	#1852
 800185a:	str	r0, [sp, #4]
 800185c:	b	#-2 <stm32f30x_hal::gpio::gpioc::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOC>::split::{{closure}}::h04cba728d8f4b63e+0x24>
 800185e:	ldr	r0, [sp, #4]
 8001860:	add	sp, #32
 8001862:	pop	{r7, pc}

0000000008001864 stm32f30x_hal::gpio::gpioc::MODER::moder::h96fd2b74b32f3506:
 8001864:	push	{r7, lr}
 8001866:	sub	sp, #16
 8001868:	mov	r1, r0
 800186a:	str	r0, [sp, #8]
 800186c:	str	r1, [sp, #4]
 800186e:	bl	#1570
 8001872:	str	r0, [sp, #12]
 8001874:	b	#-2 <stm32f30x_hal::gpio::gpioc::MODER::moder::h96fd2b74b32f3506+0x12>
 8001876:	ldr	r0, [sp, #12]
 8001878:	add	sp, #16
 800187a:	pop	{r7, pc}

000000000800187c stm32f30x_hal::gpio::gpioc::PUPDR::pupdr::h2b67851d9e9105eb:
 800187c:	push	{r7, lr}
 800187e:	sub	sp, #16
 8001880:	mov	r1, r0
 8001882:	str	r0, [sp, #8]
 8001884:	str	r1, [sp, #4]
 8001886:	bl	#1546
 800188a:	str	r0, [sp, #12]
 800188c:	b	#-2 <stm32f30x_hal::gpio::gpioc::PUPDR::pupdr::h2b67851d9e9105eb+0x12>
 800188e:	ldr	r0, [sp, #12]
 8001890:	adds	r0, #12
 8001892:	add	sp, #16
 8001894:	pop	{r7, pc}

0000000008001896 stm32f30x::rcc::ahbrstr::W::iopbrst::h7dcae62989e11a6a:
 8001896:	sub	sp, #12
 8001898:	mov	r1, r0
 800189a:	str	r0, [sp, #4]
 800189c:	ldr	r0, [sp, #4]
 800189e:	str	r0, [sp, #8]
 80018a0:	ldr	r0, [sp, #8]
 80018a2:	str	r1, [sp]
 80018a4:	add	sp, #12
 80018a6:	bx	lr

00000000080018a8 stm32f30x::rcc::ahbrstr::W::iopcrst::h8731f57711717caa:
 80018a8:	sub	sp, #12
 80018aa:	mov	r1, r0
 80018ac:	str	r0, [sp, #4]
 80018ae:	ldr	r0, [sp, #4]
 80018b0:	str	r0, [sp, #8]
 80018b2:	ldr	r0, [sp, #8]
 80018b4:	str	r1, [sp]
 80018b6:	add	sp, #12
 80018b8:	bx	lr

00000000080018ba stm32f30x_hal::rcc::AHB::enr::hed0b0d84667500d8:
 80018ba:	push	{r7, lr}
 80018bc:	sub	sp, #16
 80018be:	mov	r1, r0
 80018c0:	str	r0, [sp, #8]
 80018c2:	str	r1, [sp, #4]
 80018c4:	bl	#1528
 80018c8:	str	r0, [sp, #12]
 80018ca:	b	#-2 <stm32f30x_hal::rcc::AHB::enr::hed0b0d84667500d8+0x12>
 80018cc:	ldr	r0, [sp, #12]
 80018ce:	adds	r0, #20
 80018d0:	add	sp, #16
 80018d2:	pop	{r7, pc}

00000000080018d4 stm32f30x_hal::rcc::AHB::rstr::h5d2b94cd4d0e5c26:
 80018d4:	push	{r7, lr}
 80018d6:	sub	sp, #16
 80018d8:	mov	r1, r0
 80018da:	str	r0, [sp, #8]
 80018dc:	str	r1, [sp, #4]
 80018de:	bl	#1502
 80018e2:	str	r0, [sp, #12]
 80018e4:	b	#-2 <stm32f30x_hal::rcc::AHB::rstr::h5d2b94cd4d0e5c26+0x12>
 80018e6:	ldr	r0, [sp, #12]
 80018e8:	adds	r0, #40
 80018ea:	add	sp, #16
 80018ec:	pop	{r7, pc}

00000000080018ee stm32f30x_hal::gpio::gpiob::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOB>::split::{{closure}}::h2674486cb8a83a95:
 80018ee:	push	{r7, lr}
 80018f0:	sub	sp, #32
 80018f2:	mov	r2, r1
 80018f4:	mov	r3, r0
 80018f6:	str	r0, [sp, #24]
 80018f8:	str	r1, [sp, #28]
 80018fa:	ldr	r0, [sp, #28]
 80018fc:	str	r2, [sp, #16]
 80018fe:	str	r3, [sp, #12]
 8001900:	bl	#854
 8001904:	str	r0, [sp, #8]
 8001906:	b	#-2 <stm32f30x_hal::gpio::gpiob::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOB>::split::{{closure}}::h2674486cb8a83a95+0x1a>
 8001908:	ldr	r0, [sp, #8]
 800190a:	bl	#990
 800190e:	str	r0, [sp, #4]
 8001910:	b	#-2 <stm32f30x_hal::gpio::gpiob::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOB>::split::{{closure}}::h2674486cb8a83a95+0x24>
 8001912:	ldr	r0, [sp, #4]
 8001914:	add	sp, #32
 8001916:	pop	{r7, pc}

0000000008001918 stm32f30x_hal::gpio::gpiob::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOB>::split::{{closure}}::ha1d0d5549f3fe4d1:
 8001918:	push	{r7, lr}
 800191a:	sub	sp, #32
 800191c:	mov	r2, r1
 800191e:	mov	r3, r0
 8001920:	str	r0, [sp, #24]
 8001922:	str	r1, [sp, #28]
 8001924:	ldr	r0, [sp, #28]
 8001926:	str	r2, [sp, #16]
 8001928:	str	r3, [sp, #12]
 800192a:	bl	#-152
 800192e:	str	r0, [sp, #8]
 8001930:	b	#-2 <stm32f30x_hal::gpio::gpiob::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOB>::split::{{closure}}::ha1d0d5549f3fe4d1+0x1a>
 8001932:	ldr	r0, [sp, #8]
 8001934:	bl	#1486
 8001938:	str	r0, [sp, #4]
 800193a:	b	#-2 <stm32f30x_hal::gpio::gpiob::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOB>::split::{{closure}}::ha1d0d5549f3fe4d1+0x24>
 800193c:	ldr	r0, [sp, #4]
 800193e:	add	sp, #32
 8001940:	pop	{r7, pc}

0000000008001942 stm32f30x_hal::gpio::gpiob::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOB>::split::{{closure}}::h8f91f632af3f9733:
 8001942:	push	{r7, lr}
 8001944:	sub	sp, #32
 8001946:	mov	r2, r1
 8001948:	mov	r3, r0
 800194a:	str	r0, [sp, #24]
 800194c:	str	r1, [sp, #28]
 800194e:	ldr	r0, [sp, #28]
 8001950:	str	r2, [sp, #16]
 8001952:	str	r3, [sp, #12]
 8001954:	bl	#-194
 8001958:	str	r0, [sp, #8]
 800195a:	b	#-2 <stm32f30x_hal::gpio::gpiob::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOB>::split::{{closure}}::h8f91f632af3f9733+0x1a>
 800195c:	ldr	r0, [sp, #8]
 800195e:	bl	#1474
 8001962:	str	r0, [sp, #4]
 8001964:	b	#-2 <stm32f30x_hal::gpio::gpiob::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOB>::split::{{closure}}::h8f91f632af3f9733+0x24>
 8001966:	ldr	r0, [sp, #4]
 8001968:	add	sp, #32
 800196a:	pop	{r7, pc}

000000000800196c stm32f30x_hal::gpio::gpiob::MODER::moder::h0ba8d4a31da11456:
 800196c:	push	{r7, lr}
 800196e:	sub	sp, #16
 8001970:	mov	r1, r0
 8001972:	str	r0, [sp, #8]
 8001974:	str	r1, [sp, #4]
 8001976:	bl	#1296
 800197a:	str	r0, [sp, #12]
 800197c:	b	#-2 <stm32f30x_hal::gpio::gpiob::MODER::moder::h0ba8d4a31da11456+0x12>
 800197e:	ldr	r0, [sp, #12]
 8001980:	add	sp, #16
 8001982:	pop	{r7, pc}

0000000008001984 stm32f30x_hal::gpio::gpiob::OTYPER::otyper::h98805d439b45c297:
 8001984:	push	{r7, lr}
 8001986:	sub	sp, #16
 8001988:	mov	r1, r0
 800198a:	str	r0, [sp, #8]
 800198c:	str	r1, [sp, #4]
 800198e:	bl	#1272
 8001992:	str	r0, [sp, #12]
 8001994:	b	#-2 <stm32f30x_hal::gpio::gpiob::OTYPER::otyper::h98805d439b45c297+0x12>
 8001996:	ldr	r0, [sp, #12]
 8001998:	adds	r0, #4
 800199a:	add	sp, #16
 800199c:	pop	{r7, pc}

000000000800199e stm32f30x::rcc::ahbenr::<impl stm32f30x::rcc::AHBENR>::modify::h0d5d93600eb508cb:
 800199e:	push	{r7, lr}
 80019a0:	sub	sp, #48
 80019a2:	mov	r1, r0
 80019a4:	str	r0, [sp, #8]
 80019a6:	ldr	r0, [sp, #8]
 80019a8:	str	r0, [sp, #36]
 80019aa:	ldr	r0, [sp, #36]
 80019ac:	str	r1, [sp, #4]
 80019ae:	bl	#1764
 80019b2:	bl	#2070
 80019b6:	str	r0, [sp, #16]
 80019b8:	b	#-2 <stm32f30x::rcc::ahbenr::<impl stm32f30x::rcc::AHBENR>::modify::h0d5d93600eb508cb+0x1c>
 80019ba:	ldr	r0, [sp, #16]
 80019bc:	str	r0, [sp, #20]
 80019be:	ldr	r0, [sp, #16]
 80019c0:	str	r0, [sp, #24]
 80019c2:	add	r0, sp, #20
 80019c4:	str	r0, [sp, #28]
 80019c6:	add	r0, sp, #24
 80019c8:	str	r0, [sp, #32]
 80019ca:	ldr	r0, [sp, #28]
 80019cc:	ldr	r1, [sp, #32]
 80019ce:	bl	#-228
 80019d2:	str	r0, [sp]
 80019d4:	b	#-2 <stm32f30x::rcc::ahbenr::<impl stm32f30x::rcc::AHBENR>::modify::h0d5d93600eb508cb+0x38>
 80019d6:	ldr	r0, [sp, #8]
 80019d8:	ldr	r1, [sp, #24]
 80019da:	str	r0, [sp, #40]
 80019dc:	str	r1, [sp, #44]
 80019de:	ldr	r0, [sp, #40]
 80019e0:	bl	#1714
 80019e4:	ldr	r1, [sp, #44]
 80019e6:	bl	#2044
 80019ea:	b	#-2 <stm32f30x::rcc::ahbenr::<impl stm32f30x::rcc::AHBENR>::modify::h0d5d93600eb508cb+0x4e>
 80019ec:	add	sp, #48
 80019ee:	pop	{r7, pc}

00000000080019f0 stm32f30x::rcc::ahbenr::<impl stm32f30x::rcc::AHBENR>::modify::h28aa5be3906c0e05:
 80019f0:	push	{r7, lr}
 80019f2:	sub	sp, #48
 80019f4:	mov	r1, r0
 80019f6:	str	r0, [sp, #8]
 80019f8:	ldr	r0, [sp, #8]
 80019fa:	str	r0, [sp, #36]
 80019fc:	ldr	r0, [sp, #36]
 80019fe:	str	r1, [sp, #4]
 8001a00:	bl	#1682
 8001a04:	bl	#1988
 8001a08:	str	r0, [sp, #16]
 8001a0a:	b	#-2 <stm32f30x::rcc::ahbenr::<impl stm32f30x::rcc::AHBENR>::modify::h28aa5be3906c0e05+0x1c>
 8001a0c:	ldr	r0, [sp, #16]
 8001a0e:	str	r0, [sp, #20]
 8001a10:	ldr	r0, [sp, #16]
 8001a12:	str	r0, [sp, #24]
 8001a14:	add	r0, sp, #20
 8001a16:	str	r0, [sp, #28]
 8001a18:	add	r0, sp, #24
 8001a1a:	str	r0, [sp, #32]
 8001a1c:	ldr	r0, [sp, #28]
 8001a1e:	ldr	r1, [sp, #32]
 8001a20:	bl	#-574
 8001a24:	str	r0, [sp]
 8001a26:	b	#-2 <stm32f30x::rcc::ahbenr::<impl stm32f30x::rcc::AHBENR>::modify::h28aa5be3906c0e05+0x38>
 8001a28:	ldr	r0, [sp, #8]
 8001a2a:	ldr	r1, [sp, #24]
 8001a2c:	str	r0, [sp, #40]
 8001a2e:	str	r1, [sp, #44]
 8001a30:	ldr	r0, [sp, #40]
 8001a32:	bl	#1632
 8001a36:	ldr	r1, [sp, #44]
 8001a38:	bl	#1962
 8001a3c:	b	#-2 <stm32f30x::rcc::ahbenr::<impl stm32f30x::rcc::AHBENR>::modify::h28aa5be3906c0e05+0x4e>
 8001a3e:	add	sp, #48
 8001a40:	pop	{r7, pc}

0000000008001a42 stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::h1f59a206c25db7f1:
 8001a42:	push	{r7, lr}
 8001a44:	sub	sp, #48
 8001a46:	mov	r1, r0
 8001a48:	str	r0, [sp, #8]
 8001a4a:	ldr	r0, [sp, #8]
 8001a4c:	str	r0, [sp, #36]
 8001a4e:	ldr	r0, [sp, #36]
 8001a50:	str	r1, [sp, #4]
 8001a52:	bl	#1600
 8001a56:	bl	#1906
 8001a5a:	str	r0, [sp, #16]
 8001a5c:	b	#-2 <stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::h1f59a206c25db7f1+0x1c>
 8001a5e:	ldr	r0, [sp, #16]
 8001a60:	str	r0, [sp, #20]
 8001a62:	ldr	r0, [sp, #16]
 8001a64:	str	r0, [sp, #24]
 8001a66:	add	r0, sp, #20
 8001a68:	str	r0, [sp, #28]
 8001a6a:	add	r0, sp, #24
 8001a6c:	str	r0, [sp, #32]
 8001a6e:	ldr	r0, [sp, #28]
 8001a70:	ldr	r1, [sp, #32]
 8001a72:	bl	#-308
 8001a76:	str	r0, [sp]
 8001a78:	b	#-2 <stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::h1f59a206c25db7f1+0x38>
 8001a7a:	ldr	r0, [sp, #8]
 8001a7c:	ldr	r1, [sp, #24]
 8001a7e:	str	r0, [sp, #40]
 8001a80:	str	r1, [sp, #44]
 8001a82:	ldr	r0, [sp, #40]
 8001a84:	bl	#1550
 8001a88:	ldr	r1, [sp, #44]
 8001a8a:	bl	#1880
 8001a8e:	b	#-2 <stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::h1f59a206c25db7f1+0x4e>
 8001a90:	add	sp, #48
 8001a92:	pop	{r7, pc}

0000000008001a94 stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::h84a64d33c393255d:
 8001a94:	push	{r7, lr}
 8001a96:	sub	sp, #48
 8001a98:	mov	r1, r0
 8001a9a:	str	r0, [sp, #8]
 8001a9c:	ldr	r0, [sp, #8]
 8001a9e:	str	r0, [sp, #36]
 8001aa0:	ldr	r0, [sp, #36]
 8001aa2:	str	r1, [sp, #4]
 8001aa4:	bl	#1518
 8001aa8:	bl	#1824
 8001aac:	str	r0, [sp, #16]
 8001aae:	b	#-2 <stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::h84a64d33c393255d+0x1c>
 8001ab0:	ldr	r0, [sp, #16]
 8001ab2:	str	r0, [sp, #20]
 8001ab4:	ldr	r0, [sp, #16]
 8001ab6:	str	r0, [sp, #24]
 8001ab8:	add	r0, sp, #20
 8001aba:	str	r0, [sp, #28]
 8001abc:	add	r0, sp, #24
 8001abe:	str	r0, [sp, #32]
 8001ac0:	ldr	r0, [sp, #28]
 8001ac2:	ldr	r1, [sp, #32]
 8001ac4:	bl	#-654
 8001ac8:	str	r0, [sp]
 8001aca:	b	#-2 <stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::h84a64d33c393255d+0x38>
 8001acc:	ldr	r0, [sp, #8]
 8001ace:	ldr	r1, [sp, #24]
 8001ad0:	str	r0, [sp, #40]
 8001ad2:	str	r1, [sp, #44]
 8001ad4:	ldr	r0, [sp, #40]
 8001ad6:	bl	#1468
 8001ada:	ldr	r1, [sp, #44]
 8001adc:	bl	#1798
 8001ae0:	b	#-2 <stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::h84a64d33c393255d+0x4e>
 8001ae2:	add	sp, #48
 8001ae4:	pop	{r7, pc}

0000000008001ae6 stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::hc1077b9d956395d3:
 8001ae6:	push	{r7, lr}
 8001ae8:	sub	sp, #48
 8001aea:	mov	r1, r0
 8001aec:	str	r0, [sp, #8]
 8001aee:	ldr	r0, [sp, #8]
 8001af0:	str	r0, [sp, #36]
 8001af2:	ldr	r0, [sp, #36]
 8001af4:	str	r1, [sp, #4]
 8001af6:	bl	#1436
 8001afa:	bl	#1742
 8001afe:	str	r0, [sp, #16]
 8001b00:	b	#-2 <stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::hc1077b9d956395d3+0x1c>
 8001b02:	ldr	r0, [sp, #16]
 8001b04:	str	r0, [sp, #20]
 8001b06:	ldr	r0, [sp, #16]
 8001b08:	str	r0, [sp, #24]
 8001b0a:	add	r0, sp, #20
 8001b0c:	str	r0, [sp, #28]
 8001b0e:	add	r0, sp, #24
 8001b10:	str	r0, [sp, #32]
 8001b12:	ldr	r0, [sp, #28]
 8001b14:	ldr	r1, [sp, #32]
 8001b16:	bl	#-514
 8001b1a:	str	r0, [sp]
 8001b1c:	b	#-2 <stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::hc1077b9d956395d3+0x38>
 8001b1e:	ldr	r0, [sp, #8]
 8001b20:	ldr	r1, [sp, #24]
 8001b22:	str	r0, [sp, #40]
 8001b24:	str	r1, [sp, #44]
 8001b26:	ldr	r0, [sp, #40]
 8001b28:	bl	#1386
 8001b2c:	ldr	r1, [sp, #44]
 8001b2e:	bl	#1716
 8001b32:	b	#-2 <stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::hc1077b9d956395d3+0x4e>
 8001b34:	add	sp, #48
 8001b36:	pop	{r7, pc}

0000000008001b38 stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::hedb43f7413c0de30:
 8001b38:	push	{r7, lr}
 8001b3a:	sub	sp, #48
 8001b3c:	mov	r1, r0
 8001b3e:	str	r0, [sp, #8]
 8001b40:	ldr	r0, [sp, #8]
 8001b42:	str	r0, [sp, #36]
 8001b44:	ldr	r0, [sp, #36]
 8001b46:	str	r1, [sp, #4]
 8001b48:	bl	#1354
 8001b4c:	bl	#1660
 8001b50:	str	r0, [sp, #16]
 8001b52:	b	#-2 <stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::hedb43f7413c0de30+0x1c>
 8001b54:	ldr	r0, [sp, #16]
 8001b56:	str	r0, [sp, #20]
 8001b58:	ldr	r0, [sp, #16]
 8001b5a:	str	r0, [sp, #24]
 8001b5c:	add	r0, sp, #20
 8001b5e:	str	r0, [sp, #28]
 8001b60:	add	r0, sp, #24
 8001b62:	str	r0, [sp, #32]
 8001b64:	ldr	r0, [sp, #28]
 8001b66:	ldr	r1, [sp, #32]
 8001b68:	bl	#-860
 8001b6c:	str	r0, [sp]
 8001b6e:	b	#-2 <stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::hedb43f7413c0de30+0x38>
 8001b70:	ldr	r0, [sp, #8]
 8001b72:	ldr	r1, [sp, #24]
 8001b74:	str	r0, [sp, #40]
 8001b76:	str	r1, [sp, #44]
 8001b78:	ldr	r0, [sp, #40]
 8001b7a:	bl	#1304
 8001b7e:	ldr	r1, [sp, #44]
 8001b80:	bl	#1634
 8001b84:	b	#-2 <stm32f30x::rcc::ahbrstr::<impl stm32f30x::rcc::AHBRSTR>::modify::hedb43f7413c0de30+0x4e>
 8001b86:	add	sp, #48
 8001b88:	pop	{r7, pc}

0000000008001b8a <stm32f30x::RCC as stm32f30x_hal::rcc::RccExt>::constrain::h3d2617a3e41980dc:
 8001b8a:	push	{r4, lr}
 8001b8c:	sub	sp, #96
 8001b8e:	mov	r1, r0
 8001b90:	movs	r2, #0
 8001b92:	str	r2, [sp, #64]
 8001b94:	str	r2, [sp, #72]
 8001b96:	str	r2, [sp, #80]
 8001b98:	str	r2, [sp, #88]
 8001b9a:	ldr	r2, [sp, #64]
 8001b9c:	ldr	r3, [sp, #68]
 8001b9e:	str	r2, [sp, #32]
 8001ba0:	str	r3, [sp, #36]
 8001ba2:	ldr	r2, [sp, #72]
 8001ba4:	ldr	r3, [sp, #76]
 8001ba6:	str	r2, [sp, #40]
 8001ba8:	str	r3, [sp, #44]
 8001baa:	ldr	r2, [sp, #80]
 8001bac:	ldr	r3, [sp, #84]
 8001bae:	str	r2, [sp, #48]
 8001bb0:	str	r3, [sp, #52]
 8001bb2:	ldr	r2, [sp, #88]
 8001bb4:	ldr	r3, [sp, #92]
 8001bb6:	str	r2, [sp, #56]
 8001bb8:	str	r3, [sp, #60]
 8001bba:	add	r2, sp, #32
 8001bbc:	ldm.w	r2!, {r3, r4, r12, lr}
 8001bc0:	stm.w	r0!, {r3, r4, r12, lr}
 8001bc4:	ldm.w	r2, {r3, r4, r12, lr}
 8001bc8:	stm.w	r0, {r3, r4, r12, lr}
 8001bcc:	str	r1, [sp]
 8001bce:	add	sp, #96
 8001bd0:	pop	{r4, pc}

0000000008001bd2 stm32f30x_hal::gpio::gpiob::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOB>::split::hfdfa60f768727290:
 8001bd2:	push	{r7, lr}
 8001bd4:	sub	sp, #192
 8001bd6:	mov	r1, r0
 8001bd8:	str	r0, [sp, #20]
 8001bda:	ldr	r0, [sp, #20]
 8001bdc:	str	r1, [sp, #12]
 8001bde:	bl	#-808
 8001be2:	str	r0, [sp, #8]
 8001be4:	b	#-2 <stm32f30x_hal::gpio::gpiob::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOB>::split::hfdfa60f768727290+0x14>
 8001be6:	ldr	r0, [sp, #8]
 8001be8:	bl	#-590
 8001bec:	b	#-2 <stm32f30x_hal::gpio::gpiob::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOB>::split::hfdfa60f768727290+0x1c>
 8001bee:	ldr	r0, [sp, #20]
 8001bf0:	bl	#-800
 8001bf4:	str	r0, [sp, #4]
 8001bf6:	b	#-2 <stm32f30x_hal::gpio::gpiob::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOB>::split::hfdfa60f768727290+0x26>
 8001bf8:	ldr	r0, [sp, #4]
 8001bfa:	bl	#-280
 8001bfe:	b	#-2 <stm32f30x_hal::gpio::gpiob::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOB>::split::hfdfa60f768727290+0x2e>
 8001c00:	ldr	r0, [sp, #20]
 8001c02:	bl	#-818
 8001c06:	str	r0, [sp]
 8001c08:	b	#-2 <stm32f30x_hal::gpio::gpiob::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOB>::split::hfdfa60f768727290+0x38>
 8001c0a:	ldr	r0, [sp]
 8001c0c:	bl	#-462
 8001c10:	b	#-2 <stm32f30x_hal::gpio::gpiob::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOB>::split::hfdfa60f768727290+0x40>
 8001c12:	add	sp, #192
 8001c14:	pop	{r7, pc}

0000000008001c16 stm32f30x_hal::gpio::gpioc::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOC>::split::hf8f6a53f49dfdfc6:
 8001c16:	push	{r7, lr}
 8001c18:	sub	sp, #208
 8001c1a:	mov	r1, r0
 8001c1c:	str	r0, [sp, #20]
 8001c1e:	ldr	r0, [sp, #20]
 8001c20:	str	r1, [sp, #12]
 8001c22:	bl	#-876
 8001c26:	str	r0, [sp, #8]
 8001c28:	b	#-2 <stm32f30x_hal::gpio::gpioc::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOC>::split::hf8f6a53f49dfdfc6+0x14>
 8001c2a:	ldr	r0, [sp, #8]
 8001c2c:	bl	#-576
 8001c30:	b	#-2 <stm32f30x_hal::gpio::gpioc::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOC>::split::hf8f6a53f49dfdfc6+0x1c>
 8001c32:	ldr	r0, [sp, #20]
 8001c34:	bl	#-868
 8001c38:	str	r0, [sp, #4]
 8001c3a:	b	#-2 <stm32f30x_hal::gpio::gpioc::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOC>::split::hf8f6a53f49dfdfc6+0x26>
 8001c3c:	ldr	r0, [sp, #4]
 8001c3e:	bl	#-266
 8001c42:	b	#-2 <stm32f30x_hal::gpio::gpioc::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOC>::split::hf8f6a53f49dfdfc6+0x2e>
 8001c44:	ldr	r0, [sp, #20]
 8001c46:	bl	#-886
 8001c4a:	str	r0, [sp]
 8001c4c:	b	#-2 <stm32f30x_hal::gpio::gpioc::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOC>::split::hf8f6a53f49dfdfc6+0x38>
 8001c4e:	ldr	r0, [sp]
 8001c50:	bl	#-448
 8001c54:	b	#-2 <stm32f30x_hal::gpio::gpioc::<impl stm32f30x_hal::gpio::GpioExt for stm32f30x::GPIOC>::split::hf8f6a53f49dfdfc6+0x40>
 8001c56:	add	sp, #208
 8001c58:	pop	{r7, pc}

0000000008001c5a stm32f30x::rcc::ahbenr::W::iopben::h5d95509ea7bbcb96:
 8001c5a:	sub	sp, #12
 8001c5c:	mov	r1, r0
 8001c5e:	str	r0, [sp, #4]
 8001c60:	ldr	r0, [sp, #4]
 8001c62:	str	r0, [sp, #8]
 8001c64:	ldr	r0, [sp, #8]
 8001c66:	str	r1, [sp]
 8001c68:	add	sp, #12
 8001c6a:	bx	lr

0000000008001c6c stm32f30x::rcc::ahbenr::W::iopcen::hf74576d0e41b273c:
 8001c6c:	sub	sp, #12
 8001c6e:	mov	r1, r0
 8001c70:	str	r0, [sp, #4]
 8001c72:	ldr	r0, [sp, #4]
 8001c74:	str	r0, [sp, #8]
 8001c76:	ldr	r0, [sp, #8]
 8001c78:	str	r1, [sp]
 8001c7a:	add	sp, #12
 8001c7c:	bx	lr

0000000008001c7e stm32f30x::rcc::ahbenr::DMAENW::_bits::he8591b09b5a58792:
 8001c7e:	sub	sp, #16
 8001c80:	mov	r1, r0
 8001c82:	str	r0, [sp, #8]
 8001c84:	ldr	r0, [sp, #8]
 8001c86:	ldrb	r0, [r0]
 8001c88:	lsls	r2, r0, #31
 8001c8a:	cmp	r2, #0
 8001c8c:	str	r1, [sp, #4]
 8001c8e:	str	r0, [sp]
 8001c90:	beq	#18 <stm32f30x::rcc::ahbenr::DMAENW::_bits::he8591b09b5a58792+0x28>
 8001c92:	b	#-2 <stm32f30x::rcc::ahbenr::DMAENW::_bits::he8591b09b5a58792+0x16>
 8001c94:	ldr	r0, [sp]
 8001c96:	cmp	r0, #1
 8001c98:	bne	#8 <stm32f30x::rcc::ahbenr::DMAENW::_bits::he8591b09b5a58792+0x26>
 8001c9a:	b	#-2 <stm32f30x::rcc::ahbenr::DMAENW::_bits::he8591b09b5a58792+0x1e>
 8001c9c:	movs	r0, #1
 8001c9e:	strb.w	r0, [sp, #15]
 8001ca2:	b	#8 <stm32f30x::rcc::ahbenr::DMAENW::_bits::he8591b09b5a58792+0x30>
 8001ca4:	trap
 8001ca6:	movs	r0, #0
 8001ca8:	strb.w	r0, [sp, #15]
 8001cac:	b	#-2 <stm32f30x::rcc::ahbenr::DMAENW::_bits::he8591b09b5a58792+0x30>
 8001cae:	ldrb.w	r0, [sp, #15]
 8001cb2:	add	sp, #16
 8001cb4:	bx	lr

0000000008001cb6 stm32f30x::rcc::ahbenr::_IOPBENW::bit::h0764b6f5fbd49624:
 8001cb6:	sub	sp, #20
 8001cb8:	mov	r2, r1
 8001cba:	mov	r3, r0
 8001cbc:	str	r0, [sp, #12]
 8001cbe:	strb.w	r1, [sp, #19]
 8001cc2:	str	r2, [sp, #8]
 8001cc4:	str	r3, [sp, #4]
 8001cc6:	b	#-2 <stm32f30x::rcc::ahbenr::_IOPBENW::bit::h0764b6f5fbd49624+0x12>
 8001cc8:	ldr	r0, [sp, #12]
 8001cca:	ldr	r1, [r0]
 8001ccc:	bic	r1, r1, #262144
 8001cd0:	str	r1, [r0]
 8001cd2:	ldrb.w	r0, [sp, #19]
 8001cd6:	lsls	r0, r0, #18
 8001cd8:	str	r0, [sp]
 8001cda:	b	#-2 <stm32f30x::rcc::ahbenr::_IOPBENW::bit::h0764b6f5fbd49624+0x26>
 8001cdc:	ldr	r0, [sp, #12]
 8001cde:	ldr	r1, [r0]
 8001ce0:	ldr	r2, [sp]
 8001ce2:	orrs	r1, r2
 8001ce4:	str	r1, [r0]
 8001ce6:	ldr	r0, [sp, #12]
 8001ce8:	add	sp, #20
 8001cea:	bx	lr

0000000008001cec stm32f30x::rcc::ahbenr::_IOPBENW::enabled::h6d2c2bf83b245f0b:
 8001cec:	push	{r7, lr}
 8001cee:	sub	sp, #16
 8001cf0:	mov	r1, r0
 8001cf2:	str	r0, [sp, #8]
 8001cf4:	ldr	r0, [sp, #8]
 8001cf6:	movs	r2, #1
 8001cf8:	strb.w	r2, [sp, #15]
 8001cfc:	ldrb.w	r2, [sp, #15]
 8001d00:	str	r1, [sp, #4]
 8001d02:	mov	r1, r2
 8001d04:	bl	#10
 8001d08:	str	r0, [sp]
 8001d0a:	b	#-2 <stm32f30x::rcc::ahbenr::_IOPBENW::enabled::h6d2c2bf83b245f0b+0x20>
 8001d0c:	ldr	r0, [sp]
 8001d0e:	add	sp, #16
 8001d10:	pop	{r7, pc}

0000000008001d12 stm32f30x::rcc::ahbenr::_IOPBENW::variant::h836cfe4e5e898bf8:
 8001d12:	push	{r7, lr}
 8001d14:	sub	sp, #32
 8001d16:	mov	r2, r1
 8001d18:	mov	r3, r0
 8001d1a:	str	r0, [sp, #24]
 8001d1c:	strb.w	r1, [sp, #31]
 8001d20:	ldr	r0, [sp, #24]
 8001d22:	add.w	r1, sp, #31
 8001d26:	str	r0, [sp, #20]
 8001d28:	mov	r0, r1
 8001d2a:	str	r2, [sp, #16]
 8001d2c:	str	r3, [sp, #12]
 8001d2e:	bl	#-180
 8001d32:	str	r0, [sp, #8]
 8001d34:	b	#-2 <stm32f30x::rcc::ahbenr::_IOPBENW::variant::h836cfe4e5e898bf8+0x24>
 8001d36:	ldr	r0, [sp, #8]
 8001d38:	and	r1, r0, #1
 8001d3c:	ldr	r0, [sp, #20]
 8001d3e:	bl	#-140
 8001d42:	str	r0, [sp, #4]
 8001d44:	b	#-2 <stm32f30x::rcc::ahbenr::_IOPBENW::variant::h836cfe4e5e898bf8+0x34>
 8001d46:	ldr	r0, [sp, #4]
 8001d48:	add	sp, #32
 8001d4a:	pop	{r7, pc}

0000000008001d4c stm32f30x::rcc::ahbenr::_IOPCENW::bit::hc741df546fd2e419:
 8001d4c:	sub	sp, #20
 8001d4e:	mov	r2, r1
 8001d50:	mov	r3, r0
 8001d52:	str	r0, [sp, #12]
 8001d54:	strb.w	r1, [sp, #19]
 8001d58:	str	r2, [sp, #8]
 8001d5a:	str	r3, [sp, #4]
 8001d5c:	b	#-2 <stm32f30x::rcc::ahbenr::_IOPCENW::bit::hc741df546fd2e419+0x12>
 8001d5e:	ldr	r0, [sp, #12]
 8001d60:	ldr	r1, [r0]
 8001d62:	bic	r1, r1, #524288
 8001d66:	str	r1, [r0]
 8001d68:	ldrb.w	r0, [sp, #19]
 8001d6c:	lsls	r0, r0, #19
 8001d6e:	str	r0, [sp]
 8001d70:	b	#-2 <stm32f30x::rcc::ahbenr::_IOPCENW::bit::hc741df546fd2e419+0x26>
 8001d72:	ldr	r0, [sp, #12]
 8001d74:	ldr	r1, [r0]
 8001d76:	ldr	r2, [sp]
 8001d78:	orrs	r1, r2
 8001d7a:	str	r1, [r0]
 8001d7c:	ldr	r0, [sp, #12]
 8001d7e:	add	sp, #20
 8001d80:	bx	lr

0000000008001d82 stm32f30x::rcc::ahbenr::_IOPCENW::enabled::h53d4175c7c4b6e78:
 8001d82:	push	{r7, lr}
 8001d84:	sub	sp, #16
 8001d86:	mov	r1, r0
 8001d88:	str	r0, [sp, #8]
 8001d8a:	ldr	r0, [sp, #8]
 8001d8c:	movs	r2, #1
 8001d8e:	strb.w	r2, [sp, #15]
 8001d92:	ldrb.w	r2, [sp, #15]
 8001d96:	str	r1, [sp, #4]
 8001d98:	mov	r1, r2
 8001d9a:	bl	#10
 8001d9e:	str	r0, [sp]
 8001da0:	b	#-2 <stm32f30x::rcc::ahbenr::_IOPCENW::enabled::h53d4175c7c4b6e78+0x20>
 8001da2:	ldr	r0, [sp]
 8001da4:	add	sp, #16
 8001da6:	pop	{r7, pc}

0000000008001da8 stm32f30x::rcc::ahbenr::_IOPCENW::variant::he1acb83a10d4d4b9:
 8001da8:	push	{r7, lr}
 8001daa:	sub	sp, #32
 8001dac:	mov	r2, r1
 8001dae:	mov	r3, r0
 8001db0:	str	r0, [sp, #24]
 8001db2:	strb.w	r1, [sp, #31]
 8001db6:	ldr	r0, [sp, #24]
 8001db8:	add.w	r1, sp, #31
 8001dbc:	str	r0, [sp, #20]
 8001dbe:	mov	r0, r1
 8001dc0:	str	r2, [sp, #16]
 8001dc2:	str	r3, [sp, #12]
 8001dc4:	bl	#-330
 8001dc8:	str	r0, [sp, #8]
 8001dca:	b	#-2 <stm32f30x::rcc::ahbenr::_IOPCENW::variant::he1acb83a10d4d4b9+0x24>
 8001dcc:	ldr	r0, [sp, #8]
 8001dce:	and	r1, r0, #1
 8001dd2:	ldr	r0, [sp, #20]
 8001dd4:	bl	#-140
 8001dd8:	str	r0, [sp, #4]
 8001dda:	b	#-2 <stm32f30x::rcc::ahbenr::_IOPCENW::variant::he1acb83a10d4d4b9+0x34>
 8001ddc:	ldr	r0, [sp, #4]
 8001dde:	add	sp, #32
 8001de0:	pop	{r7, pc}

0000000008001de2 stm32f30x::flash::sr::_EOPW::clear_bit::hd23c4e80a84ae215:
 8001de2:	push	{r7, lr}
 8001de4:	sub	sp, #16
 8001de6:	mov	r1, r0
 8001de8:	str	r0, [sp, #12]
 8001dea:	ldr	r0, [sp, #12]
 8001dec:	movs	r2, #0
 8001dee:	str	r1, [sp, #8]
 8001df0:	mov	r1, r2
 8001df2:	bl	#10
 8001df6:	str	r0, [sp, #4]
 8001df8:	b	#-2 <stm32f30x::flash::sr::_EOPW::clear_bit::hd23c4e80a84ae215+0x18>
 8001dfa:	ldr	r0, [sp, #4]
 8001dfc:	add	sp, #16
 8001dfe:	pop	{r7, pc}

0000000008001e00 stm32f30x::flash::sr::_EOPW::bit::h0ffd8f2e1a7fd5a6:
 8001e00:	sub	sp, #20
 8001e02:	mov	r2, r1
 8001e04:	mov	r3, r0
 8001e06:	str	r0, [sp, #12]
 8001e08:	strb.w	r1, [sp, #19]
 8001e0c:	str	r2, [sp, #8]
 8001e0e:	str	r3, [sp, #4]
 8001e10:	b	#-2 <stm32f30x::flash::sr::_EOPW::bit::h0ffd8f2e1a7fd5a6+0x12>
 8001e12:	ldr	r0, [sp, #12]
 8001e14:	ldr	r1, [r0]
 8001e16:	bic	r1, r1, #32
 8001e1a:	str	r1, [r0]
 8001e1c:	ldrb.w	r0, [sp, #19]
 8001e20:	lsls	r0, r0, #5
 8001e22:	str	r0, [sp]
 8001e24:	b	#-2 <stm32f30x::flash::sr::_EOPW::bit::h0ffd8f2e1a7fd5a6+0x26>
 8001e26:	ldr	r0, [sp, #12]
 8001e28:	ldr	r1, [r0]
 8001e2a:	ldr	r2, [sp]
 8001e2c:	orrs	r1, r2
 8001e2e:	str	r1, [r0]
 8001e30:	ldr	r0, [sp, #12]
 8001e32:	add	sp, #20
 8001e34:	bx	lr

0000000008001e36 stm32f30x::flash::cr::_LOCKW::set_bit::h08463d0570eee262:
 8001e36:	push	{r7, lr}
 8001e38:	sub	sp, #16
 8001e3a:	mov	r1, r0
 8001e3c:	str	r0, [sp, #12]
 8001e3e:	ldr	r0, [sp, #12]
 8001e40:	movs	r2, #1
 8001e42:	str	r1, [sp, #8]
 8001e44:	mov	r1, r2
 8001e46:	bl	#10
 8001e4a:	str	r0, [sp, #4]
 8001e4c:	b	#-2 <stm32f30x::flash::cr::_LOCKW::set_bit::h08463d0570eee262+0x18>
 8001e4e:	ldr	r0, [sp, #4]
 8001e50:	add	sp, #16
 8001e52:	pop	{r7, pc}

0000000008001e54 stm32f30x::flash::cr::_LOCKW::bit::hc4966d87ddea61e0:
 8001e54:	sub	sp, #20
 8001e56:	mov	r2, r1
 8001e58:	mov	r3, r0
 8001e5a:	str	r0, [sp, #12]
 8001e5c:	strb.w	r1, [sp, #19]
 8001e60:	str	r2, [sp, #8]
 8001e62:	str	r3, [sp, #4]
 8001e64:	b	#-2 <stm32f30x::flash::cr::_LOCKW::bit::hc4966d87ddea61e0+0x12>
 8001e66:	ldr	r0, [sp, #12]
 8001e68:	ldr	r1, [r0]
 8001e6a:	bic	r1, r1, #128
 8001e6e:	str	r1, [r0]
 8001e70:	ldrb.w	r0, [sp, #19]
 8001e74:	lsls	r0, r0, #7
 8001e76:	str	r0, [sp]
 8001e78:	b	#-2 <stm32f30x::flash::cr::_LOCKW::bit::hc4966d87ddea61e0+0x26>
 8001e7a:	ldr	r0, [sp, #12]
 8001e7c:	ldr	r1, [r0]
 8001e7e:	ldr	r2, [sp]
 8001e80:	orrs	r1, r2
 8001e82:	str	r1, [r0]
 8001e84:	ldr	r0, [sp, #12]
 8001e86:	add	sp, #20
 8001e88:	bx	lr

0000000008001e8a stm32f30x::GPIOB::ptr::h78490e4a78ad58d1:
 8001e8a:	movw	r0, #1024
 8001e8e:	movt	r0, #18432
 8001e92:	bx	lr

0000000008001e94 stm32f30x::GPIOC::ptr::h39568e26cf07f1d9:
 8001e94:	movw	r0, #2048
 8001e98:	movt	r0, #18432
 8001e9c:	bx	lr

0000000008001e9e stm32f30x::FLASH::ptr::h023a44c71344d2a1:
 8001e9e:	movw	r0, #8192
 8001ea2:	movt	r0, #16386
 8001ea6:	bx	lr

0000000008001ea8 <stm32f30x::FLASH as core::ops::deref::Deref>::deref::hb42ea0494b81319e:
 8001ea8:	push	{r7, lr}
 8001eaa:	sub	sp, #16
 8001eac:	mov	r1, r0
 8001eae:	str	r0, [sp, #12]
 8001eb0:	str	r1, [sp, #8]
 8001eb2:	bl	#-24
 8001eb6:	str	r0, [sp, #4]
 8001eb8:	b	#-2 <<stm32f30x::FLASH as core::ops::deref::Deref>::deref::hb42ea0494b81319e+0x12>
 8001eba:	ldr	r0, [sp, #4]
 8001ebc:	add	sp, #16
 8001ebe:	pop	{r7, pc}

0000000008001ec0 stm32f30x::RCC::ptr::ha214012cbfeab834:
 8001ec0:	movw	r0, #4096
 8001ec4:	movt	r0, #16386
 8001ec8:	bx	lr

0000000008001eca stm32f30x::Peripherals::steal::h23540c621b509c37:
 8001eca:	sub	sp, #424
 8001ecc:	movs	r0, #0
 8001ece:	cmp	r0, #0
 8001ed0:	bne	#34 <stm32f30x::Peripherals::steal::h23540c621b509c37+0x2c>
 8001ed2:	b	#-2 <stm32f30x::Peripherals::steal::h23540c621b509c37+0xa>
 8001ed4:	movw	r0, #0
 8001ed8:	movt	r0, #8192
 8001edc:	ldrb	r0, [r0]
 8001ede:	lsls	r0, r0, #31
 8001ee0:	cmp	r0, #0
 8001ee2:	bne	#2 <stm32f30x::Peripherals::steal::h23540c621b509c37+0x1e>
 8001ee4:	b	#-2 <stm32f30x::Peripherals::steal::h23540c621b509c37+0x1c>
 8001ee6:	b	#12 <stm32f30x::Peripherals::steal::h23540c621b509c37+0x2c>
 8001ee8:	movw	r0, #17580
 8001eec:	movt	r0, #2048
 8001ef0:	bl	#1576
 8001ef4:	trap
 8001ef6:	movw	r0, #0
 8001efa:	movt	r0, #8192
 8001efe:	movs	r1, #1
 8001f00:	strb	r1, [r0]
 8001f02:	add	sp, #424
 8001f04:	bx	lr

0000000008001f06 stm32f30x::rcc::ahbrstr::_IOPBRSTW::set_bit::hb76ceffca0705313:
 8001f06:	push	{r7, lr}
 8001f08:	sub	sp, #16
 8001f0a:	mov	r1, r0
 8001f0c:	str	r0, [sp, #12]
 8001f0e:	ldr	r0, [sp, #12]
 8001f10:	movs	r2, #1
 8001f12:	str	r1, [sp, #8]
 8001f14:	mov	r1, r2
 8001f16:	bl	#40
 8001f1a:	str	r0, [sp, #4]
 8001f1c:	b	#-2 <stm32f30x::rcc::ahbrstr::_IOPBRSTW::set_bit::hb76ceffca0705313+0x18>
 8001f1e:	ldr	r0, [sp, #4]
 8001f20:	add	sp, #16
 8001f22:	pop	{r7, pc}

0000000008001f24 stm32f30x::rcc::ahbrstr::_IOPBRSTW::clear_bit::h6afc94ea1af1dabf:
 8001f24:	push	{r7, lr}
 8001f26:	sub	sp, #16
 8001f28:	mov	r1, r0
 8001f2a:	str	r0, [sp, #12]
 8001f2c:	ldr	r0, [sp, #12]
 8001f2e:	movs	r2, #0
 8001f30:	str	r1, [sp, #8]
 8001f32:	mov	r1, r2
 8001f34:	bl	#10
 8001f38:	str	r0, [sp, #4]
 8001f3a:	b	#-2 <stm32f30x::rcc::ahbrstr::_IOPBRSTW::clear_bit::h6afc94ea1af1dabf+0x18>
 8001f3c:	ldr	r0, [sp, #4]
 8001f3e:	add	sp, #16
 8001f40:	pop	{r7, pc}

0000000008001f42 stm32f30x::rcc::ahbrstr::_IOPBRSTW::bit::hfdb56b4e0e12a597:
 8001f42:	sub	sp, #20
 8001f44:	mov	r2, r1
 8001f46:	mov	r3, r0
 8001f48:	str	r0, [sp, #12]
 8001f4a:	strb.w	r1, [sp, #19]
 8001f4e:	str	r2, [sp, #8]
 8001f50:	str	r3, [sp, #4]
 8001f52:	b	#-2 <stm32f30x::rcc::ahbrstr::_IOPBRSTW::bit::hfdb56b4e0e12a597+0x12>
 8001f54:	ldr	r0, [sp, #12]
 8001f56:	ldr	r1, [r0]
 8001f58:	bic	r1, r1, #262144
 8001f5c:	str	r1, [r0]
 8001f5e:	ldrb.w	r0, [sp, #19]
 8001f62:	lsls	r0, r0, #18
 8001f64:	str	r0, [sp]
 8001f66:	b	#-2 <stm32f30x::rcc::ahbrstr::_IOPBRSTW::bit::hfdb56b4e0e12a597+0x26>
 8001f68:	ldr	r0, [sp, #12]
 8001f6a:	ldr	r1, [r0]
 8001f6c:	ldr	r2, [sp]
 8001f6e:	orrs	r1, r2
 8001f70:	str	r1, [r0]
 8001f72:	ldr	r0, [sp, #12]
 8001f74:	add	sp, #20
 8001f76:	bx	lr

0000000008001f78 stm32f30x::rcc::ahbrstr::_IOPCRSTW::set_bit::h8ec6d800392dfb94:
 8001f78:	push	{r7, lr}
 8001f7a:	sub	sp, #16
 8001f7c:	mov	r1, r0
 8001f7e:	str	r0, [sp, #12]
 8001f80:	ldr	r0, [sp, #12]
 8001f82:	movs	r2, #1
 8001f84:	str	r1, [sp, #8]
 8001f86:	mov	r1, r2
 8001f88:	bl	#40
 8001f8c:	str	r0, [sp, #4]
 8001f8e:	b	#-2 <stm32f30x::rcc::ahbrstr::_IOPCRSTW::set_bit::h8ec6d800392dfb94+0x18>
 8001f90:	ldr	r0, [sp, #4]
 8001f92:	add	sp, #16
 8001f94:	pop	{r7, pc}

0000000008001f96 stm32f30x::rcc::ahbrstr::_IOPCRSTW::clear_bit::h9f2b5cfb76a1832b:
 8001f96:	push	{r7, lr}
 8001f98:	sub	sp, #16
 8001f9a:	mov	r1, r0
 8001f9c:	str	r0, [sp, #12]
 8001f9e:	ldr	r0, [sp, #12]
 8001fa0:	movs	r2, #0
 8001fa2:	str	r1, [sp, #8]
 8001fa4:	mov	r1, r2
 8001fa6:	bl	#10
 8001faa:	str	r0, [sp, #4]
 8001fac:	b	#-2 <stm32f30x::rcc::ahbrstr::_IOPCRSTW::clear_bit::h9f2b5cfb76a1832b+0x18>
 8001fae:	ldr	r0, [sp, #4]
 8001fb0:	add	sp, #16
 8001fb2:	pop	{r7, pc}

0000000008001fb4 stm32f30x::rcc::ahbrstr::_IOPCRSTW::bit::h4be4bc0d67d63812:
 8001fb4:	sub	sp, #20
 8001fb6:	mov	r2, r1
 8001fb8:	mov	r3, r0
 8001fba:	str	r0, [sp, #12]
 8001fbc:	strb.w	r1, [sp, #19]
 8001fc0:	str	r2, [sp, #8]
 8001fc2:	str	r3, [sp, #4]
 8001fc4:	b	#-2 <stm32f30x::rcc::ahbrstr::_IOPCRSTW::bit::h4be4bc0d67d63812+0x12>
 8001fc6:	ldr	r0, [sp, #12]
 8001fc8:	ldr	r1, [r0]
 8001fca:	bic	r1, r1, #524288
 8001fce:	str	r1, [r0]
 8001fd0:	ldrb.w	r0, [sp, #19]
 8001fd4:	lsls	r0, r0, #19
 8001fd6:	str	r0, [sp]
 8001fd8:	b	#-2 <stm32f30x::rcc::ahbrstr::_IOPCRSTW::bit::h4be4bc0d67d63812+0x26>
 8001fda:	ldr	r0, [sp, #12]
 8001fdc:	ldr	r1, [r0]
 8001fde:	ldr	r2, [sp]
 8001fe0:	orrs	r1, r2
 8001fe2:	str	r1, [r0]
 8001fe4:	ldr	r0, [sp, #12]
 8001fe6:	add	sp, #20
 8001fe8:	bx	lr

0000000008001fea __bkpt:
 8001fea:	bkpt	#0
 8001fec:	bx	lr

0000000008001fee __cpsid:
 8001fee:	cpsid i
 8001ff0:	bx	lr

0000000008001ff2 __cpsie:
 8001ff2:	cpsie i
 8001ff4:	bx	lr

0000000008001ff6 __nop:
 8001ff6:	bx	lr

0000000008001ff8 __primask:
 8001ff8:	mrs	r0, primask
 8001ffc:	bx	lr

0000000008001ffe <&T as core::fmt::Display>::fmt::h87ab47fd4271d90c:
 8001ffe:	push	{r7, lr}
 8002000:	sub	sp, #24
 8002002:	mov	r2, r1
 8002004:	mov	r3, r0
 8002006:	str	r0, [sp, #16]
 8002008:	str	r1, [sp, #20]
 800200a:	ldr	r0, [sp, #16]
 800200c:	ldr	r1, [r0]
 800200e:	ldr	r0, [r0, #4]
 8002010:	ldr.w	r12, [sp, #20]
 8002014:	str	r0, [sp, #12]
 8002016:	mov	r0, r1
 8002018:	ldr	r1, [sp, #12]
 800201a:	str	r2, [sp, #8]
 800201c:	mov	r2, r12
 800201e:	str	r3, [sp, #4]
 8002020:	bl	#3422
 8002024:	str	r0, [sp]
 8002026:	b	#-2 <<&T as core::fmt::Display>::fmt::h87ab47fd4271d90c+0x2a>
 8002028:	ldr	r0, [sp]
 800202a:	and	r0, r0, #1
 800202e:	add	sp, #24
 8002030:	pop	{r7, pc}

0000000008002032 core::fmt::ArgumentV1::new::h9209cee549367d3e:
 8002032:	sub	sp, #40
 8002034:	mov	r2, r1
 8002036:	mov	r3, r0
 8002038:	str	r0, [sp, #16]
 800203a:	str	r1, [sp, #20]
 800203c:	ldr	r0, [sp, #20]
 800203e:	str	r0, [sp, #32]
 8002040:	ldr	r0, [sp, #32]
 8002042:	str	r2, [sp, #12]
 8002044:	str	r3, [sp, #8]
 8002046:	str	r0, [sp, #4]
 8002048:	b	#-2 <core::fmt::ArgumentV1::new::h9209cee549367d3e+0x18>
 800204a:	ldr	r0, [sp, #16]
 800204c:	str	r0, [sp, #36]
 800204e:	ldr	r0, [sp, #36]
 8002050:	str	r0, [sp]
 8002052:	b	#-2 <core::fmt::ArgumentV1::new::h9209cee549367d3e+0x22>
 8002054:	ldr	r0, [sp]
 8002056:	str	r0, [sp, #24]
 8002058:	ldr	r1, [sp, #4]
 800205a:	str	r1, [sp, #28]
 800205c:	ldr	r0, [sp, #24]
 800205e:	ldr	r1, [sp, #28]
 8002060:	add	sp, #40
 8002062:	bx	lr

0000000008002064 core::fmt::ArgumentV1::new::h1302473f814e6aeb:
 8002064:	sub	sp, #40
 8002066:	mov	r2, r1
 8002068:	mov	r3, r0
 800206a:	str	r0, [sp, #16]
 800206c:	str	r1, [sp, #20]
 800206e:	ldr	r0, [sp, #20]
 8002070:	str	r0, [sp, #32]
 8002072:	ldr	r0, [sp, #32]
 8002074:	str	r2, [sp, #12]
 8002076:	str	r3, [sp, #8]
 8002078:	str	r0, [sp, #4]
 800207a:	b	#-2 <core::fmt::ArgumentV1::new::h1302473f814e6aeb+0x18>
 800207c:	ldr	r0, [sp, #16]
 800207e:	str	r0, [sp, #36]
 8002080:	ldr	r0, [sp, #36]
 8002082:	str	r0, [sp]
 8002084:	b	#-2 <core::fmt::ArgumentV1::new::h1302473f814e6aeb+0x22>
 8002086:	ldr	r0, [sp]
 8002088:	str	r0, [sp, #24]
 800208a:	ldr	r1, [sp, #4]
 800208c:	str	r1, [sp, #28]
 800208e:	ldr	r0, [sp, #24]
 8002090:	ldr	r1, [sp, #28]
 8002092:	add	sp, #40
 8002094:	bx	lr

0000000008002096 core::cell::UnsafeCell<T>::get::h15629e93f79d809c:
 8002096:	sub	sp, #8
 8002098:	mov	r1, r0
 800209a:	str	r0, [sp, #4]
 800209c:	ldr	r0, [sp, #4]
 800209e:	str	r1, [sp]
 80020a0:	add	sp, #8
 80020a2:	bx	lr

00000000080020a4 core::mem::size_of::h9732475231d3b6a4:
 80020a4:	sub	sp, #8
 80020a6:	movs	r0, #1
 80020a8:	str	r0, [sp, #4]
 80020aa:	ldr	r0, [sp, #4]
 80020ac:	str	r0, [sp]
 80020ae:	b	#-2 <core::mem::size_of::h9732475231d3b6a4+0xc>
 80020b0:	ldr	r0, [sp]
 80020b2:	add	sp, #8
 80020b4:	bx	lr

00000000080020b6 core::mem::align_of::h0cb46791ef6ab737:
 80020b6:	sub	sp, #8
 80020b8:	movs	r0, #1
 80020ba:	str	r0, [sp, #4]
 80020bc:	ldr	r0, [sp, #4]
 80020be:	str	r0, [sp]
 80020c0:	b	#-2 <core::mem::align_of::h0cb46791ef6ab737+0xc>
 80020c2:	ldr	r0, [sp]
 80020c4:	add	sp, #8
 80020c6:	bx	lr

00000000080020c8 core::option::Option<T>::unwrap_or::h61fb8566d353c4d3:
 80020c8:	push	{r7, lr}
 80020ca:	sub	sp, #40
 80020cc:	mov	r3, r2
 80020ce:	mov	r12, r1
 80020d0:	mov	lr, r0
 80020d2:	str	r0, [sp, #16]
 80020d4:	str	r1, [sp, #20]
 80020d6:	str	r2, [sp, #24]
 80020d8:	movs	r0, #0
 80020da:	strb.w	r0, [sp, #38]
 80020de:	strb.w	r0, [sp, #39]
 80020e2:	movs	r0, #1
 80020e4:	strb.w	r0, [sp, #39]
 80020e8:	strb.w	r0, [sp, #38]
 80020ec:	ldr	r0, [sp, #16]
 80020ee:	cmp	r0, #0
 80020f0:	str	r3, [sp, #12]
 80020f2:	str.w	r12, [sp, #8]
 80020f6:	str.w	lr, [sp, #4]
 80020fa:	str	r0, [sp]
 80020fc:	beq	#8 <core::option::Option<T>::unwrap_or::h61fb8566d353c4d3+0x40>
 80020fe:	b	#-2 <core::option::Option<T>::unwrap_or::h61fb8566d353c4d3+0x38>
 8002100:	ldr	r0, [sp]
 8002102:	cmp	r0, #1
 8002104:	beq	#14 <core::option::Option<T>::unwrap_or::h61fb8566d353c4d3+0x4e>
 8002106:	b	#10 <core::option::Option<T>::unwrap_or::h61fb8566d353c4d3+0x4c>
 8002108:	movs	r0, #0
 800210a:	strb.w	r0, [sp, #38]
 800210e:	ldr	r0, [sp, #24]
 8002110:	str	r0, [sp, #28]
 8002112:	b	#32 <core::option::Option<T>::unwrap_or::h61fb8566d353c4d3+0x6e>
 8002114:	trap
 8002116:	movs	r0, #0
 8002118:	strb.w	r0, [sp, #39]
 800211c:	ldr	r0, [sp, #20]
 800211e:	str	r0, [sp, #32]
 8002120:	ldr	r0, [sp, #32]
 8002122:	str	r0, [sp, #28]
 8002124:	b	#14 <core::option::Option<T>::unwrap_or::h61fb8566d353c4d3+0x6e>
 8002126:	ldr	r0, [sp, #16]
 8002128:	cmp	r0, #1
 800212a:	beq	#26 <core::option::Option<T>::unwrap_or::h61fb8566d353c4d3+0x80>
 800212c:	b	#44 <core::option::Option<T>::unwrap_or::h61fb8566d353c4d3+0x94>
 800212e:	movs	r0, #0
 8002130:	strb.w	r0, [sp, #38]
 8002134:	b	#-18 <core::option::Option<T>::unwrap_or::h61fb8566d353c4d3+0x5e>
 8002136:	ldrb.w	r0, [sp, #38]
 800213a:	lsls	r0, r0, #31
 800213c:	cmp	r0, #0
 800213e:	bne	#-20 <core::option::Option<T>::unwrap_or::h61fb8566d353c4d3+0x66>
 8002140:	b	#-30 <core::option::Option<T>::unwrap_or::h61fb8566d353c4d3+0x5e>
 8002142:	ldr	r0, [sp, #28]
 8002144:	add	sp, #40
 8002146:	pop	{r7, pc}
 8002148:	ldrb.w	r0, [sp, #39]
 800214c:	lsls	r0, r0, #31
 800214e:	cmp	r0, #0
 8002150:	beq	#-18 <core::option::Option<T>::unwrap_or::h61fb8566d353c4d3+0x7a>
 8002152:	b	#-2 <core::option::Option<T>::unwrap_or::h61fb8566d353c4d3+0x8c>
 8002154:	movs	r0, #0
 8002156:	strb.w	r0, [sp, #39]
 800215a:	b	#-28 <core::option::Option<T>::unwrap_or::h61fb8566d353c4d3+0x7a>
 800215c:	b	#-30 <core::option::Option<T>::unwrap_or::h61fb8566d353c4d3+0x7a>

000000000800215e _ZN4core6result19Result$LT$T$C$E$GT$2ok17h9f17d1fecdd77f68E:
 800215e:	sub	sp, #16
 8002160:	mov	r1, r0
 8002162:	strb.w	r0, [sp, #10]
 8002166:	movs	r0, #0
 8002168:	strb.w	r0, [sp, #15]
 800216c:	movs	r0, #1
 800216e:	strb.w	r0, [sp, #15]
 8002172:	ldrb.w	r0, [sp, #10]
 8002176:	lsls	r2, r0, #31
 8002178:	cmp	r2, #0
 800217a:	str	r1, [sp, #4]
 800217c:	str	r0, [sp]
 800217e:	beq	#18 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9f17d1fecdd77f68E+0x36>
 8002180:	b	#-2 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9f17d1fecdd77f68E+0x24>
 8002182:	ldr	r0, [sp]
 8002184:	cmp	r0, #1
 8002186:	bne	#8 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9f17d1fecdd77f68E+0x34>
 8002188:	b	#-2 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9f17d1fecdd77f68E+0x2c>
 800218a:	movs	r0, #0
 800218c:	strb.w	r0, [sp, #11]
 8002190:	b	#44 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9f17d1fecdd77f68E+0x62>
 8002192:	trap
 8002194:	movs	r0, #0
 8002196:	strb.w	r0, [sp, #15]
 800219a:	movs	r0, #1
 800219c:	strb.w	r0, [sp, #11]
 80021a0:	b	#28 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9f17d1fecdd77f68E+0x62>
 80021a2:	ldrb.w	r0, [sp, #11]
 80021a6:	add	sp, #16
 80021a8:	bx	lr
 80021aa:	ldrb.w	r0, [sp, #15]
 80021ae:	lsls	r0, r0, #31
 80021b0:	cmp	r0, #0
 80021b2:	beq	#-20 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9f17d1fecdd77f68E+0x44>
 80021b4:	b	#-2 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9f17d1fecdd77f68E+0x58>
 80021b6:	movs	r0, #0
 80021b8:	strb.w	r0, [sp, #15]
 80021bc:	b	#-30 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9f17d1fecdd77f68E+0x44>
 80021be:	b	#-32 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9f17d1fecdd77f68E+0x44>
 80021c0:	ldrb.w	r0, [sp, #10]
 80021c4:	lsls	r0, r0, #31
 80021c6:	cmp	r0, #0
 80021c8:	beq	#-34 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9f17d1fecdd77f68E+0x4c>
 80021ca:	b	#-16 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17h9f17d1fecdd77f68E+0x60>

00000000080021cc core::ptr::read_volatile::h99dc49ea9e83e666:
 80021cc:	sub	sp, #16
 80021ce:	mov	r1, r0
 80021d0:	str	r0, [sp, #8]
 80021d2:	ldr	r0, [sp, #8]
 80021d4:	ldr	r0, [r0]
 80021d6:	str	r0, [sp, #12]
 80021d8:	ldr	r0, [sp, #12]
 80021da:	str	r1, [sp, #4]
 80021dc:	str	r0, [sp]
 80021de:	b	#-2 <core::ptr::read_volatile::h99dc49ea9e83e666+0x14>
 80021e0:	ldr	r0, [sp]
 80021e2:	add	sp, #16
 80021e4:	bx	lr

00000000080021e6 core::ptr::write_volatile::h722610f2aee5fe97:
 80021e6:	sub	sp, #16
 80021e8:	mov	r2, r1
 80021ea:	mov	r3, r0
 80021ec:	str	r0, [sp, #8]
 80021ee:	str	r1, [sp, #12]
 80021f0:	ldr	r0, [sp, #8]
 80021f2:	ldr	r1, [sp, #12]
 80021f4:	str	r1, [r0]
 80021f6:	str	r2, [sp, #4]
 80021f8:	str	r3, [sp]
 80021fa:	b	#-2 <core::ptr::write_volatile::h722610f2aee5fe97+0x16>
 80021fc:	add	sp, #16
 80021fe:	bx	lr

0000000008002200 core::ptr::slice_from_raw_parts::h9ae89b61365b370c:
 8002200:	sub	sp, #32
 8002202:	mov	r2, r1
 8002204:	mov	r3, r0
 8002206:	str	r0, [sp, #8]
 8002208:	str	r1, [sp, #12]
 800220a:	ldr	r0, [sp, #8]
 800220c:	ldr	r1, [sp, #12]
 800220e:	str	r0, [sp, #24]
 8002210:	str	r1, [sp, #28]
 8002212:	ldr	r0, [sp, #24]
 8002214:	ldr	r1, [sp, #28]
 8002216:	str	r0, [sp, #16]
 8002218:	str	r1, [sp, #20]
 800221a:	ldr	r0, [sp, #16]
 800221c:	ldr	r1, [sp, #20]
 800221e:	str	r2, [sp, #4]
 8002220:	str	r3, [sp]
 8002222:	add	sp, #32
 8002224:	bx	lr

0000000008002226 core::ptr::slice_from_raw_parts_mut::h53e1034a6e8f16f8:
 8002226:	sub	sp, #32
 8002228:	mov	r2, r1
 800222a:	mov	r3, r0
 800222c:	str	r0, [sp, #8]
 800222e:	str	r1, [sp, #12]
 8002230:	ldr	r0, [sp, #8]
 8002232:	ldr	r1, [sp, #12]
 8002234:	str	r0, [sp, #24]
 8002236:	str	r1, [sp, #28]
 8002238:	ldr	r0, [sp, #24]
 800223a:	ldr	r1, [sp, #28]
 800223c:	str	r0, [sp, #16]
 800223e:	str	r1, [sp, #20]
 8002240:	ldr	r0, [sp, #16]
 8002242:	ldr	r1, [sp, #20]
 8002244:	str	r2, [sp, #4]
 8002246:	str	r3, [sp]
 8002248:	add	sp, #32
 800224a:	bx	lr

000000000800224c core::ptr::<impl *mut T>::add::hdd539e33eea232e7:
 800224c:	push	{r7, lr}
 800224e:	sub	sp, #24
 8002250:	mov	r2, r1
 8002252:	mov	r3, r0
 8002254:	str	r0, [sp, #16]
 8002256:	str	r1, [sp, #20]
 8002258:	ldr	r0, [sp, #16]
 800225a:	ldr	r1, [sp, #20]
 800225c:	str	r2, [sp, #12]
 800225e:	str	r3, [sp, #8]
 8002260:	bl	#10
 8002264:	str	r0, [sp, #4]
 8002266:	b	#-2 <core::ptr::<impl *mut T>::add::hdd539e33eea232e7+0x1c>
 8002268:	ldr	r0, [sp, #4]
 800226a:	add	sp, #24
 800226c:	pop	{r7, pc}

000000000800226e core::ptr::<impl *mut T>::offset::hc997d9cbf077109e:
 800226e:	sub	sp, #24
 8002270:	mov	r2, r1
 8002272:	mov	r3, r0
 8002274:	str	r0, [sp, #12]
 8002276:	str	r1, [sp, #16]
 8002278:	ldr	r0, [sp, #12]
 800227a:	ldr	r1, [sp, #16]
 800227c:	add	r0, r1
 800227e:	str	r0, [sp, #20]
 8002280:	ldr	r0, [sp, #20]
 8002282:	str	r2, [sp, #8]
 8002284:	str	r3, [sp, #4]
 8002286:	str	r0, [sp]
 8002288:	b	#-2 <core::ptr::<impl *mut T>::offset::hc997d9cbf077109e+0x1c>
 800228a:	ldr	r0, [sp]
 800228c:	add	sp, #24
 800228e:	bx	lr

0000000008002290 core::ptr::<impl *const T>::offset::h03c19dcf39a3e098:
 8002290:	sub	sp, #24
 8002292:	mov	r2, r1
 8002294:	mov	r3, r0
 8002296:	str	r0, [sp, #12]
 8002298:	str	r1, [sp, #16]
 800229a:	ldr	r0, [sp, #12]
 800229c:	ldr	r1, [sp, #16]
 800229e:	add	r0, r1
 80022a0:	str	r0, [sp, #20]
 80022a2:	ldr	r0, [sp, #20]
 80022a4:	str	r2, [sp, #8]
 80022a6:	str	r3, [sp, #4]
 80022a8:	str	r0, [sp]
 80022aa:	b	#-2 <core::ptr::<impl *const T>::offset::h03c19dcf39a3e098+0x1c>
 80022ac:	ldr	r0, [sp]
 80022ae:	add	sp, #24
 80022b0:	bx	lr

00000000080022b2 core::num::<impl usize>::checked_mul::h318c8c98acfee9c5:
 80022b2:	push	{r7, lr}
 80022b4:	sub	sp, #40
 80022b6:	mov	r2, r1
 80022b8:	mov	r3, r0
 80022ba:	str	r0, [sp, #16]
 80022bc:	str	r1, [sp, #20]
 80022be:	ldr	r0, [sp, #16]
 80022c0:	ldr	r1, [sp, #20]
 80022c2:	str	r2, [sp, #12]
 80022c4:	str	r3, [sp, #8]
 80022c6:	bl	#114
 80022ca:	str	r0, [sp, #4]
 80022cc:	str	r1, [sp]
 80022ce:	b	#-2 <core::num::<impl usize>::checked_mul::h318c8c98acfee9c5+0x1e>
 80022d0:	ldr	r0, [sp, #4]
 80022d2:	str	r0, [sp, #32]
 80022d4:	ldr	r1, [sp]
 80022d6:	and	r2, r1, #1
 80022da:	strb.w	r2, [sp, #39]
 80022de:	ldrb.w	r2, [sp, #39]
 80022e2:	lsls	r2, r2, #31
 80022e4:	cmp	r2, #0
 80022e6:	bne	#10 <core::num::<impl usize>::checked_mul::h318c8c98acfee9c5+0x42>
 80022e8:	b	#-2 <core::num::<impl usize>::checked_mul::h318c8c98acfee9c5+0x38>
 80022ea:	ldr	r0, [sp, #32]
 80022ec:	str	r0, [sp, #28]
 80022ee:	movs	r0, #1
 80022f0:	str	r0, [sp, #24]
 80022f2:	b	#4 <core::num::<impl usize>::checked_mul::h318c8c98acfee9c5+0x48>
 80022f4:	movs	r0, #0
 80022f6:	str	r0, [sp, #24]
 80022f8:	b	#-2 <core::num::<impl usize>::checked_mul::h318c8c98acfee9c5+0x48>
 80022fa:	ldr	r0, [sp, #24]
 80022fc:	ldr	r1, [sp, #28]
 80022fe:	add	sp, #40
 8002300:	pop	{r7, pc}

0000000008002302 core::num::<impl usize>::saturating_mul::h1a826728d84a6dcd:
 8002302:	push	{r7, lr}
 8002304:	sub	sp, #32
 8002306:	mov	r2, r1
 8002308:	mov	r3, r0
 800230a:	str	r0, [sp, #24]
 800230c:	str	r1, [sp, #28]
 800230e:	ldr	r0, [sp, #24]
 8002310:	ldr	r1, [sp, #28]
 8002312:	str	r2, [sp, #20]
 8002314:	str	r3, [sp, #16]
 8002316:	bl	#-104
 800231a:	str	r0, [sp, #12]
 800231c:	str	r1, [sp, #8]
 800231e:	b	#-2 <core::num::<impl usize>::saturating_mul::h1a826728d84a6dcd+0x1e>
 8002320:	bl	#106
 8002324:	str	r0, [sp, #4]
 8002326:	b	#-2 <core::num::<impl usize>::saturating_mul::h1a826728d84a6dcd+0x26>
 8002328:	ldr	r0, [sp, #12]
 800232a:	ldr	r1, [sp, #8]
 800232c:	ldr	r2, [sp, #4]
 800232e:	bl	#-618
 8002332:	str	r0, [sp]
 8002334:	b	#-2 <core::num::<impl usize>::saturating_mul::h1a826728d84a6dcd+0x34>
 8002336:	ldr	r0, [sp]
 8002338:	add	sp, #32
 800233a:	pop	{r7, pc}

000000000800233c core::num::<impl usize>::overflowing_mul::hbdf7f7a727cb7e58:
 800233c:	sub	sp, #48
 800233e:	mov	r2, r1
 8002340:	mov	r3, r0
 8002342:	str	r0, [sp, #16]
 8002344:	str	r1, [sp, #20]
 8002346:	ldr	r0, [sp, #16]
 8002348:	ldr	r1, [sp, #20]
 800234a:	umull	r0, r1, r0, r1
 800234e:	cmp	r1, #0
 8002350:	it	ne
 8002352:	movne	r1, #1
 8002354:	str	r0, [sp, #40]
 8002356:	strb.w	r1, [sp, #44]
 800235a:	ldr	r0, [sp, #40]
 800235c:	ldrb.w	r1, [sp, #44]
 8002360:	str	r2, [sp, #12]
 8002362:	str	r3, [sp, #8]
 8002364:	str	r0, [sp, #4]
 8002366:	str	r1, [sp]
 8002368:	b	#-2 <core::num::<impl usize>::overflowing_mul::hbdf7f7a727cb7e58+0x2e>
 800236a:	ldr	r0, [sp, #4]
 800236c:	str	r0, [sp, #32]
 800236e:	ldr	r1, [sp]
 8002370:	and	r2, r1, #1
 8002374:	strb.w	r2, [sp, #39]
 8002378:	ldr	r2, [sp, #32]
 800237a:	ldrb.w	r3, [sp, #39]
 800237e:	str	r2, [sp, #24]
 8002380:	strb.w	r3, [sp, #28]
 8002384:	ldr	r0, [sp, #24]
 8002386:	ldrb.w	r1, [sp, #28]
 800238a:	add	sp, #48
 800238c:	bx	lr

000000000800238e core::num::<impl usize>::max_value::h9f44df04722e3b82:
 800238e:	mov.w	r0, #4294967295
 8002392:	bx	lr

0000000008002394 cortex_m::register::primask::Primask::is_active::h3d7e6bd169fb4535:
 8002394:	push	{r7, lr}
 8002396:	sub	sp, #16
 8002398:	mov	r1, r0
 800239a:	str	r0, [sp, #12]
 800239c:	ldr	r0, [sp, #12]
 800239e:	movw	r2, #17604
 80023a2:	movt	r2, #2048
 80023a6:	str	r1, [sp, #8]
 80023a8:	mov	r1, r2
 80023aa:	bl	#14
 80023ae:	str	r0, [sp, #4]
 80023b0:	b	#-2 <cortex_m::register::primask::Primask::is_active::h3d7e6bd169fb4535+0x1e>
 80023b2:	ldr	r0, [sp, #4]
 80023b4:	and	r0, r0, #1
 80023b8:	add	sp, #16
 80023ba:	pop	{r7, pc}

00000000080023bc <cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h360e78d3bdaa4876:
 80023bc:	sub	sp, #72
 80023be:	mov	r2, r1
 80023c0:	mov	r3, r0
 80023c2:	str	r0, [sp, #28]
 80023c4:	str	r1, [sp, #32]
 80023c6:	ldr	r0, [sp, #28]
 80023c8:	ldrb	r0, [r0]
 80023ca:	movs	r1, #0
 80023cc:	str	r1, [sp, #60]
 80023ce:	str	r0, [sp, #56]
 80023d0:	ldr	r0, [sp, #56]
 80023d2:	ldr	r1, [sp, #60]
 80023d4:	str	r2, [sp, #24]
 80023d6:	str	r3, [sp, #20]
 80023d8:	str	r0, [sp, #16]
 80023da:	str	r1, [sp, #12]
 80023dc:	b	#-2 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h360e78d3bdaa4876+0x22>
 80023de:	ldr	r0, [sp, #16]
 80023e0:	str	r0, [sp, #40]
 80023e2:	ldr	r1, [sp, #32]
 80023e4:	ldrb	r1, [r1]
 80023e6:	movs	r2, #0
 80023e8:	str	r2, [sp, #68]
 80023ea:	str	r1, [sp, #64]
 80023ec:	ldr	r1, [sp, #64]
 80023ee:	ldr	r2, [sp, #68]
 80023f0:	str	r1, [sp, #8]
 80023f2:	str	r2, [sp, #4]
 80023f4:	b	#-2 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h360e78d3bdaa4876+0x3a>
 80023f6:	ldr	r0, [sp, #8]
 80023f8:	str	r0, [sp, #44]
 80023fa:	ldr	r1, [sp, #40]
 80023fc:	ldr	r2, [sp, #44]
 80023fe:	cmp	r1, r2
 8002400:	bne	#16 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h360e78d3bdaa4876+0x58>
 8002402:	b	#-2 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h360e78d3bdaa4876+0x48>
 8002404:	ldr	r0, [sp, #28]
 8002406:	ldr	r1, [sp, #32]
 8002408:	str	r0, [sp, #48]
 800240a:	str	r1, [sp, #52]
 800240c:	movs	r0, #1
 800240e:	strb.w	r0, [sp, #39]
 8002412:	b	#6 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h360e78d3bdaa4876+0x60>
 8002414:	movs	r0, #0
 8002416:	strb.w	r0, [sp, #39]
 800241a:	b	#-2 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::h360e78d3bdaa4876+0x60>
 800241c:	ldrb.w	r0, [sp, #39]
 8002420:	add	sp, #72
 8002422:	bx	lr

0000000008002424 bare_metal::CriticalSection::new::h31ae88304a5b7e34:
 8002424:	sub	sp, #8
 8002426:	add	sp, #8
 8002428:	bx	lr

000000000800242a core::ptr::real_drop_in_place::h1f25fba0474631ff:
 800242a:	bx	lr

000000000800242c <T as core::any::Any>::type_id::he07eec883ff8c072:
 800242c:	movw	r0, #589
 8002430:	movw	r1, #18578
 8002434:	movt	r0, #9413
 8002438:	movt	r1, #58564
 800243c:	bx	lr

000000000800243e <core::panic::PanicInfo as core::fmt::Display>::fmt::h91759ab128e1ff9f:
 800243e:	push	{r4, r5, r6, lr}
 8002440:	sub	sp, #56
 8002442:	mov	r4, r1
 8002444:	mov	r5, r0
 8002446:	ldrd	r0, r1, [r1, #24]
 800244a:	movs	r2, #12
 800244c:	ldr	r3, [r1, #12]
 800244e:	movw	r1, #17680
 8002452:	movt	r1, #2048
 8002456:	blx	r3
 8002458:	cbz	r0, #2
 800245a:	movs	r6, #1
 800245c:	b	#182 <<core::panic::PanicInfo as core::fmt::Display>::fmt::h91759ab128e1ff9f+0xd8>
 800245e:	ldr	r0, [r5, #8]
 8002460:	cbz	r0, #10
 8002462:	str	r0, [sp, #4]
 8002464:	movw	r0, #12149
 8002468:	movt	r0, #2048
 800246c:	b	#42 <<core::panic::PanicInfo as core::fmt::Display>::fmt::h91759ab128e1ff9f+0x5c>
 800246e:	ldrd	r6, r0, [r5]
 8002472:	ldr	r1, [r0, #12]
 8002474:	mov	r0, r6
 8002476:	blx	r1
 8002478:	movw	r2, #38105
 800247c:	movt	r2, #4368
 8002480:	eors	r1, r2
 8002482:	movw	r2, #38756
 8002486:	movt	r2, #28848
 800248a:	eors	r0, r2
 800248c:	orrs	r0, r1
 800248e:	bne	#54 <<core::panic::PanicInfo as core::fmt::Display>::fmt::h91759ab128e1ff9f+0x8a>
 8002490:	movw	r0, #12187
 8002494:	str	r6, [sp, #4]
 8002496:	movt	r0, #2048
 800249a:	str	r0, [sp, #12]
 800249c:	add	r0, sp, #4
 800249e:	str	r0, [sp, #8]
 80024a0:	movs	r6, #1
 80024a2:	add	r2, sp, #8
 80024a4:	ldr	r0, [r4, #24]
 80024a6:	ldr	r1, [r4, #28]
 80024a8:	str	r6, [sp, #52]
 80024aa:	str	r2, [sp, #48]
 80024ac:	movs	r2, #0
 80024ae:	str	r2, [sp, #44]
 80024b0:	str	r2, [sp, #40]
 80024b2:	movs	r2, #2
 80024b4:	str	r2, [sp, #36]
 80024b6:	movw	r2, #17696
 80024ba:	movt	r2, #2048
 80024be:	str	r2, [sp, #32]
 80024c0:	add	r2, sp, #32
 80024c2:	bl	#334
 80024c6:	cbnz	r0, #76
 80024c8:	movw	r0, #12139
 80024cc:	add.w	r1, r5, #24
 80024d0:	movt	r0, #2048
 80024d4:	movs	r2, #3
 80024d6:	str	r0, [sp, #28]
 80024d8:	add	r3, sp, #8
 80024da:	strd	r0, r1, [sp, #20]
 80024de:	add.w	r0, r5, #20
 80024e2:	str	r0, [sp, #16]
 80024e4:	movw	r0, #12201
 80024e8:	movt	r0, #2048
 80024ec:	str	r0, [sp, #12]
 80024ee:	add.w	r0, r5, #12
 80024f2:	str	r0, [sp, #8]
 80024f4:	ldrd	r0, r1, [r4, #24]
 80024f8:	str	r2, [sp, #52]
 80024fa:	str	r3, [sp, #48]
 80024fc:	movs	r3, #0
 80024fe:	str	r3, [sp, #44]
 8002500:	strd	r2, r3, [sp, #36]
 8002504:	movw	r2, #17716
 8002508:	movt	r2, #2048
 800250c:	str	r2, [sp, #32]
 800250e:	add	r2, sp, #32
 8002510:	bl	#256
 8002514:	mov	r6, r0
 8002516:	mov	r0, r6
 8002518:	add	sp, #56
 800251a:	pop	{r4, r5, r6, pc}

000000000800251c core::panicking::panic::h2d0bc53a963fb996:
 800251c:	sub	sp, #48
 800251e:	ldm.w	r0, {r1, r2, r12, lr}
 8002522:	ldrd	r3, r0, [r0, #16]
 8002526:	strd	r1, r2, [sp, #24]
 800252a:	movw	r2, #17608
 800252e:	movs	r1, #0
 8002530:	movt	r2, #2048
 8002534:	str	r1, [sp, #20]
 8002536:	str	r2, [sp, #16]
 8002538:	strd	r1, r1, [sp, #8]
 800253c:	movs	r1, #1
 800253e:	str	r1, [sp, #4]
 8002540:	add	r1, sp, #24
 8002542:	str	r1, [sp]
 8002544:	add	r1, sp, #32
 8002546:	strd	r3, r0, [sp, #40]
 800254a:	mov	r0, sp
 800254c:	strd	r12, lr, [sp, #32]
 8002550:	bl	#66
 8002554:	trap

0000000008002556 core::panicking::panic_bounds_check::h0537ade040df571e:
 8002556:	sub	sp, #48
 8002558:	mov	r3, r0
 800255a:	movw	r0, #12139
 800255e:	strd	r1, r2, [sp]
 8002562:	movt	r0, #2048
 8002566:	mov	r1, sp
 8002568:	str	r0, [sp, #44]
 800256a:	strd	r0, r1, [sp, #36]
 800256e:	add	r0, sp, #4
 8002570:	str	r0, [sp, #32]
 8002572:	movs	r0, #2
 8002574:	add	r1, sp, #32
 8002576:	str	r0, [sp, #28]
 8002578:	str	r1, [sp, #24]
 800257a:	movs	r1, #0
 800257c:	str	r1, [sp, #20]
 800257e:	strd	r0, r1, [sp, #12]
 8002582:	movw	r0, #17760
 8002586:	movt	r0, #2048
 800258a:	mov	r1, r3
 800258c:	str	r0, [sp, #8]
 800258e:	add	r0, sp, #8
 8002590:	bl	#2
 8002594:	trap

0000000008002596 core::panicking::panic_fmt::h2daf88b2616ca2b2:
 8002596:	sub	sp, #32
 8002598:	ldrd	r12, r3, [r1]
 800259c:	ldrd	r2, r1, [r1, #8]
 80025a0:	str	r1, [sp, #28]
 80025a2:	strd	r3, r2, [sp, #20]
 80025a6:	strd	r0, r12, [sp, #12]
 80025aa:	movw	r0, #17664
 80025ae:	movt	r0, #2048
 80025b2:	str	r0, [sp, #8]
 80025b4:	movw	r0, #17608
 80025b8:	movt	r0, #2048
 80025bc:	str	r0, [sp, #4]
 80025be:	add	r0, sp, #4
 80025c0:	bl	#2544
 80025c4:	trap

00000000080025c6 core::slice::slice_index_order_fail::ha75fa70416d3bc2f:
 80025c6:	sub	sp, #48
 80025c8:	strd	r0, r1, [sp]
 80025cc:	movw	r0, #12139
 80025d0:	add	r1, sp, #4
 80025d2:	movt	r0, #2048
 80025d6:	str	r0, [sp, #44]
 80025d8:	strd	r0, r1, [sp, #36]
 80025dc:	mov	r0, sp
 80025de:	str	r0, [sp, #32]
 80025e0:	movs	r0, #2
 80025e2:	add	r1, sp, #32
 80025e4:	str	r0, [sp, #28]
 80025e6:	str	r1, [sp, #24]
 80025e8:	movs	r1, #0
 80025ea:	str	r1, [sp, #20]
 80025ec:	strd	r0, r1, [sp, #12]
 80025f0:	movw	r0, #17924
 80025f4:	movt	r0, #2048
 80025f8:	movw	r1, #17940
 80025fc:	str	r0, [sp, #8]
 80025fe:	add	r0, sp, #8
 8002600:	movt	r1, #2048
 8002604:	bl	#-114
 8002608:	trap

000000000800260a core::fmt::ArgumentV1::show_usize::h3b2e94afd2a6425d:
 800260a:	ldr	r0, [r0]
 800260c:	mov	r2, r1
 800260e:	movs	r1, #1
 8002610:	b.w	#2128 <core::fmt::num::imp::fmt_u32::h484e1bea1c7c9cc5>

0000000008002614 core::fmt::write::h85435378f7fd6609:
 8002614:	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8002618:	sub	sp, #52
 800261a:	movs	r3, #3
 800261c:	ldrd	r5, r4, [r2, #16]
 8002620:	strb.w	r3, [sp, #48]
 8002624:	movs	r3, #32
 8002626:	str	r3, [sp, #4]
 8002628:	movs	r3, #0
 800262a:	add.w	r12, sp, #24
 800262e:	str	r3, [sp]
 8002630:	strd	r5, r4, [sp, #40]
 8002634:	stm.w	r12, {r0, r1, r5}
 8002638:	ldr	r7, [r2, #8]
 800263a:	str	r3, [sp, #16]
 800263c:	cmp	r7, #0
 800263e:	str	r3, [sp, #8]
 8002640:	add.w	r3, r5, r4, lsl #3
 8002644:	str	r3, [sp, #36]
 8002646:	beq.w	#308 <core::fmt::write::h85435378f7fd6609+0x16a>
 800264a:	ldrd	r11, r10, [r2]
 800264e:	ldr	r4, [r2, #12]
 8002650:	cmp	r4, r10
 8002652:	it	hi
 8002654:	movhi	r4, r10
 8002656:	cmp	r4, #0
 8002658:	beq.w	#364 <core::fmt::write::h85435378f7fd6609+0x1b4>
 800265c:	ldrd	r3, r2, [r11]
 8002660:	ldr	r6, [r1, #12]
 8002662:	mov	r1, r3
 8002664:	blx	r6
 8002666:	cmp	r0, #0
 8002668:	bne.w	#374 <core::fmt::write::h85435378f7fd6609+0x1ce>
 800266c:	movw	r9, #9739
 8002670:	movs	r5, #0
 8002672:	movt	r9, #2048
 8002676:	mov	r8, sp
 8002678:	ldr	r0, [r7, #8]
 800267a:	str	r0, [sp, #4]
 800267c:	ldrb.w	r0, [r7, #32]
 8002680:	strb.w	r0, [sp, #48]
 8002684:	ldr	r0, [r7, #12]
 8002686:	str	r0, [sp]
 8002688:	ldr	r0, [r7, #24]
 800268a:	cmp	r0, #1
 800268c:	beq	#32 <core::fmt::write::h85435378f7fd6609+0x9c>
 800268e:	cmp	r0, #3
 8002690:	beq	#58 <core::fmt::write::h85435378f7fd6609+0xba>
 8002692:	cmp	r0, #2
 8002694:	bne	#58 <core::fmt::write::h85435378f7fd6609+0xbe>
 8002696:	ldrd	r0, r1, [sp, #32]
 800269a:	cmp	r0, r1
 800269c:	beq	#46 <core::fmt::write::h85435378f7fd6609+0xba>
 800269e:	add.w	r1, r0, #8
 80026a2:	str	r1, [sp, #32]
 80026a4:	ldr	r1, [r0, #4]
 80026a6:	cmp	r1, r9
 80026a8:	bne	#34 <core::fmt::write::h85435378f7fd6609+0xba>
 80026aa:	ldr	r0, [r0]
 80026ac:	ldr	r1, [r0]
 80026ae:	b	#34 <core::fmt::write::h85435378f7fd6609+0xc0>
 80026b0:	ldr	r2, [sp, #44]
 80026b2:	ldr	r1, [r7, #28]
 80026b4:	cmp	r1, r2
 80026b6:	bhs.w	#312 <core::fmt::write::h85435378f7fd6609+0x1de>
 80026ba:	ldr	r0, [sp, #40]
 80026bc:	add.w	r2, r0, r1, lsl #3
 80026c0:	ldr	r2, [r2, #4]
 80026c2:	cmp	r2, r9
 80026c4:	bne	#6 <core::fmt::write::h85435378f7fd6609+0xba>
 80026c6:	ldr.w	r0, [r0, r1, lsl #3]
 80026ca:	ldr	r1, [r0]
 80026cc:	b	#4 <core::fmt::write::h85435378f7fd6609+0xc0>
 80026ce:	movs	r0, #0
 80026d0:	b	#2 <core::fmt::write::h85435378f7fd6609+0xc2>
 80026d2:	ldr	r1, [r7, #28]
 80026d4:	movs	r0, #1
 80026d6:	strd	r0, r1, [sp, #8]
 80026da:	ldr	r0, [r7, #16]
 80026dc:	cmp	r0, #1
 80026de:	beq	#32 <core::fmt::write::h85435378f7fd6609+0xee>
 80026e0:	cmp	r0, #3
 80026e2:	beq	#56 <core::fmt::write::h85435378f7fd6609+0x10a>
 80026e4:	cmp	r0, #2
 80026e6:	bne	#56 <core::fmt::write::h85435378f7fd6609+0x10e>
 80026e8:	ldrd	r0, r1, [sp, #32]
 80026ec:	cmp	r0, r1
 80026ee:	beq	#44 <core::fmt::write::h85435378f7fd6609+0x10a>
 80026f0:	add.w	r1, r0, #8
 80026f4:	str	r1, [sp, #32]
 80026f6:	ldr	r1, [r0, #4]
 80026f8:	cmp	r1, r9
 80026fa:	bne	#32 <core::fmt::write::h85435378f7fd6609+0x10a>
 80026fc:	ldr	r0, [r0]
 80026fe:	ldr	r1, [r0]
 8002700:	b	#32 <core::fmt::write::h85435378f7fd6609+0x110>
 8002702:	ldr	r2, [sp, #44]
 8002704:	ldr	r1, [r7, #20]
 8002706:	cmp	r1, r2
 8002708:	bhs	#230 <core::fmt::write::h85435378f7fd6609+0x1de>
 800270a:	ldr	r0, [sp, #40]
 800270c:	add.w	r2, r0, r1, lsl #3
 8002710:	ldr	r2, [r2, #4]
 8002712:	cmp	r2, r9
 8002714:	bne	#6 <core::fmt::write::h85435378f7fd6609+0x10a>
 8002716:	ldr.w	r0, [r0, r1, lsl #3]
 800271a:	ldr	r1, [r0]
 800271c:	b	#4 <core::fmt::write::h85435378f7fd6609+0x110>
 800271e:	movs	r0, #0
 8002720:	b	#2 <core::fmt::write::h85435378f7fd6609+0x112>
 8002722:	ldr	r1, [r7, #20]
 8002724:	movs	r0, #1
 8002726:	strd	r0, r1, [sp, #16]
 800272a:	ldr	r0, [r7]
 800272c:	cmp	r0, #1
 800272e:	bne	#14 <core::fmt::write::h85435378f7fd6609+0x12c>
 8002730:	ldr	r2, [sp, #44]
 8002732:	ldr	r1, [r7, #4]
 8002734:	cmp	r1, r2
 8002736:	bhs	#198 <core::fmt::write::h85435378f7fd6609+0x1ec>
 8002738:	ldr	r0, [sp, #40]
 800273a:	add.w	r0, r0, r1, lsl #3
 800273e:	b	#12 <core::fmt::write::h85435378f7fd6609+0x13a>
 8002740:	ldrd	r0, r1, [sp, #32]
 8002744:	cmp	r0, r1
 8002746:	beq	#196 <core::fmt::write::h85435378f7fd6609+0x1fa>
 8002748:	add.w	r1, r0, #8
 800274c:	str	r1, [sp, #32]
 800274e:	adds	r1, r0, #4
 8002750:	ldr	r0, [r0]
 8002752:	ldr	r2, [r1]
 8002754:	mov	r1, r8
 8002756:	blx	r2
 8002758:	cmp	r0, #0
 800275a:	bne	#132 <core::fmt::write::h85435378f7fd6609+0x1ce>
 800275c:	adds	r6, r5, #1
 800275e:	cmp	r6, r4
 8002760:	bhs	#102 <core::fmt::write::h85435378f7fd6609+0x1b6>
 8002762:	ldrd	r0, r3, [sp, #24]
 8002766:	add.w	r2, r11, r5, lsl #3
 800276a:	ldrd	r1, r2, [r2, #8]
 800276e:	ldr	r3, [r3, #12]
 8002770:	blx	r3
 8002772:	adds	r7, #36
 8002774:	cmp	r0, #0
 8002776:	mov	r5, r6
 8002778:	beq.w	#-260 <core::fmt::write::h85435378f7fd6609+0x64>
 800277c:	b	#98 <core::fmt::write::h85435378f7fd6609+0x1ce>
 800277e:	ldrd	r11, r10, [r2]
 8002782:	cmp	r4, r10
 8002784:	it	hi
 8002786:	movhi	r4, r10
 8002788:	cbz	r4, #60
 800278a:	ldrd	r3, r2, [r11]
 800278e:	ldr	r7, [r1, #12]
 8002790:	mov	r1, r3
 8002792:	blx	r7
 8002794:	cbnz	r0, #74
 8002796:	movs	r7, #0
 8002798:	mov	r8, sp
 800279a:	add.w	r1, r5, r7, lsl #3
 800279e:	ldr.w	r0, [r5, r7, lsl #3]
 80027a2:	ldr	r2, [r1, #4]
 80027a4:	mov	r1, r8
 80027a6:	blx	r2
 80027a8:	cbnz	r0, #54
 80027aa:	adds	r6, r7, #1
 80027ac:	cmp	r6, r4
 80027ae:	bhs	#24 <core::fmt::write::h85435378f7fd6609+0x1b6>
 80027b0:	ldrd	r0, r3, [sp, #24]
 80027b4:	add.w	r2, r11, r7, lsl #3
 80027b8:	ldrd	r1, r2, [r2, #8]
 80027bc:	ldr	r3, [r3, #12]
 80027be:	blx	r3
 80027c0:	cmp	r0, #0
 80027c2:	mov	r7, r6
 80027c4:	beq	#-46 <core::fmt::write::h85435378f7fd6609+0x186>
 80027c6:	b	#24 <core::fmt::write::h85435378f7fd6609+0x1ce>
 80027c8:	movs	r6, #0
 80027ca:	cmp	r10, r6
 80027cc:	bls	#26 <core::fmt::write::h85435378f7fd6609+0x1d6>
 80027ce:	add.w	r2, r11, r6, lsl #3
 80027d2:	ldrd	r0, r3, [sp, #24]
 80027d6:	ldr.w	r1, [r11, r6, lsl #3]
 80027da:	ldr	r2, [r2, #4]
 80027dc:	ldr	r3, [r3, #12]
 80027de:	blx	r3
 80027e0:	cbz	r0, #6
 80027e2:	movs	r0, #1
 80027e4:	add	sp, #52
 80027e6:	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80027ea:	movs	r0, #0
 80027ec:	add	sp, #52
 80027ee:	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80027f2:	movw	r0, #18200
 80027f6:	movt	r0, #2048
 80027fa:	bl	#-680
 80027fe:	trap
 8002800:	movw	r0, #18184
 8002804:	movt	r0, #2048
 8002808:	bl	#-694
 800280c:	trap
 800280e:	movw	r0, #17840
 8002812:	movt	r0, #2048
 8002816:	bl	#-766
 800281a:	trap

000000000800281c core::fmt::Formatter::pad_integral::h253f31941eb77fc7:
 800281c:	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8002820:	sub	sp, #12
 8002822:	ldrd	r6, r9, [sp, #48]
 8002826:	mov	r7, r3
 8002828:	mov	r10, r2
 800282a:	mov	r4, r0
 800282c:	cbz	r1, #50
 800282e:	ldr.w	lr, [r4]
 8002832:	mov.w	r8, #43
 8002836:	ands	r1, lr, #1
 800283a:	it	eq
 800283c:	moveq.w	r8, #1114112
 8002840:	add.w	r11, r1, r9
 8002844:	lsls.w	r1, lr, #29
 8002848:	bpl	#40 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x58>
 800284a:	cbz	r7, #46
 800284c:	subs	r1, r7, #1
 800284e:	and	r12, r7, #3
 8002852:	cmp	r1, #3
 8002854:	bhs	#40 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x64>
 8002856:	movs	r1, #0
 8002858:	mov	r3, r10
 800285a:	cmp.w	r12, #0
 800285e:	bne	#108 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0xb2>
 8002860:	b	#154 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0xe2>
 8002862:	ldr.w	lr, [r4]
 8002866:	add.w	r11, r9, #1
 800286a:	mov.w	r8, #45
 800286e:	lsls.w	r1, lr, #29
 8002872:	bmi	#-44 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x2e>
 8002874:	mov.w	r10, #0
 8002878:	movs	r7, #0
 800287a:	b	#136 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0xea>
 800287c:	movs	r1, #0
 800287e:	b	#124 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0xe2>
 8002880:	strd	r9, r6, [sp, #4]
 8002884:	sub.w	r6, r12, r7
 8002888:	movs	r1, #0
 800288a:	mov	r3, r10
 800288c:	ldrb	r5, [r3]
 800288e:	ldrb	r2, [r3, #1]
 8002890:	ldrb	r0, [r3, #2]
 8002892:	and	r5, r5, #192
 8002896:	ldrb.w	r9, [r3, #3]
 800289a:	cmp	r5, #128
 800289c:	and	r2, r2, #192
 80028a0:	it	eq
 80028a2:	addeq	r1, #1
 80028a4:	cmp	r2, #128
 80028a6:	and	r0, r0, #192
 80028aa:	it	eq
 80028ac:	addeq	r1, #1
 80028ae:	cmp	r0, #128
 80028b0:	and	r0, r9, #192
 80028b4:	it	eq
 80028b6:	addeq	r1, #1
 80028b8:	cmp	r0, #128
 80028ba:	it	eq
 80028bc:	addeq	r1, #1
 80028be:	adds	r3, #4
 80028c0:	adds	r6, #4
 80028c2:	bne	#-58 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x70>
 80028c4:	ldrd	r9, r6, [sp, #4]
 80028c8:	cmp.w	r12, #0
 80028cc:	beq	#46 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0xe2>
 80028ce:	ldrb	r0, [r3]
 80028d0:	and	r0, r0, #192
 80028d4:	cmp	r0, #128
 80028d6:	it	eq
 80028d8:	addeq	r1, #1
 80028da:	cmp.w	r12, #1
 80028de:	beq	#28 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0xe2>
 80028e0:	ldrb	r0, [r3, #1]
 80028e2:	and	r0, r0, #192
 80028e6:	cmp	r0, #128
 80028e8:	it	eq
 80028ea:	addeq	r1, #1
 80028ec:	cmp.w	r12, #2
 80028f0:	beq	#10 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0xe2>
 80028f2:	ldrb	r0, [r3, #2]
 80028f4:	and	r0, r0, #192
 80028f8:	cmp	r0, #128
 80028fa:	it	eq
 80028fc:	addeq	r1, #1
 80028fe:	add.w	r0, r11, r7
 8002902:	sub.w	r11, r0, r1
 8002906:	ldr	r0, [r4, #8]
 8002908:	cmp	r0, #1
 800290a:	bne	#42 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x11c>
 800290c:	ldr	r5, [r4, #12]
 800290e:	cmp	r5, r11
 8002910:	bls	#36 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x11c>
 8002912:	lsls.w	r0, lr, #28
 8002916:	str	r6, [sp, #8]
 8002918:	bmi	#70 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x146>
 800291a:	ldrb.w	r0, [r4, #48]
 800291e:	sub.w	r11, r5, r11
 8002922:	cmp	r0, #3
 8002924:	it	eq
 8002926:	moveq	r0, #1
 8002928:	lsls	r1, r0, #30
 800292a:	beq	#108 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x17e>
 800292c:	cmp	r0, #2
 800292e:	beq	#108 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x182>
 8002930:	mov	r5, r11
 8002932:	mov.w	r11, #0
 8002936:	b	#112 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x18e>
 8002938:	mov	r0, r4
 800293a:	mov	r1, r8
 800293c:	mov	r2, r10
 800293e:	mov	r3, r7
 8002940:	bl	#290
 8002944:	cbz	r0, #8
 8002946:	movs	r6, #1
 8002948:	mov	r0, r6
 800294a:	add	sp, #12
 800294c:	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8002950:	ldr	r1, [r4, #28]
 8002952:	mov	r2, r9
 8002954:	ldr	r0, [r4, #24]
 8002956:	ldr	r3, [r1, #12]
 8002958:	mov	r1, r6
 800295a:	add	sp, #12
 800295c:	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8002960:	bx	r3
 8002962:	movs	r6, #1
 8002964:	movs	r0, #48
 8002966:	strb.w	r6, [r4, #48]
 800296a:	mov	r1, r8
 800296c:	str	r0, [r4, #4]
 800296e:	mov	r0, r4
 8002970:	mov	r2, r10
 8002972:	mov	r3, r7
 8002974:	bl	#238
 8002978:	cmp	r0, #0
 800297a:	bne	#-54 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x12c>
 800297c:	ldrb.w	r0, [r4, #48]
 8002980:	sub.w	r8, r5, r11
 8002984:	cmp	r0, #3
 8002986:	it	eq
 8002988:	moveq	r0, #1
 800298a:	lsls	r1, r0, #30
 800298c:	beq	#116 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x1e8>
 800298e:	cmp	r0, #2
 8002990:	beq	#116 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x1ec>
 8002992:	mov	r5, r8
 8002994:	mov.w	r8, #0
 8002998:	b	#120 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x1f8>
 800299a:	movs	r5, #0
 800299c:	b	#10 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x18e>
 800299e:	add.w	r0, r11, #1
 80029a2:	lsr.w	r5, r11, #1
 80029a6:	lsr.w	r11, r0, #1
 80029aa:	mov.w	r6, #4294967295
 80029ae:	adds	r6, #1
 80029b0:	cmp	r6, r5
 80029b2:	bhs	#14 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x1a8>
 80029b4:	ldr	r1, [r4, #4]
 80029b6:	ldrd	r0, r2, [r4, #24]
 80029ba:	ldr	r2, [r2, #16]
 80029bc:	blx	r2
 80029be:	cmp	r0, #0
 80029c0:	beq	#-22 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x192>
 80029c2:	b	#-128 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x12a>
 80029c4:	mov	r0, r4
 80029c6:	mov	r1, r8
 80029c8:	mov	r2, r10
 80029ca:	mov	r3, r7
 80029cc:	ldr	r5, [r4, #4]
 80029ce:	bl	#148
 80029d2:	cmp	r0, #0
 80029d4:	bne	#-146 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x12a>
 80029d6:	ldrd	r0, r1, [r4, #24]
 80029da:	mov	r2, r9
 80029dc:	ldr	r3, [r1, #12]
 80029de:	ldr	r1, [sp, #8]
 80029e0:	blx	r3
 80029e2:	cmp	r0, #0
 80029e4:	bne	#-162 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x12a>
 80029e6:	ldrd	r8, r4, [r4, #24]
 80029ea:	mov.w	r7, #4294967295
 80029ee:	movs	r6, #1
 80029f0:	adds	r7, #1
 80029f2:	cmp	r7, r11
 80029f4:	bhs	#106 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x246>
 80029f6:	ldr	r2, [r4, #16]
 80029f8:	mov	r0, r8
 80029fa:	mov	r1, r5
 80029fc:	blx	r2
 80029fe:	cmp	r0, #0
 8002a00:	beq	#-20 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x1d4>
 8002a02:	b	#-190 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x12c>
 8002a04:	movs	r5, #0
 8002a06:	b	#10 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x1f8>
 8002a08:	add.w	r0, r8, #1
 8002a0c:	lsr.w	r5, r8, #1
 8002a10:	lsr.w	r8, r0, #1
 8002a14:	mov.w	r6, #4294967295
 8002a18:	adds	r6, #1
 8002a1a:	cmp	r6, r5
 8002a1c:	bhs	#14 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x212>
 8002a1e:	ldr	r1, [r4, #4]
 8002a20:	ldrd	r0, r2, [r4, #24]
 8002a24:	ldr	r2, [r2, #16]
 8002a26:	blx	r2
 8002a28:	cmp	r0, #0
 8002a2a:	beq	#-22 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x1fc>
 8002a2c:	b	#-234 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x12a>
 8002a2e:	ldr.w	r10, [r4, #4]
 8002a32:	mov	r2, r9
 8002a34:	ldrd	r0, r1, [r4, #24]
 8002a38:	ldr	r3, [r1, #12]
 8002a3a:	ldr	r1, [sp, #8]
 8002a3c:	blx	r3
 8002a3e:	cmp	r0, #0
 8002a40:	bne.w	#-254 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x12a>
 8002a44:	ldrd	r7, r4, [r4, #24]
 8002a48:	mov.w	r5, #4294967295
 8002a4c:	movs	r6, #1
 8002a4e:	adds	r5, #1
 8002a50:	cmp	r5, r8
 8002a52:	bhs	#12 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x246>
 8002a54:	ldr	r2, [r4, #16]
 8002a56:	mov	r0, r7
 8002a58:	mov	r1, r10
 8002a5a:	blx	r2
 8002a5c:	cmp	r0, #0
 8002a5e:	beq	#-20 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x232>
 8002a60:	b	#-284 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x12c>
 8002a62:	movs	r6, #0
 8002a64:	b	#-288 <core::fmt::Formatter::pad_integral::h253f31941eb77fc7+0x12c>

0000000008002a66 core::fmt::Formatter::pad_integral::write_prefix::h8ff96a3030fbf13b:
 8002a66:	push	{r4, r5, r6, lr}
 8002a68:	mov	r4, r3
 8002a6a:	mov	r5, r2
 8002a6c:	mov	r6, r0
 8002a6e:	cmp.w	r1, #1114112
 8002a72:	beq	#12 <core::fmt::Formatter::pad_integral::write_prefix::h8ff96a3030fbf13b+0x1c>
 8002a74:	ldrd	r0, r2, [r6, #24]
 8002a78:	ldr	r2, [r2, #16]
 8002a7a:	blx	r2
 8002a7c:	cbz	r0, #2
 8002a7e:	movs	r0, #1
 8002a80:	pop	{r4, r5, r6, pc}
 8002a82:	cbz	r5, #14
 8002a84:	ldrd	r0, r1, [r6, #24]
 8002a88:	mov	r2, r4
 8002a8a:	ldr	r3, [r1, #12]
 8002a8c:	mov	r1, r5
 8002a8e:	pop.w	{r4, r5, r6, lr}
 8002a92:	bx	r3
 8002a94:	movs	r0, #0
 8002a96:	pop	{r4, r5, r6, pc}

0000000008002a98 core::fmt::Formatter::pad::h68a31bee2c5b56a5:
 8002a98:	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8002a9c:	sub	sp, #4
 8002a9e:	ldr.w	lr, [r0, #8]
 8002aa2:	mov	r10, r0
 8002aa4:	ldr	r0, [r0, #16]
 8002aa6:	mov	r9, r2
 8002aa8:	mov	r8, r1
 8002aaa:	cmp.w	lr, #1
 8002aae:	bne	#30 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x38>
 8002ab0:	cbnz	r0, #34
 8002ab2:	cmp.w	r9, #0
 8002ab6:	beq.w	#340 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x176>
 8002aba:	sub.w	r1, r9, #1
 8002abe:	and	r0, r9, #3
 8002ac2:	cmp	r1, #3
 8002ac4:	bhs	#192 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0xf0>
 8002ac6:	movs	r1, #0
 8002ac8:	mov	r2, r8
 8002aca:	cmp	r0, #0
 8002acc:	bne	#248 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x130>
 8002ace:	b	#318 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x178>
 8002ad0:	cmp	r0, #0
 8002ad2:	beq.w	#356 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x1a2>
 8002ad6:	cmp.w	r9, #0
 8002ada:	beq	#156 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0xe2>
 8002adc:	ldr.w	r0, [r10, #20]
 8002ae0:	add.w	r1, r8, r9
 8002ae4:	movs	r2, #0
 8002ae6:	mov	r7, r8
 8002ae8:	mvns	r3, r0
 8002aea:	mov	r0, r8
 8002aec:	mov	r4, r7
 8002aee:	ldrsb	r5, [r4], #1
 8002af2:	cmp.w	r5, #4294967295
 8002af6:	uxtb	r6, r5
 8002af8:	bgt	#80 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0xb4>
 8002afa:	cmp	r4, r1
 8002afc:	beq	#10 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x72>
 8002afe:	ldrb	r5, [r7, #1]
 8002b00:	adds	r4, r7, #2
 8002b02:	and	r5, r5, #63
 8002b06:	mov	r7, r4
 8002b08:	b	#2 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x76>
 8002b0a:	movs	r5, #0
 8002b0c:	mov	r7, r1
 8002b0e:	and	r11, r6, #31
 8002b12:	cmp	r6, #223
 8002b14:	bls	#14 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x8e>
 8002b16:	cmp	r7, r1
 8002b18:	beq	#16 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x94>
 8002b1a:	ldrb	r4, [r7], #1
 8002b1e:	and	r12, r4, #63
 8002b22:	mov	r4, r7
 8002b24:	b	#10 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x9a>
 8002b26:	orr.w	r6, r5, r11, lsl #6
 8002b2a:	b	#30 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0xb4>
 8002b2c:	mov.w	r12, #0
 8002b30:	mov	r7, r1
 8002b32:	orr.w	r5, r12, r5, lsl #6
 8002b36:	cmp	r6, #240
 8002b38:	blo	#12 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0xb0>
 8002b3a:	cmp	r7, r1
 8002b3c:	beq	#32 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0xc8>
 8002b3e:	ldrb	r6, [r7], #1
 8002b42:	and	r6, r6, #63
 8002b46:	b	#26 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0xcc>
 8002b48:	orr.w	r6, r5, r11, lsl #12
 8002b4c:	mov	r7, r4
 8002b4e:	adds	r3, #1
 8002b50:	beq	#162 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x15e>
 8002b52:	subs	r0, r2, r0
 8002b54:	cmp	r1, r7
 8002b56:	add.w	r2, r0, r7
 8002b5a:	mov	r0, r7
 8002b5c:	bne	#-116 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x54>
 8002b5e:	b	#154 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x164>
 8002b60:	movs	r6, #0
 8002b62:	mov	r7, r4
 8002b64:	mov.w	r4, #1835008
 8002b68:	and.w	r4, r4, r11, lsl #18
 8002b6c:	orr.w	r5, r4, r5, lsl #6
 8002b70:	add	r6, r5
 8002b72:	cmp.w	r6, #1114112
 8002b76:	bne	#-44 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0xb6>
 8002b78:	b	#128 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x164>
 8002b7a:	movs	r2, #0
 8002b7c:	cmp.w	lr, #0
 8002b80:	bne	#128 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x16c>
 8002b82:	ldrd	r0, r1, [r10, #24]
 8002b86:	b	#186 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x1ac>
 8002b88:	sub.w	r3, r0, r9
 8002b8c:	movs	r1, #0
 8002b8e:	mov	r2, r8
 8002b90:	ldrb	r7, [r2]
 8002b92:	ldrb	r6, [r2, #1]
 8002b94:	and	r7, r7, #192
 8002b98:	ldrb	r5, [r2, #2]
 8002b9a:	ldrb	r4, [r2, #3]
 8002b9c:	cmp	r7, #128
 8002b9e:	and	r7, r6, #192
 8002ba2:	it	eq
 8002ba4:	addeq	r1, #1
 8002ba6:	cmp	r7, #128
 8002ba8:	and	r7, r5, #192
 8002bac:	it	eq
 8002bae:	addeq	r1, #1
 8002bb0:	cmp	r7, #128
 8002bb2:	and	r7, r4, #192
 8002bb6:	it	eq
 8002bb8:	addeq	r1, #1
 8002bba:	cmp	r7, #128
 8002bbc:	it	eq
 8002bbe:	addeq	r1, #1
 8002bc0:	adds	r2, #4
 8002bc2:	adds	r3, #4
 8002bc4:	bne	#-56 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0xf8>
 8002bc6:	cbz	r0, #70
 8002bc8:	ldrb	r3, [r2]
 8002bca:	and	r3, r3, #192
 8002bce:	cmp	r3, #128
 8002bd0:	it	eq
 8002bd2:	addeq	r1, #1
 8002bd4:	cmp	r0, #1
 8002bd6:	beq	#54 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x178>
 8002bd8:	ldrb	r3, [r2, #1]
 8002bda:	and	r3, r3, #192
 8002bde:	cmp	r3, #128
 8002be0:	it	eq
 8002be2:	addeq	r1, #1
 8002be4:	cmp	r0, #2
 8002be6:	beq	#38 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x178>
 8002be8:	ldrb	r0, [r2, #2]
 8002bea:	and	r0, r0, #192
 8002bee:	cmp	r0, #128
 8002bf0:	it	eq
 8002bf2:	addeq	r1, #1
 8002bf4:	b	#24 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x178>
 8002bf6:	cmp.w	r6, #1114112
 8002bfa:	bne	#236 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x252>
 8002bfc:	mov	r2, r9
 8002bfe:	cmp.w	lr, #0
 8002c02:	beq	#-132 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0xea>
 8002c04:	mov	r9, r2
 8002c06:	cmp.w	r9, #0
 8002c0a:	bne.w	#-340 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x22>
 8002c0e:	movs	r1, #0
 8002c10:	ldr.w	r0, [r10, #12]
 8002c14:	sub.w	r1, r9, r1
 8002c18:	cmp	r1, r0
 8002c1a:	bhs	#28 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x1a2>
 8002c1c:	cmp.w	r9, #0
 8002c20:	beq	#44 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x1b8>
 8002c22:	sub.w	r1, r9, #1
 8002c26:	and	r12, r9, #3
 8002c2a:	cmp	r1, #3
 8002c2c:	bhs	#36 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x1bc>
 8002c2e:	movs	r1, #0
 8002c30:	mov	r3, r8
 8002c32:	cmp.w	r12, #0
 8002c36:	bne	#94 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x200>
 8002c38:	b	#140 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x230>
 8002c3a:	ldr.w	r1, [r10, #28]
 8002c3e:	mov	r2, r9
 8002c40:	ldr.w	r0, [r10, #24]
 8002c44:	ldr	r3, [r1, #12]
 8002c46:	mov	r1, r8
 8002c48:	add	sp, #4
 8002c4a:	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8002c4e:	bx	r3
 8002c50:	movs	r1, #0
 8002c52:	b	#114 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x230>
 8002c54:	sub.w	r7, r12, r9
 8002c58:	movs	r1, #0
 8002c5a:	mov	r3, r8
 8002c5c:	ldrb	r6, [r3]
 8002c5e:	ldrb	r5, [r3, #1]
 8002c60:	and	r6, r6, #192
 8002c64:	ldrb	r4, [r3, #2]
 8002c66:	ldrb	r2, [r3, #3]
 8002c68:	cmp	r6, #128
 8002c6a:	and	r6, r5, #192
 8002c6e:	it	eq
 8002c70:	addeq	r1, #1
 8002c72:	cmp	r6, #128
 8002c74:	and	r6, r4, #192
 8002c78:	it	eq
 8002c7a:	addeq	r1, #1
 8002c7c:	cmp	r6, #128
 8002c7e:	and	r2, r2, #192
 8002c82:	it	eq
 8002c84:	addeq	r1, #1
 8002c86:	cmp	r2, #128
 8002c88:	it	eq
 8002c8a:	addeq	r1, #1
 8002c8c:	adds	r3, #4
 8002c8e:	adds	r7, #4
 8002c90:	bne	#-56 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x1c4>
 8002c92:	cmp.w	r12, #0
 8002c96:	beq	#46 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x230>
 8002c98:	ldrb	r2, [r3]
 8002c9a:	and	r2, r2, #192
 8002c9e:	cmp	r2, #128
 8002ca0:	it	eq
 8002ca2:	addeq	r1, #1
 8002ca4:	cmp.w	r12, #1
 8002ca8:	beq	#28 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x230>
 8002caa:	ldrb	r2, [r3, #1]
 8002cac:	and	r2, r2, #192
 8002cb0:	cmp	r2, #128
 8002cb2:	it	eq
 8002cb4:	addeq	r1, #1
 8002cb6:	cmp.w	r12, #2
 8002cba:	beq	#10 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x230>
 8002cbc:	ldrb	r2, [r3, #2]
 8002cbe:	and	r2, r2, #192
 8002cc2:	cmp	r2, #128
 8002cc4:	it	eq
 8002cc6:	addeq	r1, #1
 8002cc8:	ldrb.w	r3, [r10, #48]
 8002ccc:	sub.w	r1, r1, r9
 8002cd0:	add.w	r11, r1, r0
 8002cd4:	subs	r2, r3, #3
 8002cd6:	it	ne
 8002cd8:	movne	r2, r3
 8002cda:	lsls	r3, r2, #30
 8002cdc:	beq	#22 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x25e>
 8002cde:	cmp	r2, #2
 8002ce0:	beq	#22 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x262>
 8002ce2:	mov	r4, r11
 8002ce4:	mov.w	r11, #0
 8002ce8:	b	#26 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x26e>
 8002cea:	cmp	r2, #0
 8002cec:	it	ne
 8002cee:	cmpne	r2, r9
 8002cf0:	bne	#106 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x2c6>
 8002cf2:	mov	r0, r8
 8002cf4:	b	#120 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x2d8>
 8002cf6:	movs	r4, #0
 8002cf8:	b	#10 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x26e>
 8002cfa:	add.w	r0, r11, #1
 8002cfe:	lsr.w	r4, r11, #1
 8002d02:	lsr.w	r11, r0, #1
 8002d06:	mov.w	r5, #4294967295
 8002d0a:	adds	r5, #1
 8002d0c:	cmp	r5, r4
 8002d0e:	bhs	#16 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x28a>
 8002d10:	ldr.w	r1, [r10, #4]
 8002d14:	ldrd	r0, r2, [r10, #24]
 8002d18:	ldr	r2, [r2, #16]
 8002d1a:	blx	r2
 8002d1c:	cmp	r0, #0
 8002d1e:	beq	#-24 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x272>
 8002d20:	b	#42 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x2b6>
 8002d22:	ldr.w	r7, [r10, #4]
 8002d26:	mov	r2, r9
 8002d28:	ldrd	r0, r1, [r10, #24]
 8002d2c:	ldr	r3, [r1, #12]
 8002d2e:	mov	r1, r8
 8002d30:	blx	r3
 8002d32:	cbnz	r0, #24
 8002d34:	ldrd	r4, r5, [r10, #24]
 8002d38:	mov.w	r6, #4294967295
 8002d3c:	adds	r6, #1
 8002d3e:	cmp	r6, r11
 8002d40:	bhs	#18 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x2be>
 8002d42:	ldr	r2, [r5, #16]
 8002d44:	mov	r0, r4
 8002d46:	mov	r1, r7
 8002d48:	blx	r2
 8002d4a:	cmp	r0, #0
 8002d4c:	beq	#-20 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x2a4>
 8002d4e:	movs	r0, #1
 8002d50:	add	sp, #4
 8002d52:	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8002d56:	movs	r0, #0
 8002d58:	add	sp, #4
 8002d5a:	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8002d5e:	cmp	r2, r9
 8002d60:	bhs	#8 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x2d4>
 8002d62:	ldrsb.w	r0, [r8, r2]
 8002d66:	cmn.w	r0, #64
 8002d6a:	bge	#-124 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x25a>
 8002d6c:	movs	r2, #0
 8002d6e:	movs	r0, #0
 8002d70:	cmp	r0, #0
 8002d72:	ite	eq
 8002d74:	moveq	r2, r9
 8002d76:	movne	r8, r0
 8002d78:	cmp.w	lr, #0
 8002d7c:	bne.w	#-380 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0x16c>
 8002d80:	b	#-514 <core::fmt::Formatter::pad::h68a31bee2c5b56a5+0xea>

0000000008002d82 <str as core::fmt::Display>::fmt::h577afea2e317d7b6:
 8002d82:	mov	r3, r1
 8002d84:	mov	r1, r0
 8002d86:	mov	r0, r2
 8002d88:	mov	r2, r3
 8002d8a:	b.w	#-758 <core::fmt::Formatter::pad::h68a31bee2c5b56a5>

0000000008002d8e core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::he56e14dce1b7da68:
 8002d8e:	push	{r4, r5, r7, lr}
 8002d90:	sub	sp, #136
 8002d92:	ldr	r0, [r0]
 8002d94:	add.w	lr, sp, #8
 8002d98:	mov	r12, r1
 8002d9a:	movs	r3, #129
 8002d9c:	movs	r1, #0
 8002d9e:	and	r2, r0, #15
 8002da2:	add.w	r4, r2, #55
 8002da6:	cmp	r2, #10
 8002da8:	it	lo
 8002daa:	addlo.w	r4, r2, #48
 8002dae:	add.w	r2, lr, r3
 8002db2:	cmp.w	r1, r0, lsr #4
 8002db6:	strb	r4, [r2, #-2]
 8002dba:	beq	#96 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::he56e14dce1b7da68+0x90>
 8002dbc:	lsrs	r4, r0, #4
 8002dbe:	and	r4, r4, #15
 8002dc2:	add.w	r5, r4, #55
 8002dc6:	cmp	r4, #10
 8002dc8:	it	lo
 8002dca:	addlo.w	r5, r4, #48
 8002dce:	cmp.w	r1, r0, lsr #8
 8002dd2:	strb	r5, [r2, #-3]
 8002dd6:	beq	#80 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::he56e14dce1b7da68+0x9c>
 8002dd8:	lsrs	r4, r0, #8
 8002dda:	and	r4, r4, #15
 8002dde:	add.w	r5, r4, #55
 8002de2:	cmp	r4, #10
 8002de4:	it	lo
 8002de6:	addlo.w	r5, r4, #48
 8002dea:	cmp.w	r1, r0, lsr #12
 8002dee:	strb	r5, [r2, #-4]
 8002df2:	beq	#62 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::he56e14dce1b7da68+0xa6>
 8002df4:	lsrs	r4, r0, #12
 8002df6:	subs	r3, #4
 8002df8:	and	r4, r4, #15
 8002dfc:	add.w	r5, r4, #55
 8002e00:	cmp	r4, #10
 8002e02:	it	lo
 8002e04:	addlo.w	r5, r4, #48
 8002e08:	strb	r5, [r2, #-5]
 8002e0c:	lsrs	r2, r0, #16
 8002e0e:	cmp.w	r1, r0, lsr #16
 8002e12:	mov	r0, r2
 8002e14:	bne	#-122 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::he56e14dce1b7da68+0x10>
 8002e16:	subs	r0, r3, #1
 8002e18:	cmp	r0, #129
 8002e1a:	blo	#30 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::he56e14dce1b7da68+0xae>
 8002e1c:	b	#60 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::he56e14dce1b7da68+0xce>
 8002e1e:	subs	r1, r3, #1
 8002e20:	subs	r0, r3, #2
 8002e22:	mov	r3, r1
 8002e24:	cmp	r0, #129
 8002e26:	blo	#18 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::he56e14dce1b7da68+0xae>
 8002e28:	b	#48 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::he56e14dce1b7da68+0xce>
 8002e2a:	subs	r0, r3, #3
 8002e2c:	subs	r3, #2
 8002e2e:	cmp	r0, #129
 8002e30:	blo	#8 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::he56e14dce1b7da68+0xae>
 8002e32:	b	#38 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::he56e14dce1b7da68+0xce>
 8002e34:	subs	r0, r3, #4
 8002e36:	subs	r3, #3
 8002e38:	cmp	r0, #129
 8002e3a:	bhs	#30 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::he56e14dce1b7da68+0xce>
 8002e3c:	rsb.w	r1, r3, #129
 8002e40:	movw	r2, #17956
 8002e44:	add	r0, lr
 8002e46:	movt	r2, #2048
 8002e4a:	strd	r0, r1, [sp]
 8002e4e:	mov	r0, r12
 8002e50:	movs	r1, #1
 8002e52:	movs	r3, #2
 8002e54:	bl	#-1596
 8002e58:	add	sp, #136
 8002e5a:	pop	{r4, r5, r7, pc}
 8002e5c:	movs	r1, #128
 8002e5e:	bl	#-2204
 8002e62:	trap

0000000008002e64 core::fmt::num::imp::fmt_u32::h484e1bea1c7c9cc5:
 8002e64:	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8002e68:	sub	sp, #60
 8002e6a:	mov	r6, r1
 8002e6c:	movw	r1, #10000
 8002e70:	mov	r7, r2
 8002e72:	cmp	r0, r1
 8002e74:	blo	#138 <core::fmt::num::imp::fmt_u32::h484e1bea1c7c9cc5+0x9e>
 8002e76:	movw	r8, #5977
 8002e7a:	movw	r9, #34079
 8002e7e:	movw	lr, #57599
 8002e82:	strd	r6, r7, [sp, #12]
 8002e86:	movw	r6, #17958
 8002e8a:	add.w	r11, sp, #21
 8002e8e:	movs	r3, #0
 8002e90:	movt	r8, #53687
 8002e94:	movt	r9, #20971
 8002e98:	mov.w	r10, #100
 8002e9c:	movt	r6, #2048
 8002ea0:	movt	lr, #1525
 8002ea4:	umull	r4, r5, r0, r8
 8002ea8:	add.w	r2, r11, r3
 8002eac:	subs	r3, #4
 8002eae:	cmp	r0, lr
 8002eb0:	lsr.w	r4, r5, #13
 8002eb4:	mls	r5, r4, r1, r0
 8002eb8:	mov	r0, r4
 8002eba:	umull	r7, r12, r5, r9
 8002ebe:	lsr.w	r7, r12, #5
 8002ec2:	mls	r5, r7, r10, r5
 8002ec6:	ldrh.w	r7, [r6, r7, lsl #1]
 8002eca:	strh.w	r7, [r2, #35]
 8002ece:	ldrh.w	r5, [r6, r5, lsl #1]
 8002ed2:	strh.w	r5, [r2, #37]
 8002ed6:	bhi	#-54 <core::fmt::num::imp::fmt_u32::h484e1bea1c7c9cc5+0x40>
 8002ed8:	ldrd	r6, r7, [sp, #12]
 8002edc:	add.w	r2, r3, #39
 8002ee0:	mov	r0, r4
 8002ee2:	cmp	r0, #100
 8002ee4:	bge	#32 <core::fmt::num::imp::fmt_u32::h484e1bea1c7c9cc5+0xa4>
 8002ee6:	mov	r3, r0
 8002ee8:	cmp	r3, #10
 8002eea:	blt	#74 <core::fmt::num::imp::fmt_u32::h484e1bea1c7c9cc5+0xd4>
 8002eec:	movw	r1, #17958
 8002ef0:	subs	r0, r2, #2
 8002ef2:	movt	r1, #2048
 8002ef6:	add.w	r2, sp, #21
 8002efa:	ldrh.w	r1, [r1, r3, lsl #1]
 8002efe:	strh	r1, [r2, r0]
 8002f00:	b	#64 <core::fmt::num::imp::fmt_u32::h484e1bea1c7c9cc5+0xe0>
 8002f02:	movs	r2, #39
 8002f04:	cmp	r0, #100
 8002f06:	blt	#-36 <core::fmt::num::imp::fmt_u32::h484e1bea1c7c9cc5+0x82>
 8002f08:	movw	r3, #34079
 8002f0c:	uxth	r1, r0
 8002f0e:	movt	r3, #20971
 8002f12:	subs	r2, #2
 8002f14:	umull	r1, r3, r1, r3
 8002f18:	movs	r1, #100
 8002f1a:	lsrs	r3, r3, #5
 8002f1c:	mls	r0, r3, r1, r0
 8002f20:	movw	r1, #17958
 8002f24:	movt	r1, #2048
 8002f28:	uxth	r0, r0
 8002f2a:	ldrh.w	r0, [r1, r0, lsl #1]
 8002f2e:	add.w	r1, sp, #21
 8002f32:	strh	r0, [r1, r2]
 8002f34:	cmp	r3, #10
 8002f36:	bge	#-78 <core::fmt::num::imp::fmt_u32::h484e1bea1c7c9cc5+0x88>
 8002f38:	subs	r0, r2, #1
 8002f3a:	add.w	r2, sp, #21
 8002f3e:	add.w	r1, r3, #48
 8002f42:	strb	r1, [r2, r0]
 8002f44:	rsb.w	r1, r0, #39
 8002f48:	add.w	r2, sp, #21
 8002f4c:	add	r0, r2
 8002f4e:	movw	r2, #17608
 8002f52:	strd	r0, r1, [sp]
 8002f56:	movt	r2, #2048
 8002f5a:	mov	r0, r7
 8002f5c:	mov	r1, r6
 8002f5e:	movs	r3, #0
 8002f60:	bl	#-1864
 8002f64:	add	sp, #60
 8002f66:	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

0000000008002f6a core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::h0a974ddb9c67948c:
 8002f6a:	ldr	r0, [r0]
 8002f6c:	mov	r2, r1
 8002f6e:	movs	r1, #1
 8002f70:	b.w	#-272 <core::fmt::num::imp::fmt_u32::h484e1bea1c7c9cc5>

0000000008002f74 <&T as core::fmt::Display>::fmt::h1c37b762719b6d18:
 8002f74:	push.w	{r4, r5, r6, r7, r8, lr}
 8002f78:	sub	sp, #24
 8002f7a:	ldrd	r12, r1, [r1, #24]
 8002f7e:	mov	r2, sp
 8002f80:	ldr.w	lr, [r0]
 8002f84:	mov	r3, r2
 8002f86:	ldm.w	lr, {r0, r4, r5, r6, r7, r8}
 8002f8a:	stm.w	r3, {r0, r4, r5, r6, r7, r8}
 8002f8e:	mov	r0, r12
 8002f90:	bl	#-2432
 8002f94:	add	sp, #24
 8002f96:	pop.w	{r4, r5, r6, r7, r8, pc}

0000000008002f9a <&T as core::fmt::Display>::fmt::h4bbe11f26e1a2f67:
 8002f9a:	ldr	r0, [r0]
 8002f9c:	mov	r3, r1
 8002f9e:	ldrd	r1, r2, [r0]
 8002fa2:	mov	r0, r3
 8002fa4:	b.w	#-1296 <core::fmt::Formatter::pad::h68a31bee2c5b56a5>

0000000008002fa8 <&T as core::fmt::Display>::fmt::hed71d2a217ac485c:
 8002fa8:	mov	r3, r1
 8002faa:	ldrd	r1, r2, [r0]
 8002fae:	mov	r0, r3
 8002fb0:	b.w	#-1308 <core::fmt::Formatter::pad::h68a31bee2c5b56a5>

0000000008002fb4 rust_begin_unwind:
 8002fb4:	sub	sp, #80
 8002fb6:	mov	r1, r0
 8002fb8:	str	r0, [sp, #24]
 8002fba:	str	r1, [sp, #20]
 8002fbc:	bl	#3512
 8002fc0:	b	#-2 <rust_begin_unwind+0xe>
 8002fc2:	bl	#566
 8002fc6:	str	r1, [sp, #32]
 8002fc8:	str	r0, [sp, #28]
 8002fca:	b	#-2 <rust_begin_unwind+0x18>
 8002fcc:	ldr	r0, [sp, #28]
 8002fce:	cmp	r0, #0
 8002fd0:	bne	#94 <rust_begin_unwind+0x7e>
 8002fd2:	b	#-2 <rust_begin_unwind+0x20>
 8002fd4:	ldr	r0, [sp, #32]
 8002fd6:	str	r0, [sp, #36]
 8002fd8:	add	r0, sp, #24
 8002fda:	str	r0, [sp, #72]
 8002fdc:	ldr	r0, [sp, #72]
 8002fde:	str	r0, [sp, #76]
 8002fe0:	ldr	r0, [sp, #76]
 8002fe2:	movw	r1, #15571
 8002fe6:	movt	r1, #2048
 8002fea:	bl	#3340
 8002fee:	str	r0, [sp, #16]
 8002ff0:	str	r1, [sp, #12]
 8002ff2:	b	#-2 <rust_begin_unwind+0x40>
 8002ff4:	ldr	r0, [sp, #16]
 8002ff6:	str	r0, [sp, #64]
 8002ff8:	ldr	r1, [sp, #12]
 8002ffa:	str	r1, [sp, #68]
 8002ffc:	mov	r2, sp
 8002ffe:	movs	r3, #1
 8003000:	str	r3, [r2]
 8003002:	movw	r1, #18220
 8003006:	movt	r1, #2048
 800300a:	add	r0, sp, #40
 800300c:	movs	r2, #2
 800300e:	add	r3, sp, #64
 8003010:	bl	#3352
 8003014:	b	#-2 <rust_begin_unwind+0x62>
 8003016:	add	r0, sp, #36
 8003018:	add	r1, sp, #40
 800301a:	bl	#108
 800301e:	str	r0, [sp, #8]
 8003020:	b	#-2 <rust_begin_unwind+0x6e>
 8003022:	ldr	r0, [sp, #8]
 8003024:	and	r0, r0, #1
 8003028:	bl	#-3790
 800302c:	str	r0, [sp, #4]
 800302e:	b	#-2 <rust_begin_unwind+0x7c>
 8003030:	b	#-2 <rust_begin_unwind+0x7e>
 8003032:	bl	#-4172
 8003036:	b	#-2 <rust_begin_unwind+0x84>
 8003038:	b	#-2 <rust_begin_unwind+0x86>
 800303a:	b	#-4 <rust_begin_unwind+0x86>

000000000800303c core::fmt::Write::write_char::hd38ec41501477ac9:
 800303c:	push	{r7, lr}
 800303e:	sub	sp, #40
 8003040:	mov	r2, r1
 8003042:	mov	r3, r0
 8003044:	str	r0, [sp, #28]
 8003046:	str	r1, [sp, #32]
 8003048:	ldr	r0, [sp, #28]
 800304a:	ldr	r1, [sp, #32]
 800304c:	mov.w	r12, #0
 8003050:	str.w	r12, [sp, #36]
 8003054:	add.w	r12, sp, #36
 8003058:	mov.w	lr, #4
 800305c:	str	r0, [sp, #24]
 800305e:	mov	r0, r1
 8003060:	mov	r1, r12
 8003062:	str	r2, [sp, #20]
 8003064:	mov	r2, lr
 8003066:	str	r3, [sp, #16]
 8003068:	bl	#984
 800306c:	str	r0, [sp, #12]
 800306e:	str	r1, [sp, #8]
 8003070:	b	#-2 <core::fmt::Write::write_char::hd38ec41501477ac9+0x36>
 8003072:	ldr	r0, [sp, #24]
 8003074:	ldr	r1, [sp, #12]
 8003076:	ldr	r2, [sp, #8]
 8003078:	bl	#284
 800307c:	str	r0, [sp, #4]
 800307e:	b	#-2 <core::fmt::Write::write_char::hd38ec41501477ac9+0x44>
 8003080:	ldr	r0, [sp, #4]
 8003082:	and	r0, r0, #1
 8003086:	add	sp, #40
 8003088:	pop	{r7, pc}

000000000800308a core::fmt::Write::write_fmt::hae614a12d345bbe1:
 800308a:	push.w	{r4, r5, r6, r7, r8, lr}
 800308e:	sub	sp, #48
 8003090:	mov	r2, r1
 8003092:	mov	r3, r0
 8003094:	str	r0, [sp, #20]
 8003096:	add	r0, sp, #24
 8003098:	mov	r12, r0
 800309a:	ldm.w	r1, {r4, r5, r6, r7, r8, lr}
 800309e:	stm.w	r12, {r4, r5, r6, r7, r8, lr}
 80030a2:	movw	r1, #18236
 80030a6:	movt	r1, #2048
 80030aa:	add.w	r12, sp, #20
 80030ae:	str	r0, [sp, #16]
 80030b0:	mov	r0, r12
 80030b2:	ldr.w	r12, [sp, #16]
 80030b6:	str	r2, [sp, #12]
 80030b8:	mov	r2, r12
 80030ba:	str	r3, [sp, #8]
 80030bc:	bl	#-2732
 80030c0:	str	r0, [sp, #4]
 80030c2:	b	#-2 <core::fmt::Write::write_fmt::hae614a12d345bbe1+0x3a>
 80030c4:	ldr	r0, [sp, #4]
 80030c6:	and	r0, r0, #1
 80030ca:	add	sp, #48
 80030cc:	pop.w	{r4, r5, r6, r7, r8, pc}

00000000080030d0 <&mut W as core::fmt::Write>::write_char::h51808b160651ed04:
 80030d0:	push	{r7, lr}
 80030d2:	sub	sp, #24
 80030d4:	mov	r2, r1
 80030d6:	mov	r3, r0
 80030d8:	str	r0, [sp, #16]
 80030da:	str	r1, [sp, #20]
 80030dc:	ldr	r0, [sp, #16]
 80030de:	ldr	r0, [r0]
 80030e0:	ldr	r1, [sp, #20]
 80030e2:	str	r2, [sp, #12]
 80030e4:	str	r3, [sp, #8]
 80030e6:	bl	#-174
 80030ea:	str	r0, [sp, #4]
 80030ec:	b	#-2 <<&mut W as core::fmt::Write>::write_char::h51808b160651ed04+0x1e>
 80030ee:	ldr	r0, [sp, #4]
 80030f0:	and	r0, r0, #1
 80030f4:	add	sp, #24
 80030f6:	pop	{r7, pc}

00000000080030f8 <&mut W as core::fmt::Write>::write_fmt::h6e44107888d6acd8:
 80030f8:	push.w	{r4, r5, r6, r7, r8, r9, lr}
 80030fc:	sub	sp, #44
 80030fe:	mov	r2, r1
 8003100:	mov	r3, r0
 8003102:	str	r0, [sp, #16]
 8003104:	ldr	r0, [sp, #16]
 8003106:	ldr	r0, [r0]
 8003108:	add.w	r12, sp, #20
 800310c:	mov	lr, r12
 800310e:	ldm.w	r1, {r4, r5, r6, r7, r8, r9}
 8003112:	stm.w	lr, {r4, r5, r6, r7, r8, r9}
 8003116:	mov	r1, r12
 8003118:	str	r2, [sp, #12]
 800311a:	str	r3, [sp, #8]
 800311c:	bl	#-150
 8003120:	str	r0, [sp, #4]
 8003122:	b	#-2 <<&mut W as core::fmt::Write>::write_fmt::h6e44107888d6acd8+0x2c>
 8003124:	ldr	r0, [sp, #4]
 8003126:	and	r0, r0, #1
 800312a:	add	sp, #44
 800312c:	pop.w	{r4, r5, r6, r7, r8, r9, pc}

0000000008003130 <&mut W as core::fmt::Write>::write_str::hb569839eacb69270:
 8003130:	push	{r7, lr}
 8003132:	sub	sp, #32
 8003134:	mov	r3, r2
 8003136:	mov	r12, r1
 8003138:	mov	lr, r0
 800313a:	str	r0, [sp, #20]
 800313c:	str	r1, [sp, #24]
 800313e:	str	r2, [sp, #28]
 8003140:	ldr	r0, [sp, #20]
 8003142:	ldr	r0, [r0]
 8003144:	ldr	r1, [sp, #24]
 8003146:	ldr	r2, [sp, #28]
 8003148:	str	r3, [sp, #16]
 800314a:	str.w	r12, [sp, #12]
 800314e:	str.w	lr, [sp, #8]
 8003152:	bl	#66
 8003156:	str	r0, [sp, #4]
 8003158:	b	#-2 <<&mut W as core::fmt::Write>::write_str::hb569839eacb69270+0x2a>
 800315a:	ldr	r0, [sp, #4]
 800315c:	and	r0, r0, #1
 8003160:	add	sp, #32
 8003162:	pop	{r7, pc}

0000000008003164 cortex_m_semihosting::hio::HStdout::write_all::h687807aa23b77368:
 8003164:	push	{r7, lr}
 8003166:	sub	sp, #32
 8003168:	mov	r3, r2
 800316a:	mov	r12, r1
 800316c:	mov	lr, r0
 800316e:	str	r0, [sp, #20]
 8003170:	str	r1, [sp, #24]
 8003172:	str	r2, [sp, #28]
 8003174:	ldr	r0, [sp, #20]
 8003176:	ldr	r0, [r0]
 8003178:	ldr	r1, [sp, #24]
 800317a:	ldr	r2, [sp, #28]
 800317c:	str	r3, [sp, #16]
 800317e:	str.w	r12, [sp, #12]
 8003182:	str.w	lr, [sp, #8]
 8003186:	bl	#378
 800318a:	str	r0, [sp, #4]
 800318c:	b	#-2 <cortex_m_semihosting::hio::HStdout::write_all::h687807aa23b77368+0x2a>
 800318e:	ldr	r0, [sp, #4]
 8003190:	and	r0, r0, #1
 8003194:	add	sp, #32
 8003196:	pop	{r7, pc}

0000000008003198 <cortex_m_semihosting::hio::HStdout as core::fmt::Write>::write_str::h8f2d45d3693437f7:
 8003198:	push	{r7, lr}
 800319a:	sub	sp, #64
 800319c:	mov	r3, r2
 800319e:	mov	r12, r1
 80031a0:	mov	lr, r0
 80031a2:	str	r0, [sp, #32]
 80031a4:	str	r1, [sp, #36]
 80031a6:	str	r2, [sp, #40]
 80031a8:	ldr	r0, [sp, #32]
 80031aa:	ldr	r1, [sp, #36]
 80031ac:	ldr	r2, [sp, #40]
 80031ae:	str	r1, [sp, #48]
 80031b0:	str	r2, [sp, #52]
 80031b2:	ldr	r1, [sp, #48]
 80031b4:	ldr	r2, [sp, #52]
 80031b6:	str	r1, [sp, #56]
 80031b8:	str	r2, [sp, #60]
 80031ba:	ldr	r1, [sp, #56]
 80031bc:	ldr	r2, [sp, #60]
 80031be:	str	r3, [sp, #28]
 80031c0:	str.w	r12, [sp, #24]
 80031c4:	str.w	lr, [sp, #20]
 80031c8:	str	r0, [sp, #16]
 80031ca:	str	r1, [sp, #12]
 80031cc:	str	r2, [sp, #8]
 80031ce:	b	#-2 <<cortex_m_semihosting::hio::HStdout as core::fmt::Write>::write_str::h8f2d45d3693437f7+0x38>
 80031d0:	ldr	r0, [sp, #16]
 80031d2:	ldr	r1, [sp, #12]
 80031d4:	ldr	r2, [sp, #8]
 80031d6:	bl	#-118
 80031da:	str	r0, [sp, #4]
 80031dc:	b	#-2 <<cortex_m_semihosting::hio::HStdout as core::fmt::Write>::write_str::h8f2d45d3693437f7+0x46>
 80031de:	ldr	r0, [sp, #4]
 80031e0:	and	r0, r0, #1
 80031e4:	bl	#2610
 80031e8:	str	r0, [sp]
 80031ea:	b	#-2 <<cortex_m_semihosting::hio::HStdout as core::fmt::Write>::write_str::h8f2d45d3693437f7+0x54>
 80031ec:	ldr	r0, [sp]
 80031ee:	and	r0, r0, #1
 80031f2:	add	sp, #64
 80031f4:	pop	{r7, pc}

00000000080031f6 <cortex_m_semihosting::hio::HStdout as core::fmt::Write>::write_str::{{closure}}::ha96de2bfe76fb9c8:
 80031f6:	sub	sp, #8
 80031f8:	add	sp, #8
 80031fa:	bx	lr

00000000080031fc cortex_m_semihosting::hio::hstdout::h22d0ba711537d787:
 80031fc:	push	{r7, lr}
 80031fe:	sub	sp, #24
 8003200:	movw	r0, #18260
 8003204:	movt	r0, #2048
 8003208:	movs	r1, #4
 800320a:	str	r1, [sp, #16]
 800320c:	ldr	r2, [sp, #16]
 800320e:	bl	#46
 8003212:	str	r0, [sp, #12]
 8003214:	str	r1, [sp, #8]
 8003216:	b	#-2 <cortex_m_semihosting::hio::hstdout::h22d0ba711537d787+0x1c>
 8003218:	ldr	r0, [sp, #12]
 800321a:	ldr	r1, [sp, #8]
 800321c:	bl	#2364
 8003220:	str	r0, [sp, #4]
 8003222:	str	r1, [sp]
 8003224:	b	#-2 <cortex_m_semihosting::hio::hstdout::h22d0ba711537d787+0x2a>
 8003226:	ldr	r0, [sp, #4]
 8003228:	ldr	r1, [sp]
 800322a:	add	sp, #24
 800322c:	pop	{r7, pc}

000000000800322e cortex_m_semihosting::hio::hstdout::{{closure}}::h761ff5e8dcdfec73:
 800322e:	sub	sp, #16
 8003230:	mov	r1, r0
 8003232:	str	r0, [sp, #8]
 8003234:	ldr	r0, [sp, #8]
 8003236:	str	r0, [sp, #12]
 8003238:	ldr	r0, [sp, #12]
 800323a:	str	r1, [sp]
 800323c:	add	sp, #16
 800323e:	bx	lr

0000000008003240 cortex_m_semihosting::hio::open::hc30974881854a7f0:
 8003240:	push	{r7, lr}
 8003242:	sub	sp, #120
 8003244:	mov	r3, r2
 8003246:	mov	r12, r1
 8003248:	mov	lr, r0
 800324a:	str	r0, [sp, #40]
 800324c:	str	r1, [sp, #44]
 800324e:	str	r2, [sp, #48]
 8003250:	ldr	r0, [sp, #40]
 8003252:	ldr	r1, [sp, #44]
 8003254:	str	r0, [sp, #88]
 8003256:	str	r1, [sp, #92]
 8003258:	ldr	r0, [sp, #88]
 800325a:	ldr	r1, [sp, #92]
 800325c:	str	r0, [sp, #96]
 800325e:	str	r1, [sp, #100]
 8003260:	ldr	r0, [sp, #96]
 8003262:	ldr	r1, [sp, #100]
 8003264:	str	r1, [sp, #64]
 8003266:	str	r0, [sp, #60]
 8003268:	str	r3, [sp, #36]
 800326a:	str.w	r12, [sp, #32]
 800326e:	str.w	lr, [sp, #28]
 8003272:	b	#-2 <cortex_m_semihosting::hio::open::hc30974881854a7f0+0x34>
 8003274:	ldr	r0, [sp, #60]
 8003276:	ldr	r1, [sp, #64]
 8003278:	bl	#2004
 800327c:	str	r0, [sp, #24]
 800327e:	b	#-2 <cortex_m_semihosting::hio::open::hc30974881854a7f0+0x40>
 8003280:	ldr	r0, [sp, #24]
 8003282:	ldr	r1, [sp, #48]
 8003284:	ldr	r2, [sp, #60]
 8003286:	ldr	r3, [sp, #64]
 8003288:	str	r0, [sp, #20]
 800328a:	mov	r0, r2
 800328c:	str	r1, [sp, #16]
 800328e:	mov	r1, r3
 8003290:	bl	#1952
 8003294:	str	r0, [sp, #12]
 8003296:	b	#-2 <cortex_m_semihosting::hio::open::hc30974881854a7f0+0x58>
 8003298:	ldr	r0, [sp, #12]
 800329a:	subs	r1, r0, #1
 800329c:	cmp	r0, #1
 800329e:	str	r1, [sp, #8]
 80032a0:	blo	#82 <cortex_m_semihosting::hio::open::hc30974881854a7f0+0xb6>
 80032a2:	b	#-2 <cortex_m_semihosting::hio::open::hc30974881854a7f0+0x64>
 80032a4:	ldr	r0, [sp, #20]
 80032a6:	str	r0, [sp, #68]
 80032a8:	ldr	r1, [sp, #16]
 80032aa:	str	r1, [sp, #72]
 80032ac:	ldr	r2, [sp, #8]
 80032ae:	str	r2, [sp, #76]
 80032b0:	movs	r3, #1
 80032b2:	str	r3, [sp, #104]
 80032b4:	add	r3, sp, #68
 80032b6:	str	r3, [sp, #108]
 80032b8:	ldr	r3, [sp, #104]
 80032ba:	ldr.w	r12, [sp, #108]
 80032be:	str	r3, [sp, #112]
 80032c0:	str.w	r12, [sp, #116]
 80032c4:	ldr	r0, [sp, #112]
 80032c6:	ldr	r1, [sp, #116]
 80032c8:	bl	#2562
 80032cc:	str	r0, [sp, #4]
 80032ce:	b	#-2 <cortex_m_semihosting::hio::open::hc30974881854a7f0+0x90>
 80032d0:	ldr	r0, [sp, #4]
 80032d2:	adds	r1, r0, #1
 80032d4:	cmp	r1, #0
 80032d6:	bne	#6 <cortex_m_semihosting::hio::open::hc30974881854a7f0+0xa0>
 80032d8:	b	#-2 <cortex_m_semihosting::hio::open::hc30974881854a7f0+0x9a>
 80032da:	movs	r0, #1
 80032dc:	str	r0, [sp, #52]
 80032de:	b	#12 <cortex_m_semihosting::hio::open::hc30974881854a7f0+0xae>
 80032e0:	ldr	r0, [sp, #4]
 80032e2:	str	r0, [sp, #84]
 80032e4:	ldr	r1, [sp, #84]
 80032e6:	str	r1, [sp, #56]
 80032e8:	movs	r1, #0
 80032ea:	str	r1, [sp, #52]
 80032ec:	b	#-2 <cortex_m_semihosting::hio::open::hc30974881854a7f0+0xae>
 80032ee:	ldr	r0, [sp, #52]
 80032f0:	ldr	r1, [sp, #56]
 80032f2:	add	sp, #120
 80032f4:	pop	{r7, pc}
 80032f6:	movw	r0, #18420
 80032fa:	movt	r0, #2048
 80032fe:	bl	#-3558
 8003302:	trap

0000000008003304 cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11:
 8003304:	push	{r7, lr}
 8003306:	sub	sp, #136
 8003308:	mov	r3, r2
 800330a:	mov	r12, r1
 800330c:	mov	lr, r0
 800330e:	str	r0, [sp, #64]
 8003310:	str	r1, [sp, #68]
 8003312:	str	r2, [sp, #72]
 8003314:	str	r3, [sp, #60]
 8003316:	str.w	r12, [sp, #56]
 800331a:	str.w	lr, [sp, #52]
 800331e:	b	#-2 <cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11+0x1c>
 8003320:	ldr	r0, [sp, #68]
 8003322:	ldr	r1, [sp, #72]
 8003324:	bl	#1852
 8003328:	str	r0, [sp, #48]
 800332a:	b	#-2 <cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11+0x28>
 800332c:	ldr	r0, [sp, #48]
 800332e:	lsls	r1, r0, #31
 8003330:	cmp	r1, #0
 8003332:	bne	#20 <cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11+0x46>
 8003334:	b	#-2 <cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11+0x32>
 8003336:	ldr	r0, [sp, #64]
 8003338:	ldr	r1, [sp, #68]
 800333a:	ldr	r2, [sp, #72]
 800333c:	str	r0, [sp, #44]
 800333e:	mov	r0, r1
 8003340:	mov	r1, r2
 8003342:	bl	#1802
 8003346:	str	r0, [sp, #40]
 8003348:	b	#6 <cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11+0x4e>
 800334a:	movs	r0, #0
 800334c:	strb.w	r0, [sp, #79]
 8003350:	b	#78 <cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11+0x9e>
 8003352:	ldr	r0, [sp, #40]
 8003354:	ldr	r1, [sp, #68]
 8003356:	ldr	r2, [sp, #72]
 8003358:	str	r0, [sp, #36]
 800335a:	mov	r0, r1
 800335c:	mov	r1, r2
 800335e:	bl	#1746
 8003362:	str	r0, [sp, #32]
 8003364:	b	#-2 <cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11+0x62>
 8003366:	ldr	r0, [sp, #44]
 8003368:	str	r0, [sp, #84]
 800336a:	ldr	r1, [sp, #36]
 800336c:	str	r1, [sp, #88]
 800336e:	ldr	r2, [sp, #32]
 8003370:	str	r2, [sp, #92]
 8003372:	movs	r3, #5
 8003374:	str	r3, [sp, #120]
 8003376:	add	r3, sp, #84
 8003378:	str	r3, [sp, #124]
 800337a:	ldr	r3, [sp, #120]
 800337c:	ldr.w	r12, [sp, #124]
 8003380:	str	r3, [sp, #128]
 8003382:	str.w	r12, [sp, #132]
 8003386:	ldr	r0, [sp, #128]
 8003388:	ldr	r1, [sp, #132]
 800338a:	bl	#2368
 800338e:	str	r0, [sp, #80]
 8003390:	b	#-2 <cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11+0x8e>
 8003392:	ldr	r0, [sp, #80]
 8003394:	cmp	r0, #0
 8003396:	bne	#18 <cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11+0xa8>
 8003398:	b	#-2 <cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11+0x96>
 800339a:	movs	r0, #0
 800339c:	strb.w	r0, [sp, #79]
 80033a0:	b	#6 <cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11+0xa6>
 80033a2:	ldrb.w	r0, [sp, #79]
 80033a6:	add	sp, #136
 80033a8:	pop	{r7, pc}
 80033aa:	b	#-12 <cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11+0x9e>
 80033ac:	add	r0, sp, #80
 80033ae:	str	r0, [sp, #104]
 80033b0:	ldr	r0, [sp, #104]
 80033b2:	ldr	r0, [r0]
 80033b4:	ldr	r1, [sp, #68]
 80033b6:	ldr	r2, [sp, #72]
 80033b8:	str	r0, [sp, #28]
 80033ba:	mov	r0, r1
 80033bc:	mov	r1, r2
 80033be:	bl	#1650
 80033c2:	str	r0, [sp, #24]
 80033c4:	b	#-2 <cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11+0xc2>
 80033c6:	ldr	r0, [sp, #28]
 80033c8:	ldr	r1, [sp, #24]
 80033ca:	cmp	r0, r1
 80033cc:	bhi	#16 <cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11+0xdc>
 80033ce:	b	#-2 <cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11+0xcc>
 80033d0:	ldr	r0, [sp, #80]
 80033d2:	str	r0, [sp, #100]
 80033d4:	ldr	r0, [sp, #68]
 80033d6:	ldr	r1, [sp, #72]
 80033d8:	bl	#1624
 80033dc:	str	r0, [sp, #20]
 80033de:	b	#6 <cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11+0xe4>
 80033e0:	movs	r0, #1
 80033e2:	strb.w	r0, [sp, #79]
 80033e6:	b	#-64 <cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11+0xa6>
 80033e8:	ldr	r0, [sp, #100]
 80033ea:	ldr	r1, [sp, #20]
 80033ec:	subs	r2, r1, r0
 80033ee:	cmp	r1, r0
 80033f0:	str	r2, [sp, #16]
 80033f2:	blo	#52 <cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11+0x126>
 80033f4:	b	#-2 <cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11+0xf2>
 80033f6:	ldr	r0, [sp, #16]
 80033f8:	str	r0, [sp, #108]
 80033fa:	ldr	r0, [sp, #68]
 80033fc:	ldr	r1, [sp, #72]
 80033fe:	bl	#1614
 8003402:	str	r0, [sp, #12]
 8003404:	b	#-2 <cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11+0x102>
 8003406:	ldr	r1, [sp, #108]
 8003408:	ldr	r0, [sp, #12]
 800340a:	bl	#-4478
 800340e:	str	r0, [sp, #8]
 8003410:	b	#-2 <cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11+0x10e>
 8003412:	ldr	r1, [sp, #100]
 8003414:	ldr	r0, [sp, #8]
 8003416:	bl	#1114
 800341a:	str	r0, [sp, #4]
 800341c:	str	r1, [sp]
 800341e:	b	#-2 <cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11+0x11c>
 8003420:	ldr	r0, [sp, #4]
 8003422:	str	r0, [sp, #68]
 8003424:	ldr	r1, [sp]
 8003426:	str	r1, [sp, #72]
 8003428:	b	#-268 <cortex_m_semihosting::hio::write_all::h8dbc20b496e4bf11+0x1c>
 800342a:	movw	r0, #18444
 800342e:	movt	r0, #2048
 8003432:	bl	#-3866
 8003436:	trap

0000000008003438 core::ptr::real_drop_in_place::h0953a7d3cdbad266:
 8003438:	sub	sp, #8
 800343a:	mov	r1, r0
 800343c:	str	r0, [sp, #4]
 800343e:	str	r1, [sp]
 8003440:	add	sp, #8
 8003442:	bx	lr

0000000008003444 core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632:
 8003444:	push	{r4, r5, r7, lr}
 8003446:	sub	sp, #264
 8003448:	mov	r3, r2
 800344a:	mov	r12, r1
 800344c:	mov	lr, r0
 800344e:	str	r0, [sp, #156]
 8003450:	str	r1, [sp, #160]
 8003452:	str	r2, [sp, #164]
 8003454:	ldr	r0, [sp, #156]
 8003456:	str	r0, [sp, #168]
 8003458:	ldr	r0, [sp, #168]
 800345a:	cmp	r0, #128
 800345c:	str	r3, [sp, #152]
 800345e:	str.w	r12, [sp, #148]
 8003462:	str.w	lr, [sp, #144]
 8003466:	blo	#8 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x2e>
 8003468:	b	#-2 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x26>
 800346a:	movs	r0, #0
 800346c:	strb.w	r0, [sp, #177]
 8003470:	b	#10 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x3a>
 8003472:	ldr	r0, [sp, #160]
 8003474:	ldr	r1, [sp, #164]
 8003476:	bl	#1514
 800347a:	str	r0, [sp, #140]
 800347c:	b	#10 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x46>
 800347e:	ldrb.w	r0, [sp, #177]
 8003482:	lsls	r0, r0, #31
 8003484:	cmp	r0, #0
 8003486:	bne	#22 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x5c>
 8003488:	b	#10 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x52>
 800348a:	movs	r0, #1
 800348c:	ldr	r1, [sp, #140]
 800348e:	bics	r0, r1
 8003490:	strb.w	r0, [sp, #177]
 8003494:	b	#-26 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x3a>
 8003496:	ldr	r0, [sp, #168]
 8003498:	cmp.w	r0, #2048
 800349c:	blo	#44 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x88>
 800349e:	b	#34 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x80>
 80034a0:	ldr	r0, [sp, #168]
 80034a2:	ldr	r1, [sp, #160]
 80034a4:	ldr	r2, [sp, #164]
 80034a6:	movs	r3, #0
 80034a8:	str	r0, [sp, #136]
 80034aa:	mov	r0, r1
 80034ac:	mov	r1, r2
 80034ae:	mov	r2, r3
 80034b0:	bl	#1362
 80034b4:	str	r0, [sp, #132]
 80034b6:	b	#-2 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x74>
 80034b8:	ldr	r0, [sp, #136]
 80034ba:	ldr	r1, [sp, #132]
 80034bc:	strb	r0, [r1]
 80034be:	movs	r2, #1
 80034c0:	str	r2, [sp, #172]
 80034c2:	b	#654 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x310>
 80034c4:	movs	r0, #0
 80034c6:	strb.w	r0, [sp, #178]
 80034ca:	b	#10 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x94>
 80034cc:	ldr	r0, [sp, #160]
 80034ce:	ldr	r1, [sp, #164]
 80034d0:	bl	#1376
 80034d4:	str	r0, [sp, #128]
 80034d6:	b	#10 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0xa0>
 80034d8:	ldrb.w	r0, [sp, #178]
 80034dc:	lsls	r0, r0, #31
 80034de:	cmp	r0, #0
 80034e0:	bne	#26 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0xba>
 80034e2:	b	#14 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0xb0>
 80034e4:	movs	r0, #0
 80034e6:	ldr	r1, [sp, #128]
 80034e8:	cmp	r1, #1
 80034ea:	it	hi
 80034ec:	movhi	r0, #1
 80034ee:	strb.w	r0, [sp, #178]
 80034f2:	b	#-30 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x94>
 80034f4:	ldr	r0, [sp, #168]
 80034f6:	cmp.w	r0, #65536
 80034fa:	blo	#86 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x110>
 80034fc:	b	#76 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x108>
 80034fe:	ldr	r0, [sp, #168]
 8003500:	ubfx	r0, r0, #6, #5
 8003504:	ldr	r1, [sp, #160]
 8003506:	ldr	r2, [sp, #164]
 8003508:	movs	r3, #0
 800350a:	str	r0, [sp, #124]
 800350c:	mov	r0, r1
 800350e:	mov	r1, r2
 8003510:	mov	r2, r3
 8003512:	bl	#1264
 8003516:	str	r0, [sp, #120]
 8003518:	b	#-2 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0xd6>
 800351a:	ldr	r0, [sp, #124]
 800351c:	orr	r1, r0, #192
 8003520:	ldr	r2, [sp, #120]
 8003522:	strb	r1, [r2]
 8003524:	ldr	r1, [sp, #168]
 8003526:	and	r1, r1, #63
 800352a:	ldr	r0, [sp, #160]
 800352c:	ldr	r3, [sp, #164]
 800352e:	movs	r2, #1
 8003530:	str	r1, [sp, #116]
 8003532:	mov	r1, r3
 8003534:	bl	#1230
 8003538:	str	r0, [sp, #112]
 800353a:	b	#-2 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0xf8>
 800353c:	ldr	r0, [sp, #116]
 800353e:	orr	r1, r0, #128
 8003542:	ldr	r2, [sp, #112]
 8003544:	strb	r1, [r2]
 8003546:	movs	r1, #2
 8003548:	str	r1, [sp, #172]
 800354a:	b	#516 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x30e>
 800354c:	movs	r0, #0
 800354e:	strb.w	r0, [sp, #179]
 8003552:	b	#10 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x11c>
 8003554:	ldr	r0, [sp, #160]
 8003556:	ldr	r1, [sp, #164]
 8003558:	bl	#1240
 800355c:	str	r0, [sp, #108]
 800355e:	b	#10 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x128>
 8003560:	ldrb.w	r0, [sp, #179]
 8003564:	lsls	r0, r0, #31
 8003566:	cmp	r0, #0
 8003568:	bne	#28 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x144>
 800356a:	b	#14 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x138>
 800356c:	movs	r0, #0
 800356e:	ldr	r1, [sp, #108]
 8003570:	cmp	r1, #2
 8003572:	it	hi
 8003574:	movhi	r0, #1
 8003576:	strb.w	r0, [sp, #179]
 800357a:	b	#-30 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x11c>
 800357c:	ldr	r0, [sp, #160]
 800357e:	ldr	r1, [sp, #164]
 8003580:	bl	#1200
 8003584:	str	r0, [sp, #104]
 8003586:	b	#110 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x1b4>
 8003588:	ldr	r0, [sp, #168]
 800358a:	ubfx	r0, r0, #12, #4
 800358e:	ldr	r1, [sp, #160]
 8003590:	ldr	r2, [sp, #164]
 8003592:	movs	r3, #0
 8003594:	str	r0, [sp, #100]
 8003596:	mov	r0, r1
 8003598:	mov	r1, r2
 800359a:	mov	r2, r3
 800359c:	bl	#1126
 80035a0:	str	r0, [sp, #96]
 80035a2:	b	#-2 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x160>
 80035a4:	ldr	r0, [sp, #100]
 80035a6:	orr	r1, r0, #224
 80035aa:	ldr	r2, [sp, #96]
 80035ac:	strb	r1, [r2]
 80035ae:	ldr	r1, [sp, #168]
 80035b0:	ubfx	r1, r1, #6, #6
 80035b4:	ldr	r0, [sp, #160]
 80035b6:	ldr	r3, [sp, #164]
 80035b8:	movs	r2, #1
 80035ba:	str	r1, [sp, #92]
 80035bc:	mov	r1, r3
 80035be:	bl	#1092
 80035c2:	str	r0, [sp, #88]
 80035c4:	b	#-2 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x182>
 80035c6:	ldr	r0, [sp, #92]
 80035c8:	orr	r1, r0, #128
 80035cc:	ldr	r2, [sp, #88]
 80035ce:	strb	r1, [r2]
 80035d0:	ldr	r1, [sp, #168]
 80035d2:	and	r1, r1, #63
 80035d6:	ldr	r0, [sp, #160]
 80035d8:	ldr	r3, [sp, #164]
 80035da:	movs	r2, #2
 80035dc:	str	r1, [sp, #84]
 80035de:	mov	r1, r3
 80035e0:	bl	#1058
 80035e4:	str	r0, [sp, #80]
 80035e6:	b	#-2 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x1a4>
 80035e8:	ldr	r0, [sp, #84]
 80035ea:	orr	r1, r0, #128
 80035ee:	ldr	r2, [sp, #80]
 80035f0:	strb	r1, [r2]
 80035f2:	movs	r1, #3
 80035f4:	str	r1, [sp, #172]
 80035f6:	b	#342 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x30c>
 80035f8:	ldr	r0, [sp, #104]
 80035fa:	cmp	r0, #3
 80035fc:	bhi	#10 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x1c6>
 80035fe:	b	#-2 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x1bc>
 8003600:	ldr	r0, [sp, #168]
 8003602:	bl	#598
 8003606:	str	r0, [sp, #76]
 8003608:	b	#144 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x258>
 800360a:	ldr	r0, [sp, #168]
 800360c:	ubfx	r0, r0, #18, #3
 8003610:	ldr	r1, [sp, #160]
 8003612:	ldr	r2, [sp, #164]
 8003614:	movs	r3, #0
 8003616:	str	r0, [sp, #72]
 8003618:	mov	r0, r1
 800361a:	mov	r1, r2
 800361c:	mov	r2, r3
 800361e:	bl	#996
 8003622:	str	r0, [sp, #68]
 8003624:	b	#-2 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x1e2>
 8003626:	ldr	r0, [sp, #72]
 8003628:	orr	r1, r0, #240
 800362c:	ldr	r2, [sp, #68]
 800362e:	strb	r1, [r2]
 8003630:	ldr	r1, [sp, #168]
 8003632:	ubfx	r1, r1, #12, #6
 8003636:	ldr	r0, [sp, #160]
 8003638:	ldr	r3, [sp, #164]
 800363a:	movs	r2, #1
 800363c:	str	r1, [sp, #64]
 800363e:	mov	r1, r3
 8003640:	bl	#962
 8003644:	str	r0, [sp, #60]
 8003646:	b	#-2 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x204>
 8003648:	ldr	r0, [sp, #64]
 800364a:	orr	r1, r0, #128
 800364e:	ldr	r2, [sp, #60]
 8003650:	strb	r1, [r2]
 8003652:	ldr	r1, [sp, #168]
 8003654:	ubfx	r1, r1, #6, #6
 8003658:	ldr	r0, [sp, #160]
 800365a:	ldr	r3, [sp, #164]
 800365c:	movs	r2, #2
 800365e:	str	r1, [sp, #56]
 8003660:	mov	r1, r3
 8003662:	bl	#928
 8003666:	str	r0, [sp, #52]
 8003668:	b	#-2 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x226>
 800366a:	ldr	r0, [sp, #56]
 800366c:	orr	r1, r0, #128
 8003670:	ldr	r2, [sp, #52]
 8003672:	strb	r1, [r2]
 8003674:	ldr	r1, [sp, #168]
 8003676:	and	r1, r1, #63
 800367a:	ldr	r0, [sp, #160]
 800367c:	ldr	r3, [sp, #164]
 800367e:	movs	r2, #3
 8003680:	str	r1, [sp, #48]
 8003682:	mov	r1, r3
 8003684:	bl	#894
 8003688:	str	r0, [sp, #44]
 800368a:	b	#-2 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x248>
 800368c:	ldr	r0, [sp, #48]
 800368e:	orr	r1, r0, #128
 8003692:	ldr	r2, [sp, #44]
 8003694:	strb	r1, [r2]
 8003696:	movs	r1, #4
 8003698:	str	r1, [sp, #172]
 800369a:	b	#178 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x30c>
 800369c:	ldr	r0, [sp, #76]
 800369e:	bl	#220
 80036a2:	str	r0, [sp, #240]
 80036a4:	b	#-2 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x262>
 80036a6:	ldr	r0, [sp, #160]
 80036a8:	ldr	r1, [sp, #164]
 80036aa:	bl	#902
 80036ae:	str	r0, [sp, #244]
 80036b0:	b	#-2 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x26e>
 80036b2:	add	r0, sp, #240
 80036b4:	str	r0, [sp, #228]
 80036b6:	add	r0, sp, #168
 80036b8:	str	r0, [sp, #232]
 80036ba:	add	r0, sp, #244
 80036bc:	str	r0, [sp, #236]
 80036be:	ldr	r0, [sp, #228]
 80036c0:	str	r0, [sp, #248]
 80036c2:	ldr	r0, [sp, #232]
 80036c4:	str	r0, [sp, #252]
 80036c6:	ldr	r0, [sp, #236]
 80036c8:	str	r0, [sp, #256]
 80036ca:	ldr	r0, [sp, #248]
 80036cc:	movw	r1, #12139
 80036d0:	movt	r1, #2048
 80036d4:	bl	#240
 80036d8:	str	r0, [sp, #40]
 80036da:	str	r1, [sp, #36]
 80036dc:	b	#-2 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x29a>
 80036de:	ldr	r0, [sp, #252]
 80036e0:	movw	r1, #11663
 80036e4:	movt	r1, #2048
 80036e8:	bl	#-5768
 80036ec:	str	r0, [sp, #32]
 80036ee:	str	r1, [sp, #28]
 80036f0:	b	#-2 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x2ae>
 80036f2:	ldr	r0, [sp, #256]
 80036f4:	movw	r1, #12139
 80036f8:	movt	r1, #2048
 80036fc:	bl	#200
 8003700:	str	r0, [sp, #24]
 8003702:	str	r1, [sp, #20]
 8003704:	b	#-2 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x2c2>
 8003706:	ldr	r0, [sp, #40]
 8003708:	str	r0, [sp, #204]
 800370a:	ldr	r1, [sp, #36]
 800370c:	str	r1, [sp, #208]
 800370e:	ldr	r2, [sp, #32]
 8003710:	str	r2, [sp, #212]
 8003712:	ldr	r3, [sp, #28]
 8003714:	str	r3, [sp, #216]
 8003716:	ldr.w	r12, [sp, #24]
 800371a:	str.w	r12, [sp, #220]
 800371e:	ldr.w	lr, [sp, #20]
 8003722:	str.w	lr, [sp, #224]
 8003726:	mov	r4, sp
 8003728:	movs	r5, #3
 800372a:	str	r5, [r4]
 800372c:	movw	r1, #18528
 8003730:	movt	r1, #2048
 8003734:	add	r0, sp, #180
 8003736:	add	r3, sp, #204
 8003738:	mov	r2, r5
 800373a:	bl	#188
 800373e:	b	#-2 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x2fc>
 8003740:	movw	r1, #18580
 8003744:	movt	r1, #2048
 8003748:	add	r0, sp, #180
 800374a:	bl	#-4536
 800374e:	trap
 8003750:	b	#-2 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x30e>
 8003752:	b	#-2 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x310>
 8003754:	ldr	r0, [sp, #160]
 8003756:	ldr	r1, [sp, #164]
 8003758:	ldr	r2, [sp, #172]
 800375a:	str	r2, [sp, #260]
 800375c:	ldr	r2, [sp, #260]
 800375e:	bl	#626
 8003762:	str	r0, [sp, #16]
 8003764:	str	r1, [sp, #12]
 8003766:	b	#-2 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x324>
 8003768:	ldr	r0, [sp, #16]
 800376a:	ldr	r1, [sp, #12]
 800376c:	bl	#214
 8003770:	str	r0, [sp, #8]
 8003772:	str	r1, [sp, #4]
 8003774:	b	#-2 <core::char::methods::<impl char>::encode_utf8::h6d30a28521a80632+0x332>
 8003776:	ldr	r0, [sp, #8]
 8003778:	ldr	r1, [sp, #4]
 800377a:	add	sp, #264
 800377c:	pop	{r4, r5, r7, pc}

000000000800377e core::char::methods::<impl char>::len_utf8::h075d8059163933a0:
 800377e:	sub	sp, #16
 8003780:	mov	r1, r0
 8003782:	str	r0, [sp, #4]
 8003784:	ldr	r0, [sp, #4]
 8003786:	str	r0, [sp, #12]
 8003788:	ldr	r0, [sp, #12]
 800378a:	cmp	r0, #128
 800378c:	str	r1, [sp]
 800378e:	blo	#10 <core::char::methods::<impl char>::len_utf8::h075d8059163933a0+0x1e>
 8003790:	b	#-2 <core::char::methods::<impl char>::len_utf8::h075d8059163933a0+0x14>
 8003792:	ldr	r0, [sp, #12]
 8003794:	cmp.w	r0, #2048
 8003798:	blo	#16 <core::char::methods::<impl char>::len_utf8::h075d8059163933a0+0x2e>
 800379a:	b	#4 <core::char::methods::<impl char>::len_utf8::h075d8059163933a0+0x24>
 800379c:	movs	r0, #1
 800379e:	str	r0, [sp, #8]
 80037a0:	b	#30 <core::char::methods::<impl char>::len_utf8::h075d8059163933a0+0x44>
 80037a2:	ldr	r0, [sp, #12]
 80037a4:	cmp.w	r0, #65536
 80037a8:	blo	#12 <core::char::methods::<impl char>::len_utf8::h075d8059163933a0+0x3a>
 80037aa:	b	#4 <core::char::methods::<impl char>::len_utf8::h075d8059163933a0+0x34>
 80037ac:	movs	r0, #2
 80037ae:	str	r0, [sp, #8]
 80037b0:	b	#12 <core::char::methods::<impl char>::len_utf8::h075d8059163933a0+0x42>
 80037b2:	movs	r0, #4
 80037b4:	str	r0, [sp, #8]
 80037b6:	b	#4 <core::char::methods::<impl char>::len_utf8::h075d8059163933a0+0x40>
 80037b8:	movs	r0, #3
 80037ba:	str	r0, [sp, #8]
 80037bc:	b	#-2 <core::char::methods::<impl char>::len_utf8::h075d8059163933a0+0x40>
 80037be:	b	#-2 <core::char::methods::<impl char>::len_utf8::h075d8059163933a0+0x42>
 80037c0:	b	#-2 <core::char::methods::<impl char>::len_utf8::h075d8059163933a0+0x44>
 80037c2:	ldr	r0, [sp, #8]
 80037c4:	add	sp, #16
 80037c6:	bx	lr

00000000080037c8 core::fmt::ArgumentV1::new::h141fdfd365567d8d:
 80037c8:	sub	sp, #40
 80037ca:	mov	r2, r1
 80037cc:	mov	r3, r0
 80037ce:	str	r0, [sp, #16]
 80037d0:	str	r1, [sp, #20]
 80037d2:	ldr	r0, [sp, #20]
 80037d4:	str	r0, [sp, #32]
 80037d6:	ldr	r0, [sp, #32]
 80037d8:	str	r2, [sp, #12]
 80037da:	str	r3, [sp, #8]
 80037dc:	str	r0, [sp, #4]
 80037de:	b	#-2 <core::fmt::ArgumentV1::new::h141fdfd365567d8d+0x18>
 80037e0:	ldr	r0, [sp, #16]
 80037e2:	str	r0, [sp, #36]
 80037e4:	ldr	r0, [sp, #36]
 80037e6:	str	r0, [sp]
 80037e8:	b	#-2 <core::fmt::ArgumentV1::new::h141fdfd365567d8d+0x22>
 80037ea:	ldr	r0, [sp]
 80037ec:	str	r0, [sp, #24]
 80037ee:	ldr	r1, [sp, #4]
 80037f0:	str	r1, [sp, #28]
 80037f2:	ldr	r0, [sp, #24]
 80037f4:	ldr	r1, [sp, #28]
 80037f6:	add	sp, #40
 80037f8:	bx	lr

00000000080037fa core::fmt::Arguments::new_v1::h7d314563def3403e:
 80037fa:	push	{r4, r5, r6, lr}
 80037fc:	sub	sp, #40
 80037fe:	ldr.w	r12, [sp, #56]
 8003802:	mov	lr, r3
 8003804:	mov	r4, r2
 8003806:	mov	r5, r1
 8003808:	mov	r6, r0
 800380a:	str	r1, [sp, #16]
 800380c:	str	r2, [sp, #20]
 800380e:	str	r3, [sp, #24]
 8003810:	str.w	r12, [sp, #28]
 8003814:	ldr	r1, [sp, #16]
 8003816:	ldr	r2, [sp, #20]
 8003818:	movs	r3, #0
 800381a:	str	r3, [sp, #36]
 800381c:	str	r3, [sp, #32]
 800381e:	str	r3, [sp, #32]
 8003820:	ldr	r3, [sp, #24]
 8003822:	ldr.w	r12, [sp, #28]
 8003826:	str	r1, [r0]
 8003828:	str	r2, [r0, #4]
 800382a:	ldr	r1, [sp, #32]
 800382c:	ldr	r2, [sp, #36]
 800382e:	str	r1, [r0, #8]
 8003830:	str	r2, [r0, #12]
 8003832:	str	r3, [r0, #16]
 8003834:	str.w	r12, [r0, #20]
 8003838:	str.w	lr, [sp, #12]
 800383c:	str	r4, [sp, #8]
 800383e:	str	r5, [sp, #4]
 8003840:	str	r6, [sp]
 8003842:	add	sp, #40
 8003844:	pop	{r4, r5, r6, pc}

0000000008003846 core::str::from_utf8_unchecked_mut::hd2d609b3f1566c6f:
 8003846:	sub	sp, #16
 8003848:	mov	r2, r1
 800384a:	mov	r3, r0
 800384c:	str	r0, [sp, #8]
 800384e:	str	r1, [sp, #12]
 8003850:	ldr	r0, [sp, #8]
 8003852:	ldr	r1, [sp, #12]
 8003854:	str	r2, [sp, #4]
 8003856:	str	r3, [sp]
 8003858:	add	sp, #16
 800385a:	bx	lr

000000000800385c core::char::convert::from_u32_unchecked::hb4a0d2b7bd30a66e:
 800385c:	sub	sp, #16
 800385e:	mov	r1, r0
 8003860:	str	r0, [sp, #8]
 8003862:	ldr	r0, [sp, #8]
 8003864:	str	r0, [sp, #12]
 8003866:	ldr	r0, [sp, #12]
 8003868:	str	r1, [sp, #4]
 800386a:	str	r0, [sp]
 800386c:	b	#-2 <core::char::convert::from_u32_unchecked::hb4a0d2b7bd30a66e+0x12>
 800386e:	ldr	r0, [sp]
 8003870:	add	sp, #16
 8003872:	bx	lr

0000000008003874 core::slice::from_raw_parts::hb5d675ce65f951df:
 8003874:	push	{r7, lr}
 8003876:	sub	sp, #40
 8003878:	mov	r2, r1
 800387a:	mov	r3, r0
 800387c:	str	r0, [sp, #32]
 800387e:	str	r1, [sp, #36]
 8003880:	movs	r0, #1
 8003882:	cmp	r0, #0
 8003884:	str	r2, [sp, #28]
 8003886:	str	r3, [sp, #24]
 8003888:	bne	#54 <core::slice::from_raw_parts::hb5d675ce65f951df+0x4e>
 800388a:	b	#-2 <core::slice::from_raw_parts::hb5d675ce65f951df+0x18>
 800388c:	ldr	r0, [sp, #32]
 800388e:	str	r0, [sp, #20]
 8003890:	bl	#-6110
 8003894:	str	r0, [sp, #16]
 8003896:	b	#-2 <core::slice::from_raw_parts::hb5d675ce65f951df+0x24>
 8003898:	ldr	r0, [sp, #16]
 800389a:	cmp	r0, #0
 800389c:	beq	#108 <core::slice::from_raw_parts::hb5d675ce65f951df+0x98>
 800389e:	b	#-2 <core::slice::from_raw_parts::hb5d675ce65f951df+0x2c>
 80038a0:	ldr	r0, [sp, #20]
 80038a2:	ldr	r1, [sp, #16]
 80038a4:	udiv	r2, r0, r1
 80038a8:	mls	r2, r2, r1, r0
 80038ac:	cmp	r2, #0
 80038ae:	bne	#2 <core::slice::from_raw_parts::hb5d675ce65f951df+0x40>
 80038b0:	b	#-2 <core::slice::from_raw_parts::hb5d675ce65f951df+0x3e>
 80038b2:	b	#12 <core::slice::from_raw_parts::hb5d675ce65f951df+0x4e>
 80038b4:	movw	r0, #18832
 80038b8:	movt	r0, #2048
 80038bc:	bl	#-5028
 80038c0:	trap
 80038c2:	movs	r0, #1
 80038c4:	cmp	r0, #0
 80038c6:	bne	#44 <core::slice::from_raw_parts::hb5d675ce65f951df+0x82>
 80038c8:	b	#-2 <core::slice::from_raw_parts::hb5d675ce65f951df+0x56>
 80038ca:	bl	#-6186
 80038ce:	str	r0, [sp, #12]
 80038d0:	b	#-2 <core::slice::from_raw_parts::hb5d675ce65f951df+0x5e>
 80038d2:	ldr	r1, [sp, #36]
 80038d4:	ldr	r0, [sp, #12]
 80038d6:	bl	#-5592
 80038da:	str	r0, [sp, #8]
 80038dc:	b	#-2 <core::slice::from_raw_parts::hb5d675ce65f951df+0x6a>
 80038de:	ldr	r0, [sp, #8]
 80038e0:	cmp	r0, #0
 80038e2:	blt	#2 <core::slice::from_raw_parts::hb5d675ce65f951df+0x74>
 80038e4:	b	#-2 <core::slice::from_raw_parts::hb5d675ce65f951df+0x72>
 80038e6:	b	#12 <core::slice::from_raw_parts::hb5d675ce65f951df+0x82>
 80038e8:	movw	r0, #18912
 80038ec:	movt	r0, #2048
 80038f0:	bl	#-5080
 80038f4:	trap
 80038f6:	ldr	r0, [sp, #32]
 80038f8:	ldr	r1, [sp, #36]
 80038fa:	bl	#-5886
 80038fe:	str	r0, [sp, #4]
 8003900:	str	r1, [sp]
 8003902:	b	#-2 <core::slice::from_raw_parts::hb5d675ce65f951df+0x90>
 8003904:	ldr	r0, [sp, #4]
 8003906:	ldr	r1, [sp]
 8003908:	add	sp, #40
 800390a:	pop	{r7, pc}
 800390c:	movw	r0, #18748
 8003910:	movt	r0, #2048
 8003914:	bl	#-5116
 8003918:	trap

000000000800391a core::slice::from_raw_parts_mut::h898511c8d3caaa87:
 800391a:	push	{r7, lr}
 800391c:	sub	sp, #40
 800391e:	mov	r2, r1
 8003920:	mov	r3, r0
 8003922:	str	r0, [sp, #32]
 8003924:	str	r1, [sp, #36]
 8003926:	movs	r0, #1
 8003928:	cmp	r0, #0
 800392a:	str	r2, [sp, #28]
 800392c:	str	r3, [sp, #24]
 800392e:	bne	#54 <core::slice::from_raw_parts_mut::h898511c8d3caaa87+0x4e>
 8003930:	b	#-2 <core::slice::from_raw_parts_mut::h898511c8d3caaa87+0x18>
 8003932:	ldr	r0, [sp, #32]
 8003934:	str	r0, [sp, #20]
 8003936:	bl	#-6276
 800393a:	str	r0, [sp, #16]
 800393c:	b	#-2 <core::slice::from_raw_parts_mut::h898511c8d3caaa87+0x24>
 800393e:	ldr	r0, [sp, #16]
 8003940:	cmp	r0, #0
 8003942:	beq	#108 <core::slice::from_raw_parts_mut::h898511c8d3caaa87+0x98>
 8003944:	b	#-2 <core::slice::from_raw_parts_mut::h898511c8d3caaa87+0x2c>
 8003946:	ldr	r0, [sp, #20]
 8003948:	ldr	r1, [sp, #16]
 800394a:	udiv	r2, r0, r1
 800394e:	mls	r2, r2, r1, r0
 8003952:	cmp	r2, #0
 8003954:	bne	#2 <core::slice::from_raw_parts_mut::h898511c8d3caaa87+0x40>
 8003956:	b	#-2 <core::slice::from_raw_parts_mut::h898511c8d3caaa87+0x3e>
 8003958:	b	#12 <core::slice::from_raw_parts_mut::h898511c8d3caaa87+0x4e>
 800395a:	movw	r0, #18960
 800395e:	movt	r0, #2048
 8003962:	bl	#-5194
 8003966:	trap
 8003968:	movs	r0, #1
 800396a:	cmp	r0, #0
 800396c:	bne	#44 <core::slice::from_raw_parts_mut::h898511c8d3caaa87+0x82>
 800396e:	b	#-2 <core::slice::from_raw_parts_mut::h898511c8d3caaa87+0x56>
 8003970:	bl	#-6352
 8003974:	str	r0, [sp, #12]
 8003976:	b	#-2 <core::slice::from_raw_parts_mut::h898511c8d3caaa87+0x5e>
 8003978:	ldr	r1, [sp, #36]
 800397a:	ldr	r0, [sp, #12]
 800397c:	bl	#-5758
 8003980:	str	r0, [sp, #8]
 8003982:	b	#-2 <core::slice::from_raw_parts_mut::h898511c8d3caaa87+0x6a>
 8003984:	ldr	r0, [sp, #8]
 8003986:	cmp	r0, #0
 8003988:	blt	#2 <core::slice::from_raw_parts_mut::h898511c8d3caaa87+0x74>
 800398a:	b	#-2 <core::slice::from_raw_parts_mut::h898511c8d3caaa87+0x72>
 800398c:	b	#12 <core::slice::from_raw_parts_mut::h898511c8d3caaa87+0x82>
 800398e:	movw	r0, #18984
 8003992:	movt	r0, #2048
 8003996:	bl	#-5246
 800399a:	trap
 800399c:	ldr	r0, [sp, #32]
 800399e:	ldr	r1, [sp, #36]
 80039a0:	bl	#-6014
 80039a4:	str	r0, [sp, #4]
 80039a6:	str	r1, [sp]
 80039a8:	b	#-2 <core::slice::from_raw_parts_mut::h898511c8d3caaa87+0x90>
 80039aa:	ldr	r0, [sp, #4]
 80039ac:	ldr	r1, [sp]
 80039ae:	add	sp, #40
 80039b0:	pop	{r7, pc}
 80039b2:	movw	r0, #18936
 80039b6:	movt	r0, #2048
 80039ba:	bl	#-5282
 80039be:	trap

00000000080039c0 core::slice::<impl [T]>::as_mut_ptr::hd5fd451dd8dd59e3:
 80039c0:	sub	sp, #16
 80039c2:	mov	r2, r1
 80039c4:	mov	r3, r0
 80039c6:	str	r0, [sp, #8]
 80039c8:	str	r1, [sp, #12]
 80039ca:	ldr	r0, [sp, #8]
 80039cc:	str	r2, [sp, #4]
 80039ce:	str	r3, [sp]
 80039d0:	add	sp, #16
 80039d2:	bx	lr

00000000080039d4 core::slice::<impl [T]>::get_unchecked_mut::h1838ea17a3d09cd6:
 80039d4:	push	{r7, lr}
 80039d6:	sub	sp, #32
 80039d8:	mov	r3, r2
 80039da:	mov	r12, r1
 80039dc:	mov	lr, r0
 80039de:	str	r0, [sp, #20]
 80039e0:	str	r1, [sp, #24]
 80039e2:	str	r2, [sp, #28]
 80039e4:	ldr	r0, [sp, #28]
 80039e6:	ldr	r1, [sp, #20]
 80039e8:	ldr	r2, [sp, #24]
 80039ea:	str	r3, [sp, #16]
 80039ec:	str.w	r12, [sp, #12]
 80039f0:	str.w	lr, [sp, #8]
 80039f4:	bl	#204
 80039f8:	str	r0, [sp, #4]
 80039fa:	str	r1, [sp]
 80039fc:	b	#-2 <core::slice::<impl [T]>::get_unchecked_mut::h1838ea17a3d09cd6+0x2a>
 80039fe:	ldr	r0, [sp, #4]
 8003a00:	ldr	r1, [sp]
 8003a02:	add	sp, #32
 8003a04:	pop	{r7, pc}

0000000008003a06 core::slice::<impl [T]>::get_unchecked_mut::h9b4f9a136cd74327:
 8003a06:	push	{r7, lr}
 8003a08:	sub	sp, #32
 8003a0a:	mov	r3, r2
 8003a0c:	mov	r12, r1
 8003a0e:	mov	lr, r0
 8003a10:	str	r0, [sp, #20]
 8003a12:	str	r1, [sp, #24]
 8003a14:	str	r2, [sp, #28]
 8003a16:	ldr	r0, [sp, #28]
 8003a18:	ldr	r1, [sp, #20]
 8003a1a:	ldr	r2, [sp, #24]
 8003a1c:	str	r3, [sp, #16]
 8003a1e:	str.w	r12, [sp, #12]
 8003a22:	str.w	lr, [sp, #8]
 8003a26:	bl	#98
 8003a2a:	str	r0, [sp, #4]
 8003a2c:	b	#-2 <core::slice::<impl [T]>::get_unchecked_mut::h9b4f9a136cd74327+0x28>
 8003a2e:	ldr	r0, [sp, #4]
 8003a30:	add	sp, #32
 8003a32:	pop	{r7, pc}

0000000008003a34 core::slice::<impl [T]>::len::hfd7b59bfdd7672b1:
 8003a34:	sub	sp, #24
 8003a36:	mov	r2, r1
 8003a38:	mov	r3, r0
 8003a3a:	str	r0, [sp, #8]
 8003a3c:	str	r1, [sp, #12]
 8003a3e:	ldr	r0, [sp, #8]
 8003a40:	ldr	r1, [sp, #12]
 8003a42:	str	r0, [sp, #16]
 8003a44:	str	r1, [sp, #20]
 8003a46:	ldr	r0, [sp, #20]
 8003a48:	str	r2, [sp, #4]
 8003a4a:	str	r3, [sp]
 8003a4c:	add	sp, #24
 8003a4e:	bx	lr

0000000008003a50 core::slice::<impl [T]>::as_ptr::hdc46343b134e13c2:
 8003a50:	sub	sp, #16
 8003a52:	mov	r2, r1
 8003a54:	mov	r3, r0
 8003a56:	str	r0, [sp, #8]
 8003a58:	str	r1, [sp, #12]
 8003a5a:	ldr	r0, [sp, #8]
 8003a5c:	str	r2, [sp, #4]
 8003a5e:	str	r3, [sp]
 8003a60:	add	sp, #16
 8003a62:	bx	lr

0000000008003a64 core::slice::<impl [T]>::is_empty::hfc096c91e98f5ee4:
 8003a64:	push	{r7, lr}
 8003a66:	sub	sp, #24
 8003a68:	mov	r2, r1
 8003a6a:	mov	r3, r0
 8003a6c:	str	r0, [sp, #16]
 8003a6e:	str	r1, [sp, #20]
 8003a70:	ldr	r0, [sp, #16]
 8003a72:	ldr	r1, [sp, #20]
 8003a74:	str	r2, [sp, #12]
 8003a76:	str	r3, [sp, #8]
 8003a78:	bl	#-72
 8003a7c:	str	r0, [sp, #4]
 8003a7e:	b	#-2 <core::slice::<impl [T]>::is_empty::hfc096c91e98f5ee4+0x1c>
 8003a80:	ldr	r0, [sp, #4]
 8003a82:	clz	r1, r0
 8003a86:	lsrs	r0, r1, #5
 8003a88:	add	sp, #24
 8003a8a:	pop	{r7, pc}

0000000008003a8c <usize as core::slice::SliceIndex<[T]>>::get_unchecked_mut::heef183aa7c484cbb:
 8003a8c:	push	{r7, lr}
 8003a8e:	sub	sp, #32
 8003a90:	mov	r3, r2
 8003a92:	mov	r12, r1
 8003a94:	mov	lr, r0
 8003a96:	str	r0, [sp, #20]
 8003a98:	str	r1, [sp, #24]
 8003a9a:	str	r2, [sp, #28]
 8003a9c:	ldr	r0, [sp, #24]
 8003a9e:	ldr	r1, [sp, #28]
 8003aa0:	str	r3, [sp, #16]
 8003aa2:	str.w	r12, [sp, #12]
 8003aa6:	str.w	lr, [sp, #8]
 8003aaa:	bl	#-238
 8003aae:	str	r0, [sp, #4]
 8003ab0:	b	#-2 <<usize as core::slice::SliceIndex<[T]>>::get_unchecked_mut::heef183aa7c484cbb+0x26>
 8003ab2:	ldr	r1, [sp, #20]
 8003ab4:	ldr	r0, [sp, #4]
 8003ab6:	bl	#-6254
 8003aba:	str	r0, [sp]
 8003abc:	b	#-2 <<usize as core::slice::SliceIndex<[T]>>::get_unchecked_mut::heef183aa7c484cbb+0x32>
 8003abe:	ldr	r0, [sp]
 8003ac0:	add	sp, #32
 8003ac2:	pop	{r7, pc}

0000000008003ac4 <core::ops::range::RangeTo<usize> as core::slice::SliceIndex<[T]>>::get_unchecked_mut::hf6bc316abd3d43d7:
 8003ac4:	push	{r4, lr}
 8003ac6:	sub	sp, #48
 8003ac8:	mov	r3, r2
 8003aca:	mov	r12, r1
 8003acc:	mov	lr, r0
 8003ace:	str	r0, [sp, #28]
 8003ad0:	str	r1, [sp, #32]
 8003ad2:	str	r2, [sp, #36]
 8003ad4:	ldr	r0, [sp, #28]
 8003ad6:	movs	r1, #0
 8003ad8:	str	r1, [sp, #40]
 8003ada:	str	r0, [sp, #44]
 8003adc:	ldr	r2, [sp, #32]
 8003ade:	ldr	r0, [sp, #36]
 8003ae0:	ldr	r1, [sp, #40]
 8003ae2:	ldr	r4, [sp, #44]
 8003ae4:	str	r0, [sp, #24]
 8003ae6:	mov	r0, r1
 8003ae8:	mov	r1, r4
 8003aea:	ldr	r4, [sp, #24]
 8003aec:	str	r3, [sp, #20]
 8003aee:	mov	r3, r4
 8003af0:	str.w	r12, [sp, #16]
 8003af4:	str.w	lr, [sp, #12]
 8003af8:	bl	#14
 8003afc:	str	r0, [sp, #8]
 8003afe:	str	r1, [sp, #4]
 8003b00:	b	#-2 <<core::ops::range::RangeTo<usize> as core::slice::SliceIndex<[T]>>::get_unchecked_mut::hf6bc316abd3d43d7+0x3e>
 8003b02:	ldr	r0, [sp, #8]
 8003b04:	ldr	r1, [sp, #4]
 8003b06:	add	sp, #48
 8003b08:	pop	{r4, pc}

0000000008003b0a <core::ops::range::Range<usize> as core::slice::SliceIndex<[T]>>::get_unchecked_mut::h548d222daba54a3f:
 8003b0a:	push	{r4, r5, r7, lr}
 8003b0c:	sub	sp, #48
 8003b0e:	mov	r12, r3
 8003b10:	mov	lr, r2
 8003b12:	mov	r4, r1
 8003b14:	mov	r5, r0
 8003b16:	str	r0, [sp, #32]
 8003b18:	str	r1, [sp, #36]
 8003b1a:	str	r2, [sp, #40]
 8003b1c:	str	r3, [sp, #44]
 8003b1e:	ldr	r0, [sp, #40]
 8003b20:	ldr	r1, [sp, #44]
 8003b22:	str.w	r12, [sp, #28]
 8003b26:	str.w	lr, [sp, #24]
 8003b2a:	str	r4, [sp, #20]
 8003b2c:	str	r5, [sp, #16]
 8003b2e:	bl	#-370
 8003b32:	str	r0, [sp, #12]
 8003b34:	b	#-2 <<core::ops::range::Range<usize> as core::slice::SliceIndex<[T]>>::get_unchecked_mut::h548d222daba54a3f+0x2c>
 8003b36:	ldr	r1, [sp, #32]
 8003b38:	ldr	r0, [sp, #12]
 8003b3a:	bl	#-6386
 8003b3e:	str	r0, [sp, #8]
 8003b40:	b	#-2 <<core::ops::range::Range<usize> as core::slice::SliceIndex<[T]>>::get_unchecked_mut::h548d222daba54a3f+0x38>
 8003b42:	ldr	r0, [sp, #32]
 8003b44:	ldr	r1, [sp, #36]
 8003b46:	subs	r1, r1, r0
 8003b48:	ldr	r0, [sp, #8]
 8003b4a:	bl	#-564
 8003b4e:	str	r0, [sp, #4]
 8003b50:	str	r1, [sp]
 8003b52:	b	#-2 <<core::ops::range::Range<usize> as core::slice::SliceIndex<[T]>>::get_unchecked_mut::h548d222daba54a3f+0x4a>
 8003b54:	ldr	r0, [sp, #4]
 8003b56:	ldr	r1, [sp]
 8003b58:	add	sp, #48
 8003b5a:	pop	{r4, r5, r7, pc}

0000000008003b5c _ZN4core6result19Result$LT$T$C$E$GT$3map17h14ad7f39a63e60a9E:
 8003b5c:	push	{r7, lr}
 8003b5e:	sub	sp, #48
 8003b60:	mov	r2, r1
 8003b62:	mov	r3, r0
 8003b64:	str	r0, [sp, #16]
 8003b66:	str	r1, [sp, #20]
 8003b68:	movs	r0, #0
 8003b6a:	strb.w	r0, [sp, #47]
 8003b6e:	strb.w	r0, [sp, #45]
 8003b72:	strb.w	r0, [sp, #46]
 8003b76:	movs	r0, #1
 8003b78:	strb.w	r0, [sp, #46]
 8003b7c:	strb.w	r0, [sp, #47]
 8003b80:	strb.w	r0, [sp, #45]
 8003b84:	ldr	r0, [sp, #16]
 8003b86:	cmp	r0, #0
 8003b88:	str	r2, [sp, #12]
 8003b8a:	str	r3, [sp, #8]
 8003b8c:	str	r0, [sp, #4]
 8003b8e:	beq	#10 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h14ad7f39a63e60a9E+0x40>
 8003b90:	b	#-2 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h14ad7f39a63e60a9E+0x36>
 8003b92:	ldr	r0, [sp, #4]
 8003b94:	cmp	r0, #1
 8003b96:	beq	#40 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h14ad7f39a63e60a9E+0x66>
 8003b98:	b	#-2 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h14ad7f39a63e60a9E+0x3e>
 8003b9a:	trap
 8003b9c:	movs	r0, #0
 8003b9e:	strb.w	r0, [sp, #47]
 8003ba2:	ldr	r1, [sp, #20]
 8003ba4:	str	r1, [sp, #36]
 8003ba6:	strb.w	r0, [sp, #45]
 8003baa:	ldr	r0, [sp, #36]
 8003bac:	str	r0, [sp, #40]
 8003bae:	ldr	r0, [sp, #40]
 8003bb0:	bl	#-2438
 8003bb4:	str	r0, [sp]
 8003bb6:	b	#-2 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h14ad7f39a63e60a9E+0x5c>
 8003bb8:	ldr	r0, [sp]
 8003bba:	str	r0, [sp, #32]
 8003bbc:	movs	r1, #0
 8003bbe:	str	r1, [sp, #28]
 8003bc0:	b	#10 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h14ad7f39a63e60a9E+0x72>
 8003bc2:	movs	r0, #0
 8003bc4:	strb.w	r0, [sp, #46]
 8003bc8:	movs	r0, #1
 8003bca:	str	r0, [sp, #28]
 8003bcc:	b	#-2 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h14ad7f39a63e60a9E+0x72>
 8003bce:	ldrb.w	r0, [sp, #45]
 8003bd2:	lsls	r0, r0, #31
 8003bd4:	cmp	r0, #0
 8003bd6:	bne	#8 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h14ad7f39a63e60a9E+0x86>
 8003bd8:	b	#-2 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h14ad7f39a63e60a9E+0x7e>
 8003bda:	ldr	r0, [sp, #16]
 8003bdc:	cmp	r0, #0
 8003bde:	beq	#16 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h14ad7f39a63e60a9E+0x96>
 8003be0:	b	#34 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h14ad7f39a63e60a9E+0xaa>
 8003be2:	movs	r0, #0
 8003be4:	strb.w	r0, [sp, #45]
 8003be8:	b	#-18 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h14ad7f39a63e60a9E+0x7e>
 8003bea:	ldr	r0, [sp, #28]
 8003bec:	ldr	r1, [sp, #32]
 8003bee:	add	sp, #48
 8003bf0:	pop	{r7, pc}
 8003bf2:	ldrb.w	r0, [sp, #47]
 8003bf6:	lsls	r0, r0, #31
 8003bf8:	cmp	r0, #0
 8003bfa:	beq	#-20 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h14ad7f39a63e60a9E+0x8e>
 8003bfc:	b	#-2 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h14ad7f39a63e60a9E+0xa2>
 8003bfe:	movs	r0, #0
 8003c00:	strb.w	r0, [sp, #47]
 8003c04:	b	#-30 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h14ad7f39a63e60a9E+0x8e>
 8003c06:	ldrb.w	r0, [sp, #46]
 8003c0a:	lsls	r0, r0, #31
 8003c0c:	cmp	r0, #0
 8003c0e:	beq	#-40 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h14ad7f39a63e60a9E+0x8e>
 8003c10:	b	#-2 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h14ad7f39a63e60a9E+0xb6>
 8003c12:	movs	r0, #0
 8003c14:	strb.w	r0, [sp, #46]
 8003c18:	b	#-50 <_ZN4core6result19Result$LT$T$C$E$GT$3map17h14ad7f39a63e60a9E+0x8e>

0000000008003c1a _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h249e1d6e2ae885e4E:
 8003c1a:	push	{r7, lr}
 8003c1c:	sub	sp, #32
 8003c1e:	mov	r1, r0
 8003c20:	strb.w	r0, [sp, #15]
 8003c24:	movs	r0, #0
 8003c26:	strb.w	r0, [sp, #31]
 8003c2a:	strb.w	r0, [sp, #29]
 8003c2e:	strb.w	r0, [sp, #30]
 8003c32:	movs	r0, #1
 8003c34:	strb.w	r0, [sp, #30]
 8003c38:	strb.w	r0, [sp, #31]
 8003c3c:	strb.w	r0, [sp, #29]
 8003c40:	ldrb.w	r0, [sp, #15]
 8003c44:	lsls	r2, r0, #31
 8003c46:	cmp	r2, #0
 8003c48:	str	r1, [sp, #8]
 8003c4a:	str	r0, [sp, #4]
 8003c4c:	beq	#10 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h249e1d6e2ae885e4E+0x40>
 8003c4e:	b	#-2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h249e1d6e2ae885e4E+0x36>
 8003c50:	ldr	r0, [sp, #4]
 8003c52:	cmp	r0, #1
 8003c54:	beq	#14 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h249e1d6e2ae885e4E+0x4c>
 8003c56:	b	#-2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h249e1d6e2ae885e4E+0x3e>
 8003c58:	trap
 8003c5a:	movs	r0, #0
 8003c5c:	strb.w	r0, [sp, #31]
 8003c60:	strb.w	r0, [sp, #19]
 8003c64:	b	#22 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h249e1d6e2ae885e4E+0x64>
 8003c66:	movs	r0, #0
 8003c68:	strb.w	r0, [sp, #30]
 8003c6c:	strb.w	r0, [sp, #29]
 8003c70:	bl	#-2686
 8003c74:	b	#-2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h249e1d6e2ae885e4E+0x5c>
 8003c76:	movs	r0, #1
 8003c78:	strb.w	r0, [sp, #19]
 8003c7c:	b	#-2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h249e1d6e2ae885e4E+0x64>
 8003c7e:	ldrb.w	r0, [sp, #29]
 8003c82:	lsls	r0, r0, #31
 8003c84:	cmp	r0, #0
 8003c86:	bne	#12 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h249e1d6e2ae885e4E+0x7c>
 8003c88:	b	#-2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h249e1d6e2ae885e4E+0x70>
 8003c8a:	ldrb.w	r0, [sp, #15]
 8003c8e:	lsls	r0, r0, #31
 8003c90:	cmp	r0, #0
 8003c92:	beq	#16 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h249e1d6e2ae885e4E+0x8c>
 8003c94:	b	#34 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h249e1d6e2ae885e4E+0xa0>
 8003c96:	movs	r0, #0
 8003c98:	strb.w	r0, [sp, #29]
 8003c9c:	b	#-22 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h249e1d6e2ae885e4E+0x70>
 8003c9e:	ldrb.w	r0, [sp, #19]
 8003ca2:	add	sp, #32
 8003ca4:	pop	{r7, pc}
 8003ca6:	ldrb.w	r0, [sp, #31]
 8003caa:	lsls	r0, r0, #31
 8003cac:	cmp	r0, #0
 8003cae:	beq	#-20 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h249e1d6e2ae885e4E+0x84>
 8003cb0:	b	#-2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h249e1d6e2ae885e4E+0x98>
 8003cb2:	movs	r0, #0
 8003cb4:	strb.w	r0, [sp, #31]
 8003cb8:	b	#-30 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h249e1d6e2ae885e4E+0x84>
 8003cba:	ldrb.w	r0, [sp, #30]
 8003cbe:	lsls	r0, r0, #31
 8003cc0:	cmp	r0, #0
 8003cc2:	beq	#-40 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h249e1d6e2ae885e4E+0x84>
 8003cc4:	b	#-2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h249e1d6e2ae885e4E+0xac>
 8003cc6:	movs	r0, #0
 8003cc8:	strb.w	r0, [sp, #30]
 8003ccc:	b	#-50 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h249e1d6e2ae885e4E+0x84>

0000000008003cce __syscall:
 8003cce:	bkpt	#171
 8003cd0:	bx	lr

0000000008003cd2 <&T as core::fmt::Display>::fmt::h04c90e31ca873e9f:
 8003cd2:	push	{r7, lr}
 8003cd4:	sub	sp, #24
 8003cd6:	mov	r2, r1
 8003cd8:	mov	r3, r0
 8003cda:	str	r0, [sp, #16]
 8003cdc:	str	r1, [sp, #20]
 8003cde:	ldr	r0, [sp, #16]
 8003ce0:	ldr	r0, [r0]
 8003ce2:	ldr	r1, [sp, #20]
 8003ce4:	str	r2, [sp, #12]
 8003ce6:	str	r3, [sp, #8]
 8003ce8:	bl	#-6318
 8003cec:	str	r0, [sp, #4]
 8003cee:	b	#-2 <<&T as core::fmt::Display>::fmt::h04c90e31ca873e9f+0x1e>
 8003cf0:	ldr	r0, [sp, #4]
 8003cf2:	and	r0, r0, #1
 8003cf6:	add	sp, #24
 8003cf8:	pop	{r7, pc}

0000000008003cfa core::fmt::ArgumentV1::new::h550e7527309674d8:
 8003cfa:	sub	sp, #40
 8003cfc:	mov	r2, r1
 8003cfe:	mov	r3, r0
 8003d00:	str	r0, [sp, #16]
 8003d02:	str	r1, [sp, #20]
 8003d04:	ldr	r0, [sp, #20]
 8003d06:	str	r0, [sp, #32]
 8003d08:	ldr	r0, [sp, #32]
 8003d0a:	str	r2, [sp, #12]
 8003d0c:	str	r3, [sp, #8]
 8003d0e:	str	r0, [sp, #4]
 8003d10:	b	#-2 <core::fmt::ArgumentV1::new::h550e7527309674d8+0x18>
 8003d12:	ldr	r0, [sp, #16]
 8003d14:	str	r0, [sp, #36]
 8003d16:	ldr	r0, [sp, #36]
 8003d18:	str	r0, [sp]
 8003d1a:	b	#-2 <core::fmt::ArgumentV1::new::h550e7527309674d8+0x22>
 8003d1c:	ldr	r0, [sp]
 8003d1e:	str	r0, [sp, #24]
 8003d20:	ldr	r1, [sp, #4]
 8003d22:	str	r1, [sp, #28]
 8003d24:	ldr	r0, [sp, #24]
 8003d26:	ldr	r1, [sp, #28]
 8003d28:	add	sp, #40
 8003d2a:	bx	lr

0000000008003d2c core::fmt::Arguments::new_v1::h3246bf1325b8a272:
 8003d2c:	push	{r4, r5, r6, lr}
 8003d2e:	sub	sp, #40
 8003d30:	ldr.w	r12, [sp, #56]
 8003d34:	mov	lr, r3
 8003d36:	mov	r4, r2
 8003d38:	mov	r5, r1
 8003d3a:	mov	r6, r0
 8003d3c:	str	r1, [sp, #16]
 8003d3e:	str	r2, [sp, #20]
 8003d40:	str	r3, [sp, #24]
 8003d42:	str.w	r12, [sp, #28]
 8003d46:	ldr	r1, [sp, #16]
 8003d48:	ldr	r2, [sp, #20]
 8003d4a:	movs	r3, #0
 8003d4c:	str	r3, [sp, #36]
 8003d4e:	str	r3, [sp, #32]
 8003d50:	str	r3, [sp, #32]
 8003d52:	ldr	r3, [sp, #24]
 8003d54:	ldr.w	r12, [sp, #28]
 8003d58:	str	r1, [r0]
 8003d5a:	str	r2, [r0, #4]
 8003d5c:	ldr	r1, [sp, #32]
 8003d5e:	ldr	r2, [sp, #36]
 8003d60:	str	r1, [r0, #8]
 8003d62:	str	r2, [r0, #12]
 8003d64:	str	r3, [r0, #16]
 8003d66:	str.w	r12, [r0, #20]
 8003d6a:	str.w	lr, [sp, #12]
 8003d6e:	str	r4, [sp, #8]
 8003d70:	str	r5, [sp, #4]
 8003d72:	str	r6, [sp]
 8003d74:	add	sp, #40
 8003d76:	pop	{r4, r5, r6, pc}

0000000008003d78 cortex_m::interrupt::disable::hc37cc1e1b81573f4:
 8003d78:	push	{r7, lr}
 8003d7a:	bl	#-7568
 8003d7e:	b	#-2 <cortex_m::interrupt::disable::hc37cc1e1b81573f4+0x8>
 8003d80:	pop	{r7, pc}

0000000008003d82 __aeabi_memcpy:
 8003d82:	push	{r4, r5, r7, lr}
 8003d84:	cbz	r2, #86
 8003d86:	subs	r3, r2, #1
 8003d88:	and	r12, r2, #3
 8003d8c:	cmp	r3, #3
 8003d8e:	bhs	#8 <__aeabi_memcpy+0x18>
 8003d90:	movs	r2, #0
 8003d92:	cmp.w	r12, #0
 8003d96:	bne	#38 <__aeabi_memcpy+0x3e>
 8003d98:	b	#66 <__aeabi_memcpy+0x5c>
 8003d9a:	sub.w	lr, r2, r12
 8003d9e:	movs	r2, #0
 8003da0:	ldrb	r3, [r1, r2]
 8003da2:	adds	r5, r0, r2
 8003da4:	strb	r3, [r0, r2]
 8003da6:	adds	r3, r1, r2
 8003da8:	adds	r2, #4
 8003daa:	ldrb	r4, [r3, #1]
 8003dac:	cmp	lr, r2
 8003dae:	strb	r4, [r5, #1]
 8003db0:	ldrb	r4, [r3, #2]
 8003db2:	strb	r4, [r5, #2]
 8003db4:	ldrb	r3, [r3, #3]
 8003db6:	strb	r3, [r5, #3]
 8003db8:	bne	#-28 <__aeabi_memcpy+0x1e>
 8003dba:	cmp.w	r12, #0
 8003dbe:	beq	#28 <__aeabi_memcpy+0x5c>
 8003dc0:	ldrb	r3, [r1, r2]
 8003dc2:	cmp.w	r12, #1
 8003dc6:	strb	r3, [r0, r2]
 8003dc8:	beq	#18 <__aeabi_memcpy+0x5c>
 8003dca:	adds	r3, r2, #1
 8003dcc:	cmp.w	r12, #2
 8003dd0:	ldrb	r5, [r1, r3]
 8003dd2:	strb	r5, [r0, r3]
 8003dd4:	it	eq
 8003dd6:	popeq	{r4, r5, r7, pc}
 8003dd8:	adds	r2, #2
 8003dda:	ldrb	r1, [r1, r2]
 8003ddc:	strb	r1, [r0, r2]
 8003dde:	pop	{r4, r5, r7, pc}

0000000008003de0 __aeabi_memcpy4:
 8003de0:	cmp	r2, #4
 8003de2:	it	lo
 8003de4:	blo.w	#-102 <__aeabi_memcpy>
 8003de8:	push	{r4, r5, r7, lr}
 8003dea:	sub.w	r12, r2, #4
 8003dee:	movs	r3, #1
 8003df0:	add.w	r3, r3, r12, lsr #2
 8003df4:	ands	r3, r3, #3
 8003df8:	beq	#28 <__aeabi_memcpy4+0x38>
 8003dfa:	mov	lr, r1
 8003dfc:	mov	r4, r0
 8003dfe:	ldr	r5, [lr], #4
 8003e02:	cmp	r3, #1
 8003e04:	str	r5, [r4], #4
 8003e08:	bne	#62 <__aeabi_memcpy4+0x6a>
 8003e0a:	mov	r3, r12
 8003e0c:	mov	r0, r4
 8003e0e:	mov	r1, lr
 8003e10:	cmp.w	r12, #12
 8003e14:	bhs	#8 <__aeabi_memcpy4+0x40>
 8003e16:	b	#36 <__aeabi_memcpy4+0x5e>
 8003e18:	mov	r3, r2
 8003e1a:	cmp.w	r12, #12
 8003e1e:	blo	#28 <__aeabi_memcpy4+0x5e>
 8003e20:	ldr	r5, [r1]
 8003e22:	subs	r3, #16
 8003e24:	str	r5, [r0]
 8003e26:	cmp	r3, #3
 8003e28:	ldr	r5, [r1, #4]
 8003e2a:	str	r5, [r0, #4]
 8003e2c:	ldr	r5, [r1, #8]
 8003e2e:	str	r5, [r0, #8]
 8003e30:	ldr	r5, [r1, #12]
 8003e32:	add.w	r1, r1, #16
 8003e36:	str	r5, [r0, #12]
 8003e38:	add.w	r0, r0, #16
 8003e3c:	bhi	#-32 <__aeabi_memcpy4+0x40>
 8003e3e:	and	r2, r2, #3
 8003e42:	pop.w	{r4, r5, r7, lr}
 8003e46:	b.w	#-200 <__aeabi_memcpy>
 8003e4a:	ldr	r5, [r1, #4]
 8003e4c:	cmp	r3, #2
 8003e4e:	str	r5, [r0, #4]
 8003e50:	bne	#14 <__aeabi_memcpy4+0x82>
 8003e52:	sub.w	r3, r2, #8
 8003e56:	adds	r1, #8
 8003e58:	adds	r0, #8
 8003e5a:	cmp.w	r12, #12
 8003e5e:	bhs	#-66 <__aeabi_memcpy4+0x40>
 8003e60:	b	#-38 <__aeabi_memcpy4+0x5e>
 8003e62:	ldr	r3, [r1, #8]
 8003e64:	adds	r1, #12
 8003e66:	str	r3, [r0, #8]
 8003e68:	sub.w	r3, r2, #12
 8003e6c:	adds	r0, #12
 8003e6e:	cmp.w	r12, #12
 8003e72:	bhs	#-86 <__aeabi_memcpy4+0x40>
 8003e74:	b	#-58 <__aeabi_memcpy4+0x5e>

0000000008003e76 Reset:
 8003e76:	bl	#108
 8003e7a:	b	#-2 <Reset+0x6>
 8003e7c:	movw	r0, #0
 8003e80:	movt	r0, #8192
 8003e84:	movw	r1, #4
 8003e88:	movt	r1, #8192
 8003e8c:	bl	#88
 8003e90:	b	#-2 <Reset+0x1c>
 8003e92:	movw	r0, #0
 8003e96:	movt	r0, #8192
 8003e9a:	movw	r1, #0
 8003e9e:	movt	r1, #8192
 8003ea2:	movw	r2, #19108
 8003ea6:	movt	r2, #2048
 8003eaa:	bl	#130
 8003eae:	b	#-2 <Reset+0x3a>
 8003eb0:	movw	r0, #60808
 8003eb4:	movt	r0, #57344
 8003eb8:	ldr	r1, [r0]
 8003eba:	orr	r1, r1, #15728640
 8003ebe:	bl	#232
 8003ec2:	b	#-2 <Reset+0x4e>
 8003ec4:	bl	#2
 8003ec8:	trap

0000000008003eca ResetTrampoline:
 8003eca:	bl	#-10204
 8003ece:	trap

0000000008003ed0 DefaultHandler_:
 8003ed0:	sub	sp, #8

0000000008003ed1 WWDG:
 8003ed1: <unknown>
 8003ed2:	b	#-2 <WWDG+0x3>
 8003ed4:	movs	r0, #4
 8003ed6:	strb.w	r0, [sp, #7]
 8003eda:	ldrb.w	r0, [sp, #7]
 8003ede:	bl	#434
 8003ee2:	b	#-2 <WWDG+0x13>
 8003ee4:	b	#-20 <WWDG+0x3>

0000000008003ee6 DefaultPreInit:
 8003ee6:	bx	lr

0000000008003ee7 __pre_init:
 8003ee7:	strh	r7, [r0, #2]

0000000008003ee8 r0::zero_bss::h201ff35f464a7200:
 8003ee8:	push	{r7, lr}
 8003eea:	sub	sp, #32
 8003eec:	mov	r2, r1
 8003eee:	mov	r3, r0
 8003ef0:	str	r0, [sp, #24]
 8003ef2:	str	r1, [sp, #28]
 8003ef4:	str	r2, [sp, #20]
 8003ef6:	str	r3, [sp, #16]
 8003ef8:	b	#-2 <r0::zero_bss::h201ff35f464a7200+0x12>
 8003efa:	ldr	r0, [sp, #24]
 8003efc:	ldr	r1, [sp, #28]
 8003efe:	cmp	r0, r1
 8003f00:	bhs	#12 <r0::zero_bss::h201ff35f464a7200+0x28>
 8003f02:	b	#-2 <r0::zero_bss::h201ff35f464a7200+0x1c>
 8003f04:	ldr	r0, [sp, #24]
 8003f06:	str	r0, [sp, #12]
 8003f08:	bl	#138
 8003f0c:	str	r0, [sp, #8]
 8003f0e:	b	#2 <r0::zero_bss::h201ff35f464a7200+0x2c>
 8003f10:	add	sp, #32
 8003f12:	pop	{r7, pc}
 8003f14:	ldr	r0, [sp, #12]
 8003f16:	ldr	r1, [sp, #8]
 8003f18:	bl	#142
 8003f1c:	b	#-2 <r0::zero_bss::h201ff35f464a7200+0x36>
 8003f1e:	ldr	r0, [sp, #24]
 8003f20:	movs	r1, #1
 8003f22:	bl	#158
 8003f26:	str	r0, [sp, #4]
 8003f28:	b	#-2 <r0::zero_bss::h201ff35f464a7200+0x42>
 8003f2a:	ldr	r0, [sp, #4]
 8003f2c:	str	r0, [sp, #24]
 8003f2e:	b	#-56 <r0::zero_bss::h201ff35f464a7200+0x12>

0000000008003f30 r0::init_data::hdd8912cceff86025:
 8003f30:	push	{r7, lr}
 8003f32:	sub	sp, #40
 8003f34:	mov	r3, r2
 8003f36:	mov	r12, r1
 8003f38:	mov	lr, r0
 8003f3a:	str	r0, [sp, #28]
 8003f3c:	str	r1, [sp, #32]
 8003f3e:	str	r2, [sp, #36]
 8003f40:	str	r3, [sp, #24]
 8003f42:	str.w	r12, [sp, #20]
 8003f46:	str.w	lr, [sp, #16]
 8003f4a:	b	#-2 <r0::init_data::hdd8912cceff86025+0x1c>
 8003f4c:	ldr	r0, [sp, #28]
 8003f4e:	ldr	r1, [sp, #32]
 8003f50:	cmp	r0, r1
 8003f52:	bhs	#16 <r0::init_data::hdd8912cceff86025+0x36>
 8003f54:	b	#-2 <r0::init_data::hdd8912cceff86025+0x26>
 8003f56:	ldr	r0, [sp, #28]
 8003f58:	ldr	r1, [sp, #36]
 8003f5a:	str	r0, [sp, #12]
 8003f5c:	mov	r0, r1
 8003f5e:	bl	#170
 8003f62:	str	r0, [sp, #8]
 8003f64:	b	#2 <r0::init_data::hdd8912cceff86025+0x3a>
 8003f66:	add	sp, #40
 8003f68:	pop	{r7, pc}
 8003f6a:	ldr	r0, [sp, #12]
 8003f6c:	ldr	r1, [sp, #8]
 8003f6e:	bl	#220
 8003f72:	b	#-2 <r0::init_data::hdd8912cceff86025+0x44>
 8003f74:	ldr	r0, [sp, #28]
 8003f76:	movs	r1, #1
 8003f78:	bl	#72
 8003f7c:	str	r0, [sp, #4]
 8003f7e:	b	#-2 <r0::init_data::hdd8912cceff86025+0x50>
 8003f80:	ldr	r0, [sp, #4]
 8003f82:	str	r0, [sp, #28]
 8003f84:	ldr	r0, [sp, #36]
 8003f86:	movs	r1, #1
 8003f88:	bl	#92
 8003f8c:	str	r0, [sp]
 8003f8e:	b	#-2 <r0::init_data::hdd8912cceff86025+0x60>
 8003f90:	ldr	r0, [sp]
 8003f92:	str	r0, [sp, #36]
 8003f94:	b	#-76 <r0::init_data::hdd8912cceff86025+0x1c>

0000000008003f96 core::mem::zeroed::h9229d1b36a95c9d8:
 8003f96:	sub	sp, #8
 8003f98:	b	#-2 <core::mem::zeroed::h9229d1b36a95c9d8+0x4>
 8003f9a:	movs	r0, #0
 8003f9c:	str	r0, [sp, #4]
 8003f9e:	ldr	r0, [sp, #4]
 8003fa0:	str	r0, [sp]
 8003fa2:	b	#-2 <core::mem::zeroed::h9229d1b36a95c9d8+0xe>
 8003fa4:	ldr	r0, [sp]
 8003fa6:	add	sp, #8
 8003fa8:	bx	lr

0000000008003faa core::ptr::write_volatile::h18693a7c8fb2c05a:
 8003faa:	sub	sp, #16
 8003fac:	mov	r2, r1
 8003fae:	mov	r3, r0
 8003fb0:	str	r0, [sp, #8]
 8003fb2:	str	r1, [sp, #12]
 8003fb4:	ldr	r0, [sp, #8]
 8003fb6:	ldr	r1, [sp, #12]
 8003fb8:	str	r1, [r0]
 8003fba:	str	r2, [sp, #4]
 8003fbc:	str	r3, [sp]
 8003fbe:	b	#-2 <core::ptr::write_volatile::h18693a7c8fb2c05a+0x16>
 8003fc0:	add	sp, #16
 8003fc2:	bx	lr

0000000008003fc4 core::ptr::<impl *mut T>::offset::h432cc0ed254e63c8:
 8003fc4:	sub	sp, #24
 8003fc6:	mov	r2, r1
 8003fc8:	mov	r3, r0
 8003fca:	str	r0, [sp, #12]
 8003fcc:	str	r1, [sp, #16]
 8003fce:	ldr	r0, [sp, #12]
 8003fd0:	ldr	r1, [sp, #16]
 8003fd2:	add.w	r0, r0, r1, lsl #2
 8003fd6:	str	r0, [sp, #20]
 8003fd8:	ldr	r0, [sp, #20]
 8003fda:	str	r2, [sp, #8]
 8003fdc:	str	r3, [sp, #4]
 8003fde:	str	r0, [sp]
 8003fe0:	b	#-2 <core::ptr::<impl *mut T>::offset::h432cc0ed254e63c8+0x1e>
 8003fe2:	ldr	r0, [sp]
 8003fe4:	add	sp, #24
 8003fe6:	bx	lr

0000000008003fe8 core::ptr::<impl *const T>::offset::h1a03fdb5f6f8e477:
 8003fe8:	sub	sp, #24
 8003fea:	mov	r2, r1
 8003fec:	mov	r3, r0
 8003fee:	str	r0, [sp, #12]
 8003ff0:	str	r1, [sp, #16]
 8003ff2:	ldr	r0, [sp, #12]
 8003ff4:	ldr	r1, [sp, #16]
 8003ff6:	add.w	r0, r0, r1, lsl #2
 8003ffa:	str	r0, [sp, #20]
 8003ffc:	ldr	r0, [sp, #20]
 8003ffe:	str	r2, [sp, #8]
 8004000:	str	r3, [sp, #4]
 8004002:	str	r0, [sp]
 8004004:	b	#-2 <core::ptr::<impl *const T>::offset::h1a03fdb5f6f8e477+0x1e>
 8004006:	ldr	r0, [sp]
 8004008:	add	sp, #24
 800400a:	bx	lr

000000000800400c core::ptr::read::h47ef79a5baa7944c:
 800400c:	push	{r7, lr}
 800400e:	sub	sp, #48
 8004010:	mov	r1, r0
 8004012:	str	r0, [sp, #20]
 8004014:	ldr	r0, [sp, #28]
 8004016:	str	r0, [sp, #24]
 8004018:	str	r1, [sp, #16]
 800401a:	b	#-2 <core::ptr::read::h47ef79a5baa7944c+0x10>
 800401c:	ldr	r0, [sp, #20]
 800401e:	add	r1, sp, #24
 8004020:	str	r1, [sp, #40]
 8004022:	ldr	r1, [sp, #40]
 8004024:	str	r1, [sp, #44]
 8004026:	ldr	r1, [sp, #44]
 8004028:	str	r0, [sp, #12]
 800402a:	str	r1, [sp, #8]
 800402c:	b	#-2 <core::ptr::read::h47ef79a5baa7944c+0x22>
 800402e:	movs	r2, #1
 8004030:	ldr	r0, [sp, #12]
 8004032:	ldr	r1, [sp, #8]
 8004034:	bl	#46
 8004038:	b	#-2 <core::ptr::read::h47ef79a5baa7944c+0x2e>
 800403a:	ldr	r0, [sp, #24]
 800403c:	str	r0, [sp, #32]
 800403e:	ldr	r0, [sp, #32]
 8004040:	str	r0, [sp, #36]
 8004042:	ldr	r0, [sp, #36]
 8004044:	str	r0, [sp, #4]
 8004046:	b	#-2 <core::ptr::read::h47ef79a5baa7944c+0x3c>
 8004048:	ldr	r0, [sp, #4]
 800404a:	add	sp, #48
 800404c:	pop	{r7, pc}

000000000800404e core::ptr::write::hfa5b64b170cfdacd:
 800404e:	sub	sp, #16
 8004050:	mov	r2, r1
 8004052:	mov	r3, r0
 8004054:	str	r0, [sp, #8]
 8004056:	str	r1, [sp, #12]
 8004058:	ldr	r0, [sp, #8]
 800405a:	ldr	r1, [sp, #12]
 800405c:	str	r1, [r0]
 800405e:	str	r2, [sp, #4]
 8004060:	str	r3, [sp]
 8004062:	add	sp, #16
 8004064:	bx	lr

0000000008004066 core::intrinsics::copy_nonoverlapping::h00c8dfee0b960b75:
 8004066:	push	{r7, lr}
 8004068:	sub	sp, #24
 800406a:	mov	r3, r2
 800406c:	mov	r12, r1
 800406e:	mov	lr, r0
 8004070:	str	r0, [sp, #12]
 8004072:	str	r1, [sp, #16]
 8004074:	str	r2, [sp, #20]
 8004076:	ldr	r1, [sp, #12]
 8004078:	ldr	r0, [sp, #16]
 800407a:	ldr	r2, [sp, #20]
 800407c:	lsls	r2, r2, #2
 800407e:	str	r3, [sp, #8]
 8004080:	str.w	r12, [sp, #4]
 8004084:	str.w	lr, [sp]
 8004088:	bl	#-684
 800408c:	b	#-2 <core::intrinsics::copy_nonoverlapping::h00c8dfee0b960b75+0x28>
 800408e:	add	sp, #24
 8004090:	pop	{r7, pc}
 8004092:	bmi	#-88 <core::ptr::read::h47ef79a5baa7944c+0x32>

0000000008004094 core::sync::atomic::compiler_fence::h73e90ea8c4716fdb:
 8004094:	sub	sp, #16
 8004096:	mov	r1, r0
 8004098:	strb.w	r0, [sp, #11]
 800409c:	ldrb.w	r0, [sp, #11]
 80040a0:	mov	r2, r0
 80040a2:	cmp	r0, #4
 80040a4:	str	r1, [sp, #4]
 80040a6:	str	r2, [sp]
 80040a8:	bhi	#24 <$t.2+0xe>
 80040aa:	ldr	r1, [sp]
 80040ac:	tbb	[pc, r1]

00000000080040b0 $d.1:
 80040b0:	03 0c 0b 0d 	.word	0x0d0b0c03
 80040b4:	0e 00 		.short	0x000e

00000000080040b6 $t.2:
 80040b6:	movw	r0, #19084
 80040ba:	movt	r0, #2048
 80040be:	bl	#-7078
 80040c2:	trap
 80040c4:	trap
 80040c6:	b	#4 <$t.2+0x18>
 80040c8:	b	#2 <$t.2+0x18>
 80040ca:	b	#0 <$t.2+0x18>
 80040cc:	b	#-2 <$t.2+0x18>
 80040ce:	add	sp, #16
 80040d0:	bx	lr

00000000080040d2 HardFaultTrampoline:
 80040d2:	mov	r0, lr
 80040d4:	movs	r1, #4
 80040d6:	tst	r0, r1
 80040d8:	bne	#4 <HardFaultTrampoline+0xe>
 80040da:	mrs	r0, msp
 80040de:	b	#4 <HardFault_>
 80040e0:	mrs	r0, psp
 80040e4:	b	#-2 <HardFault_>

00000000080040e6 HardFault_:
 80040e6:	sub	sp, #16

00000000080040e7 HardFault:
 80040e7:	lsls	r0, r6, #6
 80040e9:	lsls	r6, r0, #9
 80040eb:	lsls	r0, r2, #6
 80040ed: <unknown>
 80040ee:	b	#-2 <HardFault+0x9>
 80040f0:	movs	r0, #4
 80040f2:	strb.w	r0, [sp, #15]
 80040f6:	ldrb.w	r0, [sp, #15]
 80040fa:	bl	#-106
 80040fe:	b	#-2 <HardFault+0x19>
 8004100:	b	#-20 <HardFault+0x9>
